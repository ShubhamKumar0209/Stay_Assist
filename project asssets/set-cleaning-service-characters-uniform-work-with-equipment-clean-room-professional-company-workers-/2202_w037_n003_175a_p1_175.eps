%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 24.2
%%For:  
%%CreationDate: 2/3/2022
%%BoundingBox: 0 0 525 380
%%HiResBoundingBox: 0 0 524.3758 379.9266
%%CropBox: 0 0 524.3758 379.9266
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.2.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.2.0 x490 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 11896 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD06FFA8A8FD37FF7E5453A9FD41FFA827F8F87DFD35FF59532953
%53FD2AFFCA7D5252FD13FF7DF8274A52FD2AFFCFCA7CFD08FF7E4B9A2753
%FD2AFF2720F8F8F8FD12FF7DF84A9A4BCAFD28FF7C7D2853A8FD07FFA099
%75994AFD2AFFA87575F8F87DFD11FFCA6FC2999AA8FD28FFA97E54A8FD09
%FFC29ABCCAFD2BFFA099754ACAFD12FFC9999AC9FD2BFF77A1C3FD08FFC9
%6FA1FD2CFFA07599C2CAFD12FFA89A6FA8A9FD29FFA19A99BCC9FD07FFA1
%C2A0A2CAFD2AFFCA999AC3FFAFFD0FFFA95A7D5253537D5AA9FD27FFC96E
%9999C2A7FFFFFFCAC976A1C8A076C2A0CAFD29FFA16EA1777E5A85A8FD0B
%FFA95A857D84858577845AAFFD27FFC99A76C2C8C8C9C9C8A07DA0C8A07D
%C2C8C2C9CFFD27FF7D7E5A7D7D615A6160AFAFFD07FFAF5A855A7D7D855A
%7D7D855AFD28FFA8A0C8A0C8C2C9C1A177C8C2A177C8A0C8C1C9FD26FFA1
%593661597759615A60366084FD06FF7E857F85777E858577A27F8584FD28
%FFC8C2C8C2C8C2C876A1C2C8A0A1C2C8C2C8C2CFFD25FF847D847DA07784
%5A60595A5A6184FD04FFA97F5A857E7D777E7E7D76855A7FA9FD27FFA7C2
%A0C8A0C8A07D76C8C2A176C8C2C8A0C8C2FD25FF597D9ABC997D365A355A
%35605A6084FFFFFFAF7E857F85777D777777A17E857EA9FD28FFCAC8C2C8
%C2C877A1A0A177A1A0C8C9C8C2C8CAFD23FFA96177C2BCC27D615A856061
%5A855A85FFFFFF85855A857E7D767D7777767E7DC2A0FD29FFCAC9A0C9C9
%7D76A1777776A1A0C9A0C8C2CFFD23FF85367D9AC299845A605A605A605A
%6084FFFFFFA97E857E85777D77A1777D9AC2BCC2CAFD2DFF777D77A1777D
%77A1C2C8C2C8CFFD23FF84617DA177A15A6160615A615A6060FD04FFA1C2
%9AA0777D7677767D779A99C299C9FD2CFFA87D7677767D7677A0C8A0C2A0
%FD23FFAF85367E5377777D537E595A5A85A8FD05FFCABBC2BCA177A177A1
%777D9BFD04C2FD2DFF777D77A1777D7CC8C2C8C2C9FD24FF60615A7777A1
%77A177A176CAFD07FFC3C2BCC2767D7777767D76A1A0C2C2C2CAFD2BFFA2
%777777767D77A1C2C8C2C2CAFD23FFA9605A5A53A17777767D7D7D77FD07
%FFCABBC29A7D77A1777D77A177CAC2C2C2C9FD2BFFA276A1777D77A19AC2
%C2C8C9FD25FF605A537E76A1777D77A1A17DA8FD06FFCABC99A15277767D
%767776777ECF99C2C2CAFD2AFF7677767D7677529ABCBCA0FD25FFA87E2F
%5A5977767D7677767D76A1FD06FFCABCC29A7777A177A177A177A1FFCABC
%9A99FD29FFA87777A17DA1777D759AC2A8AFFD24FFCA767D7D7D77A177A1
%77A1777D77FD06FFC3C2BBA0777D767D7777527D76A8CF9A4B9ACAFD28FF
%A1767776A17677529A99C3A8A8FD24FFC2769AC277A17DA17777767D7777
%A8FD05FFC2BCC29AA1777D77A1777D777D7DFFA8A0C2FD29FF77A1777D76
%A17E7E7EA87E855AFD24FFC36F9A9A7D77A1A1A1777D77A177CAFD05FF9A
%C2999A767D7677767776777677A8FFCAC9C9FD27FFA877767D77A177855A
%855A855A5A84FD23FF76999AA1767D76A1777D76777677A2FD06FFCFCA77
%A177A1777D77A177A177A8FFFFCFC8CFFD26FFA876A1777D76A185857E85
%7F855AFD23FF7EA8CACF7DA1777D7DA177A177A177A8FD07FFA97D767D77
%7D76777777767D7DFFFFFFC2C9FD26FF7777767D77A176A97E855A857E7E
%A8FD22FF5AA8FFA877767D76A1777D77777677A1FD08FF777D77A1777D53
%A1777D77A1FD04FF537EA8FD23FFA8A1777D77A177A17E857F857E857EFD
%22FFA87EFFFFCA777D77A17DA277A1777D76A8FD07FFA8777677767D7677
%767D767776CAFFFFFF7E295353FD22FFA8767D7677767D77847E857E855A
%7FA9FD21FF53FFFFFF7D777677767D7D77767D76777DFD07FFCB77A177A1
%77A177A177A1777DA8FFFFFFCB532F5453A9FD20FFA27D77A177A17DA17E
%8585857F857EFD21FF7EA8FFFFFFA877A177A177A277A177A177A1CAFD06
%FFA2777777767D77A2767D777776A2FD04FF7D2F2F532FA9FD1FFFA1767D
%777776A87D7E5AFD047EA9FD20FFA95AA8FFFFFF7D777777767D7D7D767D
%777776A2FD06FFA876A1777D77A2A87D77A1777D77FD05FF5353535453FD
%1FFF777D77A17777A8A8777D77A177A2FD21FFA87EFD04FFA876A1777D77
%A1777D77A1777D77FD06FFA177767D767777CB7677767D7677A8FD04FF7E
%28532F5359FD1DFFA87D7677767D76A8A177767776777DFD21FF53FD05FF
%A177767D767776A17677767D76777DFD05FFA876A177A177A8FFA177A177
%A177FD06FF532F5A5354A8FD1DFF77A177A1777DCACB77A177A177A1FD20
%FF7EA9FD05FFCA76A177A177A1A8A177A177A177A1FD05FF7D77767D7777
%7DFF7777767D7777A2FD05FF7E2F2F532984FD1CFFA2777777767D77FFA8
%777777767D77FD1FFFA85AA9FD05FFA877767D777776CAA177767D777776
%A8FD04FFA2777D77A177A8FFA2777D77A177A8FD06FFFD04537EFD1CFFA8
%76A1777D77A1FFCB76A1777D77A1FD1FFF8484FD07FF777D77A17777A8FF
%777D77A1777D77FD04FF777776777677A1FF7D77767776777DFD06FFA828
%53295AFD1CFF7D77767D767777FFA877767D767776FD1EFFAF53FD07FFA8
%7D7677767776A2FFA176777677767DA1FFFFFFA277A177A177CAFFA877A1
%77A177A2FD07FF7D2F5453FD1CFFA277A177A177A2FFFF77A177A177A1A8
%FD1DFF7EA9FD08FFA1A177FD04A1FFA87777A1A0C9C2C8CAFFFF777D7777
%7677A8FFA1777777767D77FD07FFA22F2F53A8FD1BFF7777767D77777DFF
%CA7D767D777776CAFD1CFFA85AFD09FFC9C1C8C2C8C2C8FFFFA0A0A0C8C2
%C8C2CFFFFF7D76A1777D76FFFFCA767D777D77A1FD08FF535353FD1BFFA8
%A1777D777D76A8FFFF777D77A17777A2FD18FF84A9FFFF7EA8FD09FFC9C9
%A0C3A0C9C9FFFFC9C2C8C2C376A8FFFFFFA1A1767776A1A8FFA87D76A176
%A17DFD08FFA82953A8FD1BFF7DA176A176A1A8FFA8A276A176A1A1A8FD17
%FFC9765A7EA853FD0BFFFD04532FFFFFFFCAC97753295353FD04FF7D535A
%7EA8FD04FFC3BCC277AFFD09FF7E2FFD1CFFAF84A87EA8AFFD04FFA97EA9
%84FD19FFC9C8A07D2F84FD09FFA9535453545354A9FFFFFF84542F5A5353
%A8FFFFA85353A95384FFFFFFAF2F5353532FFFA9FD07FFA853A8FD1AFFA9
%7E855A855AA9FD04FF7EA98585A9FD19FFCAC9C1A0525AA8FD05FFA87E29
%532F5353532FA9FFFF84532F532F532F7EFFFF842F5A7E5A7EFFFFFFA853
%2F545353535A7EFD07FFC9C9FD17FFAFA9A985857E857F85A9FFFFFFA985
%85857EA9FD1CFFC8C87C5384FFFFFFA853295453532F54535384FFA8532F
%5453532F5353FFA929532F53295AFFFFFFA829532F532F53295353FD05FF
%A7C9A0C9A7C9C9CAA8FD10FF855A7F5A855A855A855AA9FFFFFFA95A855A
%855AA9FD1CFFC9C89FFD04FF8429532F532F532F5329A8A8532F53295329
%53537EFFA85453532F545AFFFFFF8453535A53532F545353A8FFFFFFC9C8
%C2C8C1C8C2C8C2C9FD10FF7F857E857F857E857F85A9FFFFFF85857F857E
%8585FD1EFFCFFD06FFA8FFA9FFA8FFA9FFFF842953537E7EA9A9FD04FFA8
%A9A8A8A8FD05FFA8A9A8AFA8A8A8A9A8FD05FFCACFCACFCACFCACACAFD11
%FFA9FFA9FFA9FFA9FFA9FD05FF84A9A9A9A8FD2FFF7E7E7EAFFDFCFFFD47
%FFA8A9A9FD7DFF7E2FFD48FFA8A8A88453527DFD2DFFCAA82F2752FD46FF
%52F8F8282F28F8F8A8FD2BFF52F82800F8F8A8FD44FFA8F8F8F82F5A004B
%52FD2BFFA8F8F852F84B4BA8FD44FF7DF8F8F8534C766FA1FD2BFF7DF8F8
%4B9A759AA1FD44FFFD04F85376BC99C3FD2BFF52F8F876C29AC2FD44FF7D
%FD04F87DA8996FCAFD2BFF52F8F827A76EA1A8FD44FFF8F8275353A2A0A1
%FD2CFF27052F7E775953A184AFFD42FFA828532F77775A53A2FD2BFF5936
%61777E6060767E3684AFFD40FF7E545354777D2F7752A9FD2AFF5A615A7D
%7D61607D77615A85FD3FFFA8532F532F775253537D2FFD29FF60605A6076
%7D366159775A6036A9FD2AFFA8A8A8FD11FFA82F5A537E77A17D7D777E7E
%FD27FFAF615A605AA17D847E7D7EAF846084FD29FFA85A2F54A8FD10FF59
%2F2F5359A1767D769A99C2A8FD26FFAF365A2F5A537D77A176A17EA85A60
%AFFD27FF7E534C532984FD10FF7E76A19AC3C2C29AC2C2C2BBC9FD26FF84
%615A615A615AA1999A767D5A6160FD29FFA19975277DFD10FFC9C2BBC299
%C2BCC299C29AC2A1FD26FFA936605A605A60A0C2999A77603685FD29FFC9
%6FC26EA1FD11FFC2C2BCC2C2C2BCC39AC2BC84AFFD25FFAF855A615A6160
%A1BCC2527E606185FD29FFCA9A99C9FD13FFA09A9AA09AA177A1BBC27684
%FD26FFA8855A605A60779A76777D6036FD2BFF769AA1FFCFFD11FFA1777D
%777D777DA1C3BCC27DC9CAFD27FF777D777D282F53A1A0A8FD29FFCA77A1
%A0A1A0C9C9FD0FFFA876A17677767D76A8CAC3BBC26FBCCAFD25FFA27776
%777677527776C2C2FD28FFC99F77A0C876A1C1C2A0FD0EFFA1A177A177A1
%777DA1FFFFC36F7699CAFD25FFA877A177A177A177A19AC2FD27FFCAC2A1
%77C8C2A1A0C8C2C8C9FD0DFF7D767D777776A1767DA8FFA79A6FA1FD26FF
%7D77777776A17D7D76A1767EFD25FFCFC2C876A1A0C876A1C2C8A0C8CFFD
%0CFF777D77A177A176A177CBFFFFFFCF84AFFD25FFA276A1777D7DA177A1
%775453FD1DFFCFFD07FFC2C8C2A17DA27D7DA0C8C2C8C2CFFD0BFFA87D76
%77767D767D7677A1FD04FFAF5AFD25FF7D77767D76A1777D76772F53A8FD
%1BFF84A19AFFFFCAA7C9A0C2A0C87677767D77A0C2C8A0C2A7FD0CFF77A1
%77A177A177A177A1FD05FF85A9FD24FFA277A1777D7DA177A1777D77A9FD
%1AFFA8A25A9AC2C3BCC2BCC2C2C8C2A177A1777DA0C8C2C8C2C9FD0BFFA8
%7D7777767D767D767D76CBFD04FFA885FD24FF7D77767D76A1777D777753
%777EFD19FFA1996FA2529999C2BBC2BCC2C2C37777767D77A1C2C8C2C8A0
%FD0BFFCB76A1777D77A1777D777DA8FD05FF84AFFD23FFA1777D77A1A1A1
%77A177537EFD1AFFCA6F99A1C3C2C3C2C39AA177A1777D77A176A1A0C2C2
%C8C2C9FD0BFFA877767D7677767D767776A1FD05FFAF5AFD23FF767D7677
%76A17777767753FD1BFFCAA0A1FFFFFFA87D5253285376A09AA09AC299C2
%9AC299C2CAFD0BFFA876A177A177A177A177A177FD06FF85A9FD22FFA177
%A177A1A1A177A177CBFD1EFFA87E5353282F2F7E76A0BCC2C2C2BCC2C2C2
%BCC2C2FD0CFFA277767D7777767D77777677A8FD05FFA885FD22FF777D77
%7776A277777677A8FD1DFF532F282F5359285A77C2BCC299C2BCC299C2BC
%C29AA1FD0CFFA8777D77A1777D77A1777D76A8FD06FF84AFFD21FFA177A1
%777D7DA1777D76CBFD1CFF7E2F535A5A7E535A535376C2C2C276A19AA176
%A1777D7DFD0CFF7D777677767D7777767D767776FD07FF5AFD21FF777776
%7D76A1777D7677A8FD1CFFA953532F532F532F532F5376775377767D7777
%767D76A2FD0CFFA877A177A177A277A177A177A1A8FD06FFAF85FD20FFA1
%77A1777D7DA177A177CBFD1DFF7E2F5A5354535A535453542F5477A177A1
%77A177A1A8FD0CFF7D7777777677A1A1767D777776A8FD06FFA985FD20FF
%7777767D77A1767D7777A8FD1CFFA82F532F5353532F5353532F532F5376
%7D7777767776CBFD0CFFA276A1777D76A8A87777A1777D77FD07FF84AFFD
%1EFFA8A1777D77A1A17D77A177CAFD1CFF53545353535453535354535353
%545377767D76777677A8FFA9FFA97EA8FD06FF7777767D7677A1FF767776
%7D7677A8FD07FF5AFD1FFF767D767776A177777677A8FD1BFFA8532F532F
%532F532F532F532F532F5353765277527752A87E7F5A7F28A8FD06FFA177
%A177A176A8FFA177A177A176A8FD07FFAF85FD1DFFCAA177A177A1A1A177
%A177FD1CFF7E2F5A5354535A5354535A5354535A5353767D767776777D85
%7E8585537DFD06FF7777767D77777DFF7D77767D77777DFD07FFAF85AFFD
%1DFF767D777776A27777767DA8FD1BFF53532F5353532F5353532F535353
%2F5353775277767776A17E855A855353FD06FFA1777D77A177A8FFCA777D
%77A1777EA8FFA9A9A8FFFFFFA8A9A9AFCFFD19FFCB7D77A1777D7DA1777D
%77FD1BFFA854535353545353535453535354535353547677767776777685
%7F857E7E2FFD06FF7677767776777DFFA87777775353597E53532953A0FF
%FFA95A84A0C8A0CFFD18FF7677767777A1767D7677A8FD1AFFA92F532F53
%2F532F532F532F532F532F532F7752764C774CA17E857E855A2FA8FD05FF
%CAA1A176A17DA8FFFFA8FF5354537E535453A1C2C9FFAF5AA7C2C8C2C8C8
%FD18FFA877A177A1A1A19BA1A1FD1BFFA85A5453535A5354535A5354535A
%53542F7D777D77A17DA2CBFFA9857E8529A8FD06FF7E535353FD06FF7E29
%532F5376C2C2CFFFFFA8C2C1C8C2C8A0C8C9FD17FFCFC29FC8C2C999C2C1
%C2CAFD1BFF535453532F5353532F5353532F532F53A8FD09FF84857E5359
%FD05FFA92F847E54A8FD05FFA8532F7DA0C8C9FD05FFC2C8C2C8C2C8C2C9
%CAFD16FFCFC2C9C2C9C2C29FC8C2C9CAFD1BFF535A535453545353535453
%54535AA8FD0BFF85855353FD05FF5A2F2F5A2FA8FD06FF537C9FC9A8FD05
%FFCAC89FC29FC8A0C89FCAFD16FFA0C9C9C9A0C89FC29FC2A0C29FC9CAFD
%18FFA9FD045329532F53295329297EFD0CFFAF5A5A28FD04FFCA7D537E53
%537EFD06FFCAC2CFFD08FFCFC9C9C9C8C8C2C9CFFD15FFCAC8C2C8C2C9C2
%C2C1C8C2C2C1C8C1C9FD1AFFA853537E537E537E5A7E7DFD0EFFAF7E7EFD
%04FFCFA0C2A0C29FC9FD16FFC9CFFD17FFC99FC8C2C29FC89FC29FC29FC2
%9FC29FCFFD1AFFA8FD20FFCACFA8CFFD30FFCAFD06C9FFCACFCACFCACFCA
%CFFDB6FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164460, 2020/05/12-16:04:17        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:CreatorTool="Adobe Illustrator 24.2 (Windows)"
   xmp:CreateDate="2022-02-03T17:03:35+03:00"
   xmp:ModifyDate="2022-02-03T17:03:36+03:00"
   xmp:MetadataDate="2022-02-03T17:03:36+03:00"
   xmpMM:OriginalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
   xmpMM:DocumentID="xmp.did:43c343fc-7771-f34a-86b6-49578f172120"
   xmpMM:InstanceID="xmp.iid:43c343fc-7771-f34a-86b6-49578f172120"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Basic RGB"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">2202.w037.n003.175A.p1.175</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="188"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAvAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q+TvPn5sfnVf/AJr6&#xA;1ovl3V08vaVpMskFr6turwyi3bizl3gnLySUZgvSgoN+tOXMIC+blafSSymht77fRv5b+Yb3zB5H&#xA;0fVNQAXU5rZF1FFptcoOEuy0C8mHKnYHLIyEhYaJ45QNEUWSZJg7FXYq7FXYq7FXYq7FXYqlut+Y&#xA;9F0OATandJbK4Yxhju3HqFHc5Ey3oAk+QtnGF77AeaWeVPPNh5nurtNNtpvqdoFreyAKjO37AB+K&#xA;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"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:00ec6cfa-e7d2-8b41-a428-83469ec1543d"
    stRef:documentID="xmp.did:00ec6cfa-e7d2-8b41-a428-83469ec1543d"
    stRef:originalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:70f8aa99-76da-7d40-aa1a-1c7a0e09fb88"
      stEvt:when="2021-11-02T18:45:28+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:00ec6cfa-e7d2-8b41-a428-83469ec1543d"
      stEvt:when="2022-02-03T17:03:33+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:43c343fc-7771-f34a-86b6-49578f172120"
      stEvt:when="2022-02-03T17:03:36+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="612.071385"
    stDim:h="400.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                 
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -379.927 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 379.927 li
524.376 379.927 li
524.376 0 li
cp
clp
279.501 275.696 mo
279.501 275.696 284.475 275.033 285.953 280.182 cv
287.433 285.33 289.352 295.905 289.139 296.696 cv
288.925 297.487 283.38 298.553 283.38 298.553 cv
283.38 298.553 283.807 303.115 283.167 303.287 cv
282.528 303.458 277.037 304.546 277.037 304.546 cv
272.164 279.36 li
279.501 275.696 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.360784 .411765 .647059 rgb
f
272.694 261.555 mo
272.694 261.555 270.366 276.782 276.201 279.983 cv
278.443 281.212 282.276 278.366 282.853 277.112 cv
283.43 275.858 280.659 276.183 280.659 276.183 cv
280.659 276.183 281.893 273.785 281.814 270.912 cv
281.736 268.039 278.698 263.043 278.698 263.043 cv
272.694 261.555 li
cp
.956863 .517647 .384314 rgb
f
266.313 225.213 mo
266.313 225.213 278.98 226.736 285.028 241.197 cv
289.933 252.926 281.009 266.605 281.009 266.605 cv
271.275 262.42 li
264.758 238.1 li
266.313 225.213 li
cp
.407843 .713726 .847059 rgb
f
248.351 204.598 mo
248.351 204.598 239.58 203.006 236.802 210.87 cv
234.024 218.733 235.086 238.1 235.086 238.1 cv
249.602 238.1 li
249.602 238.1 247.155 209.607 249.612 207.488 cv
252.069 205.369 248.351 204.598 248.351 204.598 cv
cp
0 0 0 rgb
f
258.79 337.451 mo
260.921 362.521 li
275.898 361.878 li
275.898 335.745 li
258.79 337.451 li
cp
.956863 .517647 .384314 rgb
f
241.188 337.451 mo
242.488 361.264 li
257.337 360.663 li
258.79 334.246 li
241.188 337.451 li
cp
f
270.81 259.253 mo
270.81 259.253 277.818 278.766 279.491 299.779 cv
280.946 318.03 279.26 353.11 277.744 354.107 cv
273.898 356.639 260.244 355.351 260.244 355.351 cv
260.244 355.351 257.597 356.545 247.784 356.299 cv
240.662 356.12 237.375 354.493 237.375 354.493 cv
237.375 354.493 236.694 275.204 242.129 262.691 cv
246.382 252.899 270.81 259.253 270.81 259.253 cv
cp
.639216 .482353 .564706 rgb
f
272.033 264.357 mo
272.033 264.357 262.683 266.316 253.64 265.666 cv
244.598 265.017 241.218 263.43 241.218 263.43 cv
237.375 241.359 li
249.474 225.056 li
258.375 224.335 li
261.331 224.451 li
262.62 224.5 263.903 224.669 265.161 224.954 cv
266.313 225.213 li
272.033 264.357 li
cp
.407843 .713726 .847059 rgb
f
260.015 211.549 mo
260.015 211.549 264.399 209.685 264.736 213.078 cv
265.125 217.009 260.428 217.038 260.428 217.038 cv
260.015 211.549 li
cp
.956863 .517647 .384314 rgb
f
262.193 215.07 mo
262.152 215.07 262.111 215.059 262.073 215.037 cv
261.959 214.971 261.922 214.826 261.988 214.712 cv
263.452 212.208 li
263.52 212.095 263.665 212.06 263.778 212.123 cv
263.891 212.19 263.929 212.335 263.863 212.449 cv
262.398 214.953 li
262.354 215.028 262.274 215.07 262.193 215.07 cv
cp
0 0 0 rgb
f
263.894 214.321 mo
263.889 214.321 262.639 214.297 262.639 214.297 cv
262.508 214.294 262.404 214.187 262.407 214.055 cv
262.408 213.926 262.515 213.823 262.644 213.823 cv
262.649 213.823 263.899 213.846 263.899 213.846 cv
264.031 213.849 264.134 213.956 264.131 214.088 cv
264.129 214.217 264.023 214.321 263.894 214.321 cv
cp
f
252.075 220.034 mo
252.075 225.869 li
252.075 225.869 253.85 226.828 256.07 226.869 cv
259.067 226.923 260.312 225.415 260.312 225.415 cv
260.066 219.753 li
252.075 220.034 li
cp
.956863 .517647 .384314 rgb
f
252.102 220.801 mo
252.102 220.801 253.549 224.988 256.952 224.484 cv
259.696 224.078 260.312 220.015 260.312 220.015 cv
252.102 220.801 li
cp
0 0 0 rgb
f
261.427 208.173 mo
261.427 208.173 263.337 216.596 260.92 220.322 cv
258.328 224.317 254.466 222.939 252.908 221.739 cv
250.808 220.119 250.079 218.054 250.079 218.054 cv
250.079 218.054 247.188 218.625 246.228 216.267 cv
245.219 213.789 247.021 211.794 248.467 211.678 cv
249.913 211.562 250.081 211.826 250.081 211.826 cv
249.66 209.181 li
249.66 209.181 258.462 199.424 261.427 208.173 cv
cp
.956863 .517647 .384314 rgb
f
249.602 215.619 mo
249.548 215.619 249.492 215.6 249.447 215.561 cv
247.22 213.644 li
247.121 213.559 247.109 213.409 247.195 213.309 cv
247.281 213.211 247.43 213.199 247.53 213.285 cv
249.758 215.202 li
249.856 215.287 249.868 215.437 249.782 215.537 cv
249.735 215.59 249.669 215.619 249.602 215.619 cv
cp
0 0 0 rgb
f
247.542 215.968 mo
247.47 215.968 247.398 215.935 247.352 215.873 cv
247.273 215.768 247.295 215.62 247.399 215.541 cv
248.718 214.553 li
248.822 214.474 248.971 214.495 249.05 214.6 cv
249.129 214.705 249.107 214.854 249.003 214.932 cv
247.684 215.92 li
247.641 215.953 247.592 215.968 247.542 215.968 cv
cp
f
257.131 217.125 mo
257.086 217.125 257.04 217.113 257 217.086 cv
256.891 217.014 256.861 216.867 256.933 216.757 cv
257.795 215.449 256.991 213.454 256.982 213.435 cv
256.932 213.314 256.99 213.175 257.111 213.124 cv
257.235 213.078 257.37 213.132 257.422 213.253 cv
257.458 213.344 258.331 215.498 257.329 217.019 cv
257.283 217.088 257.208 217.125 257.131 217.125 cv
cp
f
260.175 210.669 mo
260.115 210.669 260.053 210.646 260.007 210.6 cv
259.57 210.161 258.709 210.104 258.701 210.104 cv
258.57 210.096 258.47 209.984 258.478 209.853 cv
258.486 209.723 258.568 209.631 258.728 209.629 cv
258.771 209.632 259.777 209.696 260.343 210.264 cv
260.436 210.358 260.436 210.507 260.343 210.6 cv
260.297 210.646 260.236 210.669 260.175 210.669 cv
cp
f
253.175 210.731 mo
253.119 210.731 253.063 210.711 253.018 210.672 cv
252.92 210.586 252.911 210.437 252.997 210.338 cv
253.526 209.737 254.527 209.61 254.569 209.604 cv
254.714 209.593 254.816 209.682 254.831 209.811 cv
254.848 209.94 254.755 210.058 254.625 210.075 cv
254.617 210.076 253.762 210.186 253.352 210.651 cv
253.305 210.704 253.24 210.731 253.175 210.731 cv
cp
f
255.102 218.683 mo
255.237 218.908 255.398 219.047 255.585 219.099 cv
255.808 219.16 256.039 219.095 256.231 219.008 cv
255.102 218.683 li
cp
255.764 219.597 mo
255.665 219.597 255.564 219.584 255.462 219.557 cv
255.009 219.434 254.672 219.041 254.456 218.389 cv
254.428 218.306 254.449 218.213 254.511 218.15 cv
254.57 218.086 254.659 218.062 254.747 218.086 cv
256.866 218.697 li
256.951 218.721 257.014 218.788 257.033 218.873 cv
257.052 218.958 257.023 219.046 256.957 219.104 cv
256.931 219.126 256.389 219.597 255.764 219.597 cv
cp
f
261.924 211.208 mo
261.924 211.208 260.663 209.228 259.648 207.831 cv
258.631 206.435 258.631 206.435 258.631 206.435 cv
258.631 206.435 257.718 209.768 255.448 211.155 cv
253.178 212.542 250.556 212.37 250.556 212.37 cv
250.627 214.397 li
250.627 214.397 249.909 211.746 249.473 211.699 cv
249.037 211.65 248.376 211.56 247.625 211.94 cv
246.868 212.322 246.707 212.703 246.707 212.703 cv
246.707 212.703 246.201 206.87 246.653 205.858 cv
247.105 204.846 249.937 199.368 258.323 201.937 cv
264.692 203.887 261.924 211.208 261.924 211.208 cv
cp
f
259.365 213.564 mo
259.24 213.564 259.135 213.466 259.127 213.34 cv
259.047 211.924 li
259.043 211.851 259.073 211.78 259.127 211.732 cv
259.849 211.1 li
259.949 211.015 260.098 211.024 260.185 211.122 cv
260.27 211.221 260.26 211.37 260.161 211.457 cv
259.527 212.013 li
259.602 213.313 li
259.61 213.444 259.509 213.556 259.378 213.564 cv
259.373 213.564 259.368 213.564 259.365 213.564 cv
cp
f
254.656 213.779 mo
254.531 213.779 254.427 213.681 254.419 213.555 cv
254.338 212.139 li
254.335 212.075 254.357 212.012 254.4 211.964 cv
255.073 211.234 li
255.162 211.138 255.313 211.132 255.408 211.22 cv
255.504 211.309 255.511 211.459 255.422 211.556 cv
254.818 212.212 li
254.893 213.528 li
254.9 213.659 254.8 213.771 254.669 213.779 cv
254.664 213.779 254.659 213.779 254.656 213.779 cv
cp
f
299.537 378.102 mo
299.897 378.061 300.144 377.712 300.088 377.337 cv
299.822 375.562 298.851 370.597 296.09 368.446 cv
292.699 365.801 285.51 364.635 282.921 362.867 cv
280.332 361.097 277.477 356.891 275.898 357.648 cv
274.319 358.405 271.303 361.96 267.053 361.365 cv
262.803 360.77 260.857 359.701 259.691 360.711 cv
258.525 361.722 257.599 376.155 258.074 377.024 cv
258.55 377.893 295.232 378.598 299.537 378.102 cv
cp
.937255 .643137 .34902 rgb
f
261.024 375.35 mo
261.024 376.854 260.518 378.575 259.484 379.008 cv
258.449 379.441 250.075 380.343 242.748 379.705 cv
235.734 379.092 235.829 379.345 235.311 378.707 cv
235.059 378.383 234.001 376.109 234.567 374.653 cv
234.603 374.58 234.627 374.496 234.663 374.424 cv
234.952 373.69 235.253 372.98 235.47 372.475 cv
235.686 371.994 235.95 371.537 236.263 371.091 cv
237.021 370.044 238.525 367.879 238.91 366.76 cv
239.415 365.268 240.185 362.044 240.703 360.528 cv
241.094 359.4 245.694 357.622 247.91 356.824 cv
248.678 356.546 249.503 356.48 250.306 356.627 cv
252.545 357.038 257.164 357.952 257.944 358.603 cv
258.966 359.457 259.484 366.556 259.484 367.626 cv
259.484 368.698 li
259.484 369.696 260.169 371.668 260.615 373.305 cv
260.735 373.714 260.831 374.099 260.903 374.448 cv
260.975 374.797 261.024 375.098 261.024 375.35 cv
cp
.968627 .701961 .411765 rgb
f
260.175 353.985 mo
260.038 353.984 259.931 353.874 259.932 353.74 cv
260.506 280.506 li
260.506 280.416 260.557 280.333 260.637 280.292 cv
267.192 276.896 li
267.312 276.835 267.458 276.881 267.52 276.999 cv
267.582 277.12 267.535 277.266 267.416 277.328 cv
260.991 280.657 li
260.418 353.744 li
260.418 353.877 260.31 353.985 260.175 353.985 cv
cp
1 1 1 rgb
f
278.274 365.752 mo
278.189 365.752 278.107 365.708 278.062 365.629 cv
277.995 365.513 278.036 365.364 278.154 365.297 cv
282.8 362.655 li
282.918 362.588 283.065 362.629 283.132 362.746 cv
283.199 362.863 283.158 363.012 283.04 363.079 cv
278.394 365.721 li
278.356 365.743 278.315 365.752 278.274 365.752 cv
cp
f
282.92 366.778 mo
282.836 366.778 282.754 366.735 282.709 366.657 cv
282.642 366.539 282.682 366.391 282.798 366.324 cv
286.416 364.235 li
286.533 364.166 286.682 364.206 286.749 364.324 cv
286.817 364.441 286.777 364.589 286.66 364.657 cv
283.043 366.746 li
283.003 366.768 282.962 366.778 282.92 366.778 cv
cp
f
252.967 365.733 mo
252.932 365.733 252.897 365.726 252.864 365.71 cv
250.269 364.51 244.97 365.714 244.917 365.727 cv
244.779 365.753 244.655 365.674 244.625 365.544 cv
244.595 365.413 244.677 365.283 244.807 365.252 cv
245.031 365.201 250.324 364 253.069 365.269 cv
253.191 365.326 253.244 365.47 253.187 365.592 cv
253.146 365.681 253.058 365.733 252.967 365.733 cv
cp
f
252.967 368.759 mo
252.932 368.759 252.897 368.752 252.864 368.737 cv
250.269 367.537 244.97 368.741 244.917 368.753 cv
244.779 368.783 244.655 368.701 244.625 368.571 cv
244.595 368.44 244.677 368.309 244.807 368.279 cv
245.031 368.227 250.324 367.027 253.069 368.295 cv
253.191 368.352 253.244 368.496 253.187 368.619 cv
253.146 368.707 253.058 368.759 252.967 368.759 cv
cp
f
272.702 265.137 mo
272.702 265.137 272.925 254.046 271.005 242.317 cv
269.086 230.587 265.161 224.954 265.161 224.954 cv
265.161 224.954 264.778 224.734 262.645 224.543 cv
261.075 224.404 260.312 224.402 260.312 224.402 cv
260.312 224.402 262.85 229.712 263.74 234.495 cv
264.521 238.691 265.141 242.636 265.141 242.636 cv
252.075 242.979 li
252.075 224.526 li
247.542 225.415 li
242.129 262.691 li
242.129 262.691 249.139 268.485 260.312 267.637 cv
271.486 266.788 272.702 265.137 272.702 265.137 cv
cp
.639216 .482353 .564706 rgb
f
279.928 277.619 mo
279.886 277.619 279.843 277.608 279.804 277.583 cv
279.693 277.516 279.658 277.37 279.726 277.257 cv
280.199 276.482 li
279.228 276.607 li
279.097 276.615 278.979 276.532 278.962 276.402 cv
278.946 276.272 279.037 276.153 279.168 276.136 cv
280.629 275.948 li
280.718 275.936 280.81 275.977 280.86 276.054 cv
280.908 276.13 280.909 276.229 280.862 276.307 cv
280.13 277.505 li
280.086 277.579 280.008 277.619 279.928 277.619 cv
cp
0 0 0 rgb
f
275.04 246.053 mo
274.989 246.053 274.935 246.065 274.877 246.087 cv
274.033 246.417 273.102 248.725 272.597 250.235 cv
273.773 249.129 275.511 247.292 275.437 246.414 cv
275.426 246.281 275.368 246.189 275.251 246.118 cv
275.18 246.075 275.112 246.053 275.04 246.053 cv
cp
272.097 251.258 mo
272.052 251.258 272.006 251.245 271.966 251.22 cv
271.875 251.162 271.833 251.051 271.863 250.948 cv
272.002 250.463 273.262 246.197 274.699 245.634 cv
274.977 245.526 275.253 245.55 275.503 245.702 cv
275.753 245.853 275.899 246.085 275.922 246.374 cv
276.048 247.878 272.645 250.864 272.256 251.2 cv
272.21 251.239 272.154 251.258 272.097 251.258 cv
cp
.25098 .313726 .498039 rgb
f
256.132 227.12 mo
253.897 227.12 252.05 226.133 251.959 226.083 cv
251.841 226.019 251.797 225.871 251.861 225.753 cv
251.925 225.635 252.072 225.59 252.191 225.656 cv
252.217 225.669 254.722 227.001 257.306 226.53 cv
259.487 226.129 260.43 225.248 260.439 225.24 cv
260.536 225.148 260.691 225.15 260.783 225.247 cv
260.876 225.344 260.873 225.497 260.777 225.59 cv
260.736 225.63 259.735 226.579 257.394 227.008 cv
256.966 227.087 256.543 227.12 256.132 227.12 cv
cp
f
260.608 245.31 mo
252.102 245.31 li
251.968 245.31 251.859 245.202 251.859 245.067 cv
251.859 244.932 251.968 244.824 252.102 244.824 cv
260.608 244.824 li
260.742 244.824 260.851 244.932 260.851 245.067 cv
260.851 245.202 260.742 245.31 260.608 245.31 cv
cp
1 1 1 rgb
f
246.707 212.703 mo
246.707 212.703 245.934 211.003 245.934 207.828 cv
245.934 203.09 249.705 201.38 252.612 201.092 cv
255.248 200.831 256.802 201.543 256.802 201.543 cv
256.802 201.543 253.106 202.679 250.835 205.807 cv
249.053 208.262 248.467 211.678 248.467 211.678 cv
248.467 211.678 247.625 211.94 246.707 212.703 cv
cp
.360784 .411765 .647059 rgb
f
255.047 201.923 mo
255.047 201.923 254.202 199.358 254.772 197.999 cv
255.341 196.641 257.723 193.84 258.019 194.026 cv
258.315 194.212 258.945 198.081 258.753 198.95 cv
258.562 199.818 255.047 201.923 255.047 201.923 cv
cp
f
255.079 201.604 mo
255.079 201.604 255.924 199.037 255.355 197.679 cv
254.785 196.321 252.404 193.52 252.108 193.706 cv
251.813 193.892 251.182 197.761 251.374 198.629 cv
251.566 199.497 255.079 201.604 255.079 201.604 cv
cp
f
256.789 197.825 mo
256.687 197.825 256.591 197.853 256.497 197.912 cv
255.903 198.278 255.566 199.636 255.418 200.55 cv
256.327 199.782 257.387 198.689 257.311 198.145 cv
257.304 198.098 257.286 197.973 257.043 197.877 cv
256.952 197.842 256.868 197.825 256.789 197.825 cv
cp
255.099 201.364 mo
255.06 201.364 255.018 201.354 254.981 201.333 cv
254.897 201.287 254.848 201.195 254.857 201.098 cv
254.884 200.8 255.156 198.166 256.241 197.497 cv
256.537 197.315 256.875 197.287 257.22 197.424 cv
257.641 197.589 257.764 197.87 257.793 198.078 cv
257.949 199.184 255.699 200.967 255.247 201.314 cv
255.203 201.347 255.152 201.364 255.099 201.364 cv
cp
.25098 .313726 .498039 rgb
f
283.61 289.144 mo
283.558 289.144 283.5 289.15 283.435 289.165 cv
282.927 289.282 282.949 292.368 283.451 296.147 cv
284.019 293.841 284.725 290.113 283.935 289.281 cv
283.875 289.218 283.781 289.144 283.61 289.144 cv
cp
283.38 297.613 mo
283.251 297.605 283.158 297.52 283.14 297.407 cv
282.752 294.888 281.997 288.996 283.326 288.691 cv
283.816 288.58 284.119 288.768 284.288 288.946 cv
285.593 290.32 283.821 296.712 283.615 297.436 cv
283.584 297.541 283.489 297.613 283.38 297.613 cv
cp
.968627 .701961 .411765 rgb
f
248.415 208.13 mo
248.395 208.13 248.376 208.128 248.356 208.123 cv
248.225 208.091 248.146 207.959 248.178 207.829 cv
248.217 207.676 249.135 204.079 251.997 203.114 cv
252.129 203.069 252.262 203.139 252.305 203.266 cv
252.348 203.394 252.28 203.532 252.153 203.575 cv
249.546 204.454 248.66 207.911 248.651 207.946 cv
248.624 208.056 248.524 208.13 248.415 208.13 cv
cp
.25098 .313726 .498039 rgb
f
272.401 248.287 mo
272.3 248.287 272.205 248.223 272.17 248.122 cv
271.168 245.2 li
271.124 245.073 271.192 244.934 271.319 244.89 cv
271.447 244.849 271.584 244.914 271.628 245.041 cv
272.631 247.964 li
272.674 248.091 272.607 248.23 272.481 248.274 cv
272.453 248.283 272.427 248.287 272.401 248.287 cv
cp
.968627 .701961 .411765 rgb
f
269.792 248.034 mo
267.805 247.211 li
267.442 247.061 267.27 246.645 267.42 246.283 cv
269.431 241.421 li
272.732 242.787 li
270.721 247.648 li
270.571 248.011 270.155 248.183 269.792 248.034 cv
cp
.482353 .623529 .839216 rgb
f
268.663 244.335 mo
276.017 247.376 li
276.357 247.517 276.746 247.356 276.887 247.016 cv
277.519 245.488 li
277.659 245.148 277.497 244.758 277.158 244.618 cv
269.804 241.576 li
269.464 241.435 269.074 241.597 268.934 241.937 cv
268.302 243.464 li
268.161 243.805 268.324 244.195 268.663 244.335 cv
cp
f
264.36 252.097 mo
267.042 247.715 li
267.194 247.455 267.512 247.347 267.788 247.461 cv
269.572 248.2 li
269.848 248.314 269.996 248.615 269.921 248.904 cv
268.179 255.576 li
264.36 252.097 li
cp
.211765 .270588 .419608 rgb
f
263.448 270.615 mo
258.617 268.617 li
257.764 268.263 257.385 267.263 257.79 266.432 cv
264.714 252.244 li
265.085 251.483 265.985 251.142 266.767 251.465 cv
269.796 252.718 li
270.578 253.042 270.974 253.918 270.699 254.72 cv
265.576 269.654 li
265.277 270.528 264.302 270.968 263.448 270.615 cv
cp
f
262.659 270.288 mo
257.829 268.29 li
256.976 267.937 256.596 266.937 257.001 266.106 cv
263.926 251.917 li
264.297 251.157 265.197 250.816 265.979 251.139 cv
269.008 252.393 li
269.79 252.716 270.186 253.593 269.911 254.394 cv
264.788 269.328 li
264.489 270.202 263.514 270.642 262.659 270.288 cv
cp
.25098 .313726 .498039 rgb
f
263.926 251.917 mo
266.514 247.496 li
266.664 247.237 266.983 247.128 267.259 247.243 cv
269.043 247.981 li
269.319 248.095 269.468 248.396 269.392 248.685 cv
267.651 255.357 li
263.926 251.917 li
cp
f
269.601 247.608 mo
267.614 246.786 li
267.25 246.635 267.078 246.22 267.228 245.857 cv
269.24 240.995 li
272.54 242.362 li
270.529 247.222 li
270.379 247.585 269.963 247.758 269.601 247.608 cv
cp
.678431 .796078 .968627 rgb
f
268.241 243.815 mo
275.817 246.948 li
276.161 247.09 276.556 246.926 276.699 246.581 cv
277.324 245.071 li
277.466 244.726 277.302 244.331 276.957 244.189 cv
269.383 241.055 li
269.038 240.912 268.644 241.077 268.5 241.421 cv
267.875 242.932 li
267.734 243.277 267.897 243.672 268.241 243.815 cv
cp
f
276.495 247.864 mo
276.087 247.695 275.893 247.227 276.062 246.819 cv
277.04 244.454 li
277.209 244.045 277.677 243.852 278.085 244.021 cv
278.493 244.19 278.687 244.657 278.519 245.065 cv
277.54 247.43 li
277.371 247.838 276.904 248.033 276.495 247.864 cv
cp
.968627 .701961 .411765 rgb
f
269.863 248.813 mo
266.861 247.572 li
266.627 247.475 266.516 247.207 266.613 246.974 cv
267.038 245.946 li
267.135 245.712 267.403 245.601 267.636 245.698 cv
270.637 246.94 li
270.871 247.036 270.982 247.304 270.885 247.537 cv
270.46 248.565 li
270.364 248.798 270.096 248.91 269.863 248.813 cv
cp
f
275.722 244.717 mo
275.691 244.717 275.659 244.711 275.629 244.699 cv
271.688 243.068 li
271.564 243.017 271.504 242.874 271.556 242.75 cv
271.608 242.626 271.751 242.566 271.873 242.619 cv
275.815 244.249 li
275.939 244.3 275.998 244.443 275.947 244.567 cv
275.908 244.661 275.818 244.717 275.722 244.717 cv
cp
1 1 1 rgb
f
269.444 247.293 mo
269.412 247.293 269.381 247.287 269.351 247.275 cv
267.651 246.572 li
267.527 246.521 267.468 246.378 267.519 246.254 cv
267.569 246.13 267.714 246.072 267.836 246.122 cv
269.536 246.826 li
269.66 246.876 269.72 247.019 269.668 247.143 cv
269.629 247.237 269.539 247.293 269.444 247.293 cv
cp
.929412 .576471 .227451 rgb
f
253.287 252.265 mo
254.583 250.338 257.074 249.683 259.283 248.968 cv
263.409 247.635 265.465 248.794 265.713 248.864 cv
264.36 251.496 li
264.36 251.496 275.399 252.53 275.396 254.556 cv
275.395 255.752 266.689 255.944 266.689 255.944 cv
266.689 255.944 267.352 260.634 265.722 262.713 cv
264.293 264.537 253.258 262.454 251.387 259.23 cv
250.326 257.401 251.806 254.464 253.287 252.265 cv
cp
.956863 .517647 .384314 rgb
f
264.283 251.565 mo
264.26 251.564 262.117 251.356 262.117 251.356 cv
261.987 251.343 261.891 251.227 261.904 251.097 cv
261.916 250.966 262.032 250.864 262.162 250.883 cv
264.305 251.091 li
264.436 251.104 264.532 251.22 264.519 251.35 cv
264.507 251.473 264.404 251.565 264.283 251.565 cv
cp
0 0 0 rgb
f
247.542 225.415 mo
247.542 225.415 237.98 226.192 231.498 237.287 cv
223.996 250.127 226.505 262.514 238.926 264.296 cv
249.223 265.773 255.099 263.852 255.099 263.852 cv
254.741 248.86 li
244.265 247.307 li
245.295 240.891 li
247.542 225.415 li
cp
.407843 .713726 .847059 rgb
f
248.415 248.165 mo
248.282 248.144 239.782 246.47 234.887 246.47 cv
234.752 246.47 234.643 246.362 234.643 246.227 cv
234.643 246.092 234.752 245.984 234.887 245.984 cv
239.83 245.984 248.377 247.666 248.462 247.683 cv
248.595 247.709 248.679 247.837 248.654 247.969 cv
248.631 248.085 248.529 248.165 248.415 248.165 cv
cp
.25098 .313726 .498039 rgb
f
236.541 243.223 mo
236.412 243.223 236.295 243.248 236.191 243.304 cv
236.066 243.371 236.068 243.417 236.069 243.433 cv
236.095 243.945 238.189 245.143 240.391 246.125 cv
239.185 244.74 237.529 243.223 236.541 243.223 cv
cp
241.219 246.989 mo
241.187 246.989 241.156 246.983 241.126 246.97 cv
239.84 246.44 235.64 244.62 235.583 243.456 cv
235.574 243.288 235.634 243.05 235.963 242.874 cv
237.71 241.936 241.037 246.117 241.411 246.596 cv
241.478 246.683 241.479 246.805 241.412 246.893 cv
241.365 246.954 241.293 246.989 241.219 246.989 cv
cp
f
260.074 10.6596 mo
260.074 10.6596 254.037 9.56631 252.848 7.22256 cv
251.659 4.87881 263.094 7.15029 263.094 7.15029 cv
260.074 10.6596 li
cp
f
216.06 24.0648 mo
216.06 24.0648 217.305 21.2587 222.211 21.5883 cv
227.116 21.9188 229.53 32.9931 229.53 32.9931 cv
224.108 39.9354 li
224.108 39.9354 210.613 33.9062 213.118 28.4418 cv
215.624 22.9774 216.06 24.0648 216.06 24.0648 cv
cp
.956863 .517647 .384314 rgb
f
249.75 157.659 mo
249.75 166.28 li
234.083 165.672 li
234.083 157.659 li
249.75 157.659 li
cp
.968627 .701961 .411765 rgb
f
285.925 156.688 mo
285.925 165.309 li
271.422 164.701 li
271.422 156.688 li
285.925 156.688 li
cp
f
251.337 63.7392 mo
251.337 63.7392 243.12 80.2064 236.42 109.901 cv
230.308 136.986 228.991 159.388 228.991 159.388 cv
255.426 159.388 li
255.426 159.388 258.366 137.304 259.15 128.566 cv
259.933 119.828 262.539 108.132 262.539 108.132 cv
262.539 108.132 266.167 158.535 267.033 159.388 cv
267.897 160.241 293.202 159.576 292.931 158.418 cv
292.66 157.261 284.934 73.6708 284.248 68.1601 cv
282.142 51.2187 251.337 63.7392 251.337 63.7392 cv
cp
.639216 .482353 .564706 rgb
f
267.823 178.065 mo
267.823 179.587 268.316 181.327 269.326 181.766 cv
270.337 182.204 278.515 183.116 285.67 182.471 cv
292.521 181.85 293.943 181.327 294.448 180.682 cv
294.695 180.353 294.213 178.832 293.66 177.359 cv
293.625 177.287 293.602 177.201 293.567 177.128 cv
293.284 176.386 292.991 175.668 292.78 175.157 cv
292.568 174.67 292.309 174.207 292.004 173.757 cv
291.264 172.698 289.795 170.507 289.419 169.375 cv
288.925 167.866 288.173 164.604 287.668 163.071 cv
287.162 161.561 285.929 161.245 285.929 161.245 cv
285.929 161.245 271.841 160.247 270.83 161.123 cv
269.831 161.988 269.326 169.168 269.326 170.252 cv
269.326 171.335 li
269.326 172.345 268.657 174.341 268.222 175.996 cv
268.104 176.41 268.01 176.8 267.94 177.153 cv
267.869 177.505 267.823 177.81 267.823 178.065 cv
cp
.572549 .705882 .917647 rgb
f
208.872 181.169 mo
209.812 181.571 249.798 182.703 250.726 181.169 cv
251.008 180.706 251.208 179.137 251.337 177.165 cv
251.666 172.516 251.666 165.602 251.666 165.602 cv
251.666 165.602 251.96 163.241 251.901 162.146 cv
251.854 161.062 232.619 161.476 232.619 161.476 cv
220.117 171.688 li
220.117 171.688 216.686 171.055 212.938 171.688 cv
210.952 172.016 209.672 174.536 209.037 176.909 cv
208.473 179.015 208.426 180.974 208.872 181.169 cv
cp
f
262.539 108.375 mo
262.413 108.375 262.307 108.278 262.297 108.15 cv
262.288 108.041 261.464 97.1825 261.224 92.3671 cv
261.019 88.2484 260.983 85.9628 260.976 85.371 cv
252.553 81.4862 li
252.43 81.4301 252.377 81.2855 252.433 81.1635 cv
252.49 81.0419 252.637 80.9882 252.756 81.0448 cv
261.32 84.994 li
261.406 85.0336 261.461 85.1195 261.461 85.2138 cv
261.461 85.2367 261.472 87.5375 261.71 92.3427 cv
261.949 97.1522 262.774 108.004 262.782 108.113 cv
262.793 108.247 262.692 108.364 262.558 108.374 cv
262.551 108.375 262.545 108.375 262.539 108.375 cv
cp
.968627 .701961 .411765 rgb
f
285.565 168.723 mo
285.543 168.723 285.522 168.72 285.499 168.714 cv
285.445 168.699 279.937 167.182 277.176 167.676 cv
274.324 168.183 li
274.211 168.2 274.11 168.147 274.062 168.049 cv
274.014 167.951 274.037 167.833 274.119 167.761 cv
274.328 167.577 279.277 163.256 282.235 164.564 cv
282.357 164.619 282.411 164.762 282.358 164.885 cv
282.304 165.008 282.158 165.066 282.036 165.009 cv
279.981 164.097 276.624 166.405 275.161 167.539 cv
277.09 167.196 li
279.968 166.684 285.4 168.181 285.63 168.245 cv
285.759 168.281 285.835 168.415 285.799 168.544 cv
285.769 168.652 285.672 168.723 285.565 168.723 cv
cp
1 1 1 rgb
f
223.115 169.482 mo
222.992 169.482 222.887 169.39 222.873 169.265 cv
222.859 169.131 222.956 169.012 223.09 168.997 cv
229.766 168.285 li
227.566 165.604 li
227.481 165.5 227.497 165.347 227.6 165.262 cv
227.704 165.177 227.856 165.191 227.943 165.295 cv
230.428 168.325 li
230.485 168.394 230.499 168.489 230.466 168.572 cv
230.431 168.654 230.354 168.712 230.265 168.721 cv
223.14 169.481 li
223.132 169.482 223.124 169.482 223.115 169.482 cv
cp
f
260.552 24.224 mo
260.552 24.224 259.57 24.4506 259.329 24.8124 cv
259.09 25.1737 259.127 26.6269 259.127 26.6269 cv
251.613 45.4179 li
250.137 66.3466 li
250.137 66.3466 254.016 70.6635 266.172 71.2367 cv
278.328 71.8095 284.783 66.225 284.783 66.225 cv
284.783 66.225 279.831 32.2025 276.842 27.7514 cv
275.514 25.7743 269.884 25.266 269.884 25.266 cv
269.884 25.266 269.705 24.5546 269.497 24.4286 cv
268.384 23.7548 260.552 24.224 260.552 24.224 cv
cp
.968627 .701961 .411765 rgb
f
260.214 12.4701 mo
260.214 12.4701 255.758 10.7479 255.534 14.1601 cv
255.275 18.1132 259.985 17.9862 259.985 17.9862 cv
260.214 12.4701 li
cp
.956863 .517647 .384314 rgb
f
258.141 16.0712 mo
258.063 16.0712 257.986 16.0321 257.94 15.9603 cv
256.387 13.4989 li
256.318 13.3881 256.351 13.2416 256.461 13.1718 cv
256.574 13.1024 256.718 13.1337 256.789 13.246 cv
258.343 15.7074 li
258.411 15.8183 258.378 15.9647 258.268 16.0346 cv
258.228 16.0595 258.185 16.0712 258.141 16.0712 cv
cp
0 0 0 rgb
f
256.41 15.3769 mo
256.284 15.3769 256.18 15.2787 256.173 15.1518 cv
256.166 15.0209 256.267 14.9091 256.399 14.9027 cv
257.651 14.8383 li
257.778 14.8261 257.893 14.932 257.9 15.0629 cv
257.907 15.1937 257.806 15.3056 257.674 15.3119 cv
256.422 15.3764 li
256.418 15.3769 256.414 15.3769 256.41 15.3769 cv
cp
f
268.456 21.5624 mo
268.654 26.1723 li
268.654 26.1723 266.907 27.1923 264.683 27.3075 cv
261.68 27.4628 260.605 25.7157 260.605 25.7157 cv
260.44 20.309 li
268.456 21.5624 li
cp
.956863 .517647 .384314 rgb
f
268.456 21.5556 mo
268.456 21.5556 267.146 25.3378 263.718 24.9467 cv
260.954 24.6312 260.033 20.7602 260.033 20.7602 cv
268.456 21.5556 li
cp
0 0 0 rgb
f
258.688 8.74648 mo
258.688 8.74648 257.054 17.2533 259.601 20.9071 cv
262.332 24.8256 266.466 23.4838 267.987 22.2284 cv
270.038 20.5346 270.392 18.2714 270.392 18.2714 cv
270.392 18.2714 273.31 18.7479 274.194 16.3515 cv
275.122 13.8344 273.248 11.8944 271.795 11.8266 cv
270.342 11.7587 270.182 12.0282 270.182 12.0282 cv
270.516 9.36318 li
270.516 9.36318 261.366 -.122658 258.688 8.74648 cv
cp
.956863 .517647 .384314 rgb
f
270.781 15.8134 mo
270.716 15.8134 270.653 15.7875 270.606 15.7367 cv
270.517 15.64 270.524 15.4901 270.619 15.4013 cv
272.789 13.4061 li
272.887 13.3168 273.036 13.3241 273.125 13.4203 cv
273.214 13.517 273.207 13.6669 273.112 13.7558 cv
270.942 15.7509 li
270.896 15.7929 270.838 15.8134 270.781 15.8134 cv
cp
0 0 0 rgb
f
272.858 16.0951 mo
272.811 16.0951 272.764 16.0814 272.722 16.0521 cv
271.368 15.1054 li
271.261 15.0302 271.235 14.8822 271.31 14.7748 cv
271.385 14.6674 271.534 14.6405 271.64 14.7167 cv
272.993 15.6635 li
273.101 15.7387 273.127 15.8866 273.052 15.994 cv
273.006 16.06 272.932 16.0951 272.858 16.0951 cv
cp
f
266.341 13.6332 mo
266.204 13.6303 266.101 13.5214 266.104 13.39 cv
266.139 11.9677 li
266.141 11.8368 266.244 11.7411 266.381 11.7362 cv
266.512 11.7392 266.616 11.848 266.613 11.9794 cv
266.578 13.4018 li
266.576 13.5307 266.47 13.6332 266.341 13.6332 cv
cp
f
261.222 13.7719 mo
261.084 13.7689 260.981 13.6601 260.985 13.5292 cv
261.017 12.1063 li
261.02 11.975 261.108 11.872 261.26 11.8744 cv
261.391 11.8773 261.494 11.9862 261.491 12.1171 cv
261.458 13.5399 li
261.455 13.6693 261.35 13.7719 261.222 13.7719 cv
cp
f
263.534 17.2035 mo
263.426 17.2035 263.328 17.1298 263.303 17.0204 cv
262.785 14.8021 263.435 12.9657 263.462 12.8891 cv
263.507 12.7665 263.643 12.7025 263.766 12.7465 cv
263.89 12.7909 263.953 12.9267 263.909 13.0502 cv
263.903 13.0678 263.281 14.8368 263.766 16.912 cv
263.795 17.0399 263.716 17.1674 263.588 17.1972 cv
263.571 17.2016 263.552 17.2035 263.534 17.2035 cv
cp
f
260.018 10.8969 mo
259.96 10.8969 259.902 10.8759 259.856 10.8334 cv
259.76 10.744 259.755 10.5941 259.844 10.4979 cv
260.392 9.90908 261.399 9.81094 261.442 9.80703 cv
261.567 9.79775 261.687 9.8915 261.699 10.0214 cv
261.711 10.1518 261.616 10.2675 261.485 10.2797 cv
261.477 10.2807 260.615 10.3661 260.192 10.8212 cv
260.145 10.8715 260.081 10.8969 260.018 10.8969 cv
cp
f
267.036 11.0355 mo
266.973 11.0355 266.909 11.0106 266.864 10.9603 cv
266.439 10.5072 265.576 10.4252 265.568 10.4242 cv
265.437 10.4125 265.34 10.2973 265.352 10.1669 cv
265.364 10.0365 265.477 9.93349 265.61 9.95156 cv
265.652 9.95498 266.659 10.0492 267.209 10.6361 cv
267.299 10.7318 267.294 10.8817 267.199 10.9716 cv
267.153 11.0145 267.095 11.0355 267.036 11.0355 cv
cp
f
270.851 12.0194 mo
270.851 12.0194 270.031 14.6532 269.69 14.559 cv
269.349 14.4647 269.775 10.3402 270.749 10.1405 cv
271.724 9.94082 270.851 12.0194 270.851 12.0194 cv
cp
f
270.425 11.6483 mo
270.425 11.6483 267.507 11.3607 265.571 9.81679 cv
263.935 8.51308 263.322 6.67666 263.322 6.67666 cv
263.322 6.67666 262.068 6.49697 260.261 7.57314 cv
258.453 8.64883 258.263 12.0487 258.263 12.0487 cv
258.263 12.0487 256.716 7.92519 258.323 5.9081 cv
259.928 3.89101 260.805 3.93349 260.805 3.93349 cv
260.805 3.93349 260.404 .157127 265.6 1.69228 cv
270.796 3.22695 271.922 7.74892 271.922 7.74892 cv
271.922 7.74892 273.207 7.32998 273.448 8.97744 cv
273.876 11.912 273.402 12.5922 273.402 12.5922 cv
273.402 12.5922 272.638 11.8456 271.441 12.2694 cv
270.243 12.6933 270.243 12.6933 270.243 12.6933 cv
270.425 11.6483 li
cp
f
260.552 24.224 mo
260.552 24.224 261.477 25.3197 263.861 25.6459 cv
266.244 25.9726 268.557 24.2748 268.557 24.2748 cv
269.782 27.2733 li
265.713 29.1728 li
259.39 27.9237 li
259.709 25.0619 li
260.552 24.224 li
cp
.968627 .701961 .411765 rgb
f
264.916 19.4286 mo
264.848 19.4286 264.785 19.4232 264.731 19.4145 cv
264.6 19.3939 264.512 19.2724 264.533 19.1425 cv
264.553 19.0141 264.664 18.9311 264.803 18.9452 cv
264.899 18.9599 265.743 19.0478 266.014 17.912 cv
266.043 17.7851 266.168 17.7025 266.298 17.7357 cv
266.426 17.766 266.504 17.8939 266.475 18.0214 cv
266.208 19.1444 265.422 19.4286 264.916 19.4286 cv
cp
0 0 0 rgb
f
228.991 29.6659 mo
220.587 41.9691 li
220.587 41.9691 228.297 55.3612 242.309 55.0175 cv
259.235 54.6029 261.402 38.3549 261.402 38.3549 cv
260.002 26.6269 li
260.002 26.6269 255.356 27.036 251.574 30.102 cv
248.893 32.2758 237.208 35.7724 228.991 29.6659 cv
cp
.968627 .701961 .411765 rgb
f
242.295 33.9828 mo
241.988 35.2631 241.668 37.1391 242.077 37.8695 cv
242.152 38.0058 242.249 38.0873 242.371 38.1195 cv
242.474 38.1469 242.515 38.12 242.545 38.0917 cv
242.932 37.705 242.67 35.6923 242.295 33.9828 cv
cp
242.451 38.6181 mo
242.388 38.6181 242.32 38.6098 242.246 38.5902 cv
241.994 38.5233 241.794 38.3607 241.652 38.1068 cv
240.929 36.8144 241.956 33.3173 242.076 32.9228 cv
242.106 32.8178 242.193 32.745 242.313 32.7499 cv
242.422 32.7519 242.516 32.8261 242.544 32.9315 cv
242.746 33.7064 243.714 37.6127 242.888 38.4364 cv
242.799 38.5258 242.656 38.6181 242.451 38.6181 cv
cp
1 1 1 rgb
f
250.719 53.0927 mo
250.567 53.0829 250.467 52.9662 250.476 52.8324 cv
250.844 47.6542 li
250.852 47.5194 250.967 47.414 251.103 47.4286 cv
251.237 47.4384 251.338 47.5546 251.328 47.6884 cv
250.961 52.8666 li
250.952 52.995 250.845 53.0927 250.719 53.0927 cv
cp
f
249.536 67.7328 mo
249.536 67.7328 250.042 48.4618 251.855 39.9354 cv
253.667 31.4091 254.712 28.162 254.712 28.162 cv
254.712 28.162 256.995 27.2548 257.662 27.0868 cv
258.33 26.9184 259.459 26.6986 259.459 26.6986 cv
259.459 26.6986 257.971 35.3012 257.366 40.2592 cv
256.76 45.2177 256.41 49.7768 256.41 49.7768 cv
267.823 49.7768 li
267.823 49.7768 268.329 40.5502 268.654 36.3495 cv
269.016 31.6454 269.884 25.266 269.884 25.266 cv
269.884 25.266 270.85 25.3124 272.181 25.6171 cv
273.513 25.9218 274.723 26.2538 274.723 26.2538 cv
274.723 26.2538 272.253 47.4726 276.289 52.8495 cv
280.325 58.227 284.004 55.4545 284.004 55.4545 cv
281.338 72.8891 li
255.107 73.9022 li
249.536 67.7328 li
cp
.639216 .482353 .564706 rgb
f
282.637 81.8451 mo
282.587 81.8451 282.537 81.8305 282.494 81.7992 cv
277.935 78.5062 276.076 72.7611 276.058 72.7035 cv
276.017 72.5756 276.088 72.4389 276.216 72.3983 cv
276.344 72.3573 276.481 72.4286 276.521 72.5565 cv
276.539 72.6127 278.353 78.2084 282.781 81.4047 cv
282.889 81.4833 282.913 81.6356 282.834 81.7445 cv
282.786 81.8104 282.712 81.8451 282.637 81.8451 cv
cp
.968627 .701961 .411765 rgb
f
263.514 52.4525 mo
263.504 52.4525 253.12 52.0297 253.12 52.0297 cv
252.985 52.0243 252.881 51.911 252.887 51.7768 cv
252.892 51.643 253.01 51.5492 253.139 51.5434 cv
263.524 51.9662 li
263.658 51.9716 263.764 52.0849 263.757 52.2191 cv
263.751 52.35 263.644 52.4525 263.514 52.4525 cv
cp
f
263.286 29.1186 mo
260.304 29.1186 258.93 26.7738 258.915 26.7475 cv
258.849 26.6308 258.889 26.4823 259.005 26.4159 cv
259.122 26.3495 259.271 26.3886 259.337 26.5062 cv
259.4 26.6151 260.918 29.1718 264.339 28.5312 cv
264.478 28.5028 264.599 28.5937 264.623 28.726 cv
264.648 28.8578 264.561 28.9848 264.429 29.0097 cv
264.025 29.0849 263.644 29.1186 263.286 29.1186 cv
cp
1 1 1 rgb
f
257.928 6.31142 mo
257.928 6.31142 259.364 -.997658 267.212 .115135 cv
275.025 1.22304 273.847 10.6088 273.847 10.6088 cv
270.164 9.93008 li
257.928 6.31142 li
cp
.360784 .411765 .647059 rgb
f
255.617 6.17178 mo
255.617 6.17178 258.342 5.91152 265.757 8.22109 cv
268.313 9.01699 270.586 10.0414 270.586 10.0414 cv
270.586 10.0414 262.097 7.7289 258.976 8.18105 cv
257.778 8.35439 257.06 8.90664 257.06 8.90664 cv
255.617 6.17178 li
cp
.25098 .313726 .498039 rgb
f
293.528 119.274 mo
270.97 119.274 li
270.676 119.274 270.43 119.05 270.404 118.757 cv
267.855 90.4628 li
267.825 90.1303 268.087 89.8437 268.421 89.8437 cv
296.076 89.8437 li
296.41 89.8437 296.672 90.1303 296.643 90.4628 cv
294.094 118.757 li
294.068 119.05 293.822 119.274 293.528 119.274 cv
cp
.462745 .611765 .827451 rgb
f
291.201 119.274 mo
268.644 119.274 li
268.35 119.274 268.104 119.05 268.077 118.757 cv
265.529 90.4628 li
265.499 90.1303 265.761 89.8437 266.095 89.8437 cv
293.75 89.8437 li
294.084 89.8437 294.346 90.1303 294.317 90.4628 cv
291.768 118.757 li
291.741 119.05 291.495 119.274 291.201 119.274 cv
cp
.572549 .705882 .917647 rgb
f
270.595 92.1181 mo
270.257 92.1181 269.974 91.8524 269.957 91.5106 cv
269.939 91.1522 269.565 82.6806 273.979 78.3837 cv
275.824 76.5883 278.226 75.7919 281.128 76.0175 cv
292.881 76.9311 292.46 91.3573 292.455 91.5033 cv
292.442 91.8554 292.194 92.1444 291.791 92.1176 cv
291.439 92.1044 291.163 91.807 291.176 91.454 cv
291.197 90.9096 291.553 78.1112 281.029 77.2929 cv
278.521 77.0971 276.444 77.7719 274.874 79.2987 cv
270.873 83.1884 271.231 91.3642 271.235 91.4462 cv
271.252 91.7992 270.981 92.0995 270.628 92.1171 cv
270.617 92.1176 270.606 92.1181 270.595 92.1181 cv
cp
.25098 .313726 .498039 rgb
f
282.638 69.4228 mo
282.638 69.4228 274.914 69.9662 274.116 77.7675 cv
276.16 77.0399 li
276.16 77.0399 272.823 82.5233 273.368 84.2187 cv
274.026 86.2592 275.905 84.6361 275.905 84.6361 cv
275.905 84.6361 275.695 87.0629 276.74 87.3529 cv
278.128 87.7377 279.118 86.0814 279.118 86.0814 cv
279.118 86.0814 278.658 89.1239 281.206 88.4306 cv
283.755 87.7377 292.351 77.5536 289.002 71.9867 cv
287.349 69.2372 282.638 69.4228 282.638 69.4228 cv
cp
.956863 .517647 .384314 rgb
f
275.904 84.8734 mo
275.863 84.8734 275.821 84.8627 275.783 84.8407 cv
275.67 84.7743 275.632 84.6288 275.699 84.5155 cv
277.923 80.7401 li
277.99 80.6269 278.139 80.5912 278.247 80.6562 cv
278.361 80.7226 278.399 80.8681 278.331 80.9813 cv
276.108 84.7567 li
276.064 84.8319 275.985 84.8734 275.904 84.8734 cv
cp
0 0 0 rgb
f
279.117 86.3187 mo
279.077 86.3187 279.037 86.309 279.001 86.288 cv
278.887 86.224 278.847 86.079 278.91 85.9647 cv
280.774 82.6591 li
280.84 82.5453 280.988 82.5058 281.097 82.5692 cv
281.211 82.6332 281.252 82.7782 281.188 82.8925 cv
279.324 86.1981 li
279.281 86.2753 279.201 86.3187 279.117 86.3187 cv
cp
f
276.374 76.851 mo
276.343 76.851 276.312 76.8451 276.283 76.8324 cv
276.161 76.7816 276.106 76.642 276.156 76.5214 cv
277.111 74.2572 li
277.161 74.1356 277.305 74.081 277.422 74.1308 cv
277.543 74.1815 277.599 74.3212 277.548 74.4418 cv
276.593 76.706 li
276.555 76.7968 276.468 76.851 276.374 76.851 cv
cp
f
275.025 26.4564 mo
275.025 26.4564 292.03 29.6659 298.254 45.5565 cv
304.779 62.2143 291.176 77.1161 291.176 77.1161 cv
276.136 70.2592 li
282.152 56.1337 li
279.686 54.6015 li
275.025 26.4564 li
cp
.968627 .701961 .411765 rgb
f
284.419 50.1825 mo
283.715 50.1825 283.056 52.4027 282.692 54.4545 cv
283.832 52.5546 284.737 50.6459 284.514 50.2172 cv
284.506 50.203 284.497 50.1854 284.432 50.183 cv
284.428 50.183 284.423 50.1825 284.419 50.1825 cv
cp
282.274 55.8295 mo
282.245 55.8295 282.218 55.8246 282.191 55.8148 cv
282.083 55.7758 282.018 55.6684 282.033 55.5561 cv
282.158 54.5668 282.83 49.6435 284.449 49.6967 cv
284.674 49.705 284.85 49.81 284.945 49.9926 cv
285.469 50.9989 282.982 54.9389 282.478 55.7182 cv
282.432 55.7895 282.356 55.8295 282.274 55.8295 cv
cp
1 1 1 rgb
f
221.802 9.09902 mo
221.61 10.9032 li
221.585 11.102 221.452 11.2636 221.265 11.3295 cv
206.74 16.4457 li
206.553 16.5116 206.348 16.4687 206.204 16.3295 cv
204.924 15.0438 li
204.652 14.7733 204.758 14.3222 205.114 14.1967 cv
207.395 13.3935 li
208.697 14.8002 li
208.113 13.1405 li
215.457 10.5536 li
215.988 12.0624 li
216.084 10.3329 li
221.123 8.55801 li
221.479 8.43252 221.844 8.71767 221.802 9.09902 cv
cp
.937255 .643137 .34902 rgb
f
221.345 9.26015 mo
221.153 11.0639 li
221.128 11.2626 220.995 11.4247 220.808 11.4906 cv
206.283 16.6068 li
206.095 16.6728 205.89 16.6298 205.746 16.4906 cv
204.466 15.205 li
204.195 14.9345 204.3 14.4833 204.656 14.3578 cv
206.937 13.5546 li
208.24 14.9613 li
207.656 13.3017 li
214.999 10.7147 li
215.531 12.2235 li
215.627 10.494 li
220.666 8.71914 li
221.022 8.59365 221.387 8.87881 221.345 9.26015 cv
cp
.968627 .701961 .411765 rgb
f
206.347 16.6815 mo
215.74 20.1039 li
215.891 20.1586 216.059 20.1044 216.15 19.9721 cv
222.219 11.1039 li
222.41 10.8236 222.133 10.4613 221.812 10.5741 cv
206.351 16.0199 li
206.04 16.1293 206.037 16.5687 206.347 16.6815 cv
cp
.25098 .313726 .498039 rgb
f
221.767 37.1503 mo
221.137 37.3725 220.448 37.0414 220.226 36.412 cv
213.296 16.7392 li
213.074 16.1093 213.405 15.4193 214.035 15.1977 cv
214.664 14.976 215.354 15.3065 215.576 15.9359 cv
222.506 35.6093 li
222.727 36.2387 222.397 36.9286 221.767 37.1503 cv
cp
f
221.264 37.3275 mo
220.635 37.5492 219.945 37.2187 219.723 36.5893 cv
212.793 16.9164 li
212.572 16.2865 212.902 15.5966 213.532 15.3749 cv
214.161 15.1532 214.851 15.4838 215.073 16.1132 cv
222.003 35.786 li
222.224 36.4159 221.894 37.1059 221.264 37.3275 cv
cp
.360784 .411765 .647059 rgb
f
205.666 16.9213 mo
215.059 20.3437 li
215.209 20.3988 215.378 20.3446 215.469 20.2123 cv
221.537 11.3441 li
221.729 11.0634 221.451 10.7011 221.131 10.8144 cv
205.669 16.2602 li
205.358 16.3695 205.356 16.8085 205.666 16.9213 cv
cp
f
212.767 18.2621 mo
212.741 18.2621 212.714 18.2577 212.687 18.2484 cv
208.65 16.8437 li
208.523 16.7992 208.456 16.6605 208.5 16.5336 cv
208.545 16.4066 208.683 16.3407 208.81 16.3837 cv
212.847 17.7885 li
212.974 17.8329 213.041 17.9716 212.997 18.0985 cv
212.962 18.1991 212.868 18.2621 212.767 18.2621 cv
cp
1 1 1 rgb
f
224.85 34.1586 mo
224.8 34.1586 224.749 34.1425 224.706 34.1098 cv
221.645 31.766 222.181 27.7777 222.205 27.6093 cv
222.224 27.4794 222.345 27.3891 222.473 27.4081 cv
222.603 27.4267 222.694 27.5468 222.676 27.6767 cv
222.67 27.7152 222.158 31.5609 224.995 33.7328 cv
225.098 33.8124 225.119 33.9613 225.039 34.0658 cv
224.992 34.1269 224.922 34.1586 224.85 34.1586 cv
cp
0 0 0 rgb
f
212.717 33.1117 mo
213.219 33.4813 213.818 33.6884 214.433 33.7846 cv
216.517 34.1103 222.514 33.9887 223.302 31.9022 cv
224.055 29.9032 220.721 29.8676 220.721 29.8676 cv
220.721 29.8676 223.414 29.3593 222.44 27.643 cv
221.626 26.2104 219.873 26.4564 219.873 26.4564 cv
219.873 26.4564 222.623 25.6596 220.674 23.9867 cv
218.724 22.3139 212.558 22.9711 210.654 23.9667 cv
208.749 24.9623 211.346 26.8339 211.346 26.8339 cv
211.346 26.8339 209.434 28.1776 209.992 29.328 cv
210.582 30.5458 212.439 30.2182 212.439 30.2182 cv
212.439 30.2182 210.912 31.7816 212.717 33.1117 cv
cp
.956863 .517647 .384314 rgb
f
213.118 30.3085 mo
212.99 30.3085 212.885 30.2064 212.881 30.0775 cv
212.878 29.9467 212.981 29.8373 213.112 29.8339 cv
220.715 29.6303 li
220.849 29.6303 220.955 29.7323 220.959 29.8612 cv
220.963 29.9921 220.859 30.1015 220.728 30.1049 cv
213.125 30.3085 li
213.123 30.3085 213.12 30.3085 213.118 30.3085 cv
cp
0 0 0 rgb
f
212.247 26.9916 mo
212.12 26.9916 212.015 26.8915 212.01 26.7636 cv
212.005 26.6327 212.107 26.5224 212.238 26.517 cv
219.865 26.2191 li
219.993 26.2128 220.106 26.3158 220.111 26.4472 cv
220.116 26.578 220.014 26.6884 219.883 26.6937 cv
212.257 26.9916 li
212.254 26.9916 212.25 26.9916 212.247 26.9916 cv
cp
f
270.586 113.084 mo
270.459 113.084 270.353 112.986 270.343 112.857 cv
269.258 97.0756 li
269.249 96.9418 269.351 96.8256 269.485 96.8163 cv
269.634 96.7919 269.735 96.9091 269.744 97.0424 cv
270.829 112.824 li
270.838 112.958 270.737 113.074 270.603 113.083 cv
270.597 113.084 270.591 113.084 270.586 113.084 cv
cp
1 1 1 rgb
f
421.164 178.771 mo
395.781 164.48 li
397.494 161.436 li
394.739 163.893 li
391.026 161.803 li
396.469 156.842 li
422.582 171.544 li
421.164 178.771 li
cp
.937255 .643137 .34902 rgb
f
395.781 164.48 mo
397.494 161.436 li
394.739 163.893 li
389.074 160.704 li
394.517 155.744 li
420.631 170.446 li
419.213 177.673 li
395.781 164.48 li
cp
.968627 .701961 .411765 rgb
f
479.19 156.175 mo
478.241 152.321 li
463.564 152.321 li
463.564 160.736 li
479.19 156.175 li
cp
.956863 .517647 .384314 rgb
f
517.631 156.175 mo
514.931 150.791 li
499.69 152.321 li
502.005 160.736 li
517.631 156.175 li
cp
f
447.334 77.4135 mo
447.334 77.4135 444.475 81.7323 443.737 84.4877 cv
442.998 87.2426 444.781 89.0165 444.781 89.0165 cv
444.781 89.0165 444.492 87.1684 444.836 90.3222 cv
445.18 93.476 452.059 96.3979 452.886 95.8388 cv
453.712 95.2802 452.481 93.7025 452.481 93.7025 cv
452.481 93.7025 455.165 94.4013 455.241 92.9784 cv
455.317 91.5561 453.721 89.8461 453.721 89.8461 cv
453.721 89.8461 455.858 92.057 456.694 89.8866 cv
457.53 87.7167 458.17 87.2611 458.17 87.2611 cv
458.17 87.2611 462.018 82.4403 457.16 75.7157 cv
452.303 68.9906 447.334 77.4135 447.334 77.4135 cv
cp
f
453.586 35.5805 mo
453.586 35.5805 448.971 49.4271 447.334 62.432 cv
445.698 75.4374 446.028 78.3061 446.028 78.3061 cv
460.47 83.8524 li
464.341 71.3275 li
453.586 35.5805 li
cp
.407843 .713726 .847059 rgb
f
488 55.6107 mo
488.92 54.8461 477.363 29.4276 473.622 28.6117 cv
468.734 27.5448 455.532 31.1122 452.973 36.6039 cv
450.414 42.0956 463.905 76.266 463.905 76.266 cv
489.859 68.3612 li
488 55.6107 li
cp
f
489.859 61.476 mo
489.859 61.476 495.615 67.4047 498.866 79.6449 cv
502.116 91.8852 502.308 109.48 502.882 111.202 cv
503.455 112.923 521.344 148.742 520.961 149.507 cv
520.578 150.272 497.508 158.237 496.361 158.237 cv
495.213 158.237 481.398 126.693 480.377 122.868 cv
479.358 119.043 479.358 119.043 479.358 119.043 cv
482.8 154.808 li
482.8 154.808 457.792 155.572 457.482 154.808 cv
457.172 154.042 451.222 123.059 451.806 114.07 cv
452.391 105.081 461.93 74.7582 461.93 74.7582 cv
489.859 61.476 li
cp
.639216 .482353 .564706 rgb
f
517.343 153.872 mo
517.343 153.872 502.2 157.658 501.198 158.609 cv
500.195 159.56 490.875 171.391 490.875 171.391 cv
490.875 171.391 486.522 174.089 485.37 177.195 cv
484.218 180.302 486.029 183.354 486.728 183.593 cv
487.426 183.831 523.621 174.887 524.3 173.978 cv
524.98 173.069 520.932 160.803 517.343 153.872 cv
cp
.360784 .411765 .647059 rgb
f
479.19 156.175 mo
479.19 156.175 463.581 156.003 462.343 156.662 cv
461.105 157.322 448.722 166.319 448.722 166.319 cv
448.722 166.319 443.765 167.811 441.754 170.499 cv
439.743 173.186 440.585 176.565 441.185 176.969 cv
441.783 177.373 479.062 177.887 479.978 177.186 cv
480.894 176.485 480.601 163.717 479.19 156.175 cv
cp
f
464.571 23.2538 mo
466.485 29.5077 li
466.485 29.5077 465.907 31.6503 462.339 33.0673 cv
459.682 34.1229 458.535 33.7997 458.535 33.7997 cv
457.947 30.516 li
457.375 27.3129 li
463.537 23.8383 li
464.571 23.2538 li
cp
.956863 .517647 .384314 rgb
f
463.537 23.8383 mo
463.574 24.0136 463.571 24.2353 463.54 24.4975 cv
463.097 28.0492 459.477 29.8935 457.947 30.516 cv
457.375 27.3129 li
463.537 23.8383 li
cp
0 0 0 rgb
f
451.619 13.4853 mo
451.619 13.4853 450.737 22.33 453.364 26.2909 cv
455.991 30.2514 459.737 28.2841 461.838 26.6757 cv
463.941 25.0668 464.572 23.2553 464.572 23.2553 cv
464.572 23.2553 467.033 23.2904 467.849 20.7494 cv
468.666 18.2084 466.989 16.1356 465.547 16.0019 cv
464.106 15.8686 462.895 17.2689 462.895 17.2689 cv
463.347 14.6352 li
463.347 14.6352 454.685 4.79092 451.619 13.4853 cv
cp
.956863 .517647 .384314 rgb
f
455.076 23.2089 mo
455.002 23.2089 454.929 23.1742 454.883 23.1093 cv
453.831 21.6332 454.438 19.5766 454.464 19.4896 cv
454.502 19.3642 454.637 19.2943 454.76 19.3314 cv
454.886 19.3695 454.956 19.5019 454.919 19.6273 cv
454.913 19.6464 454.356 21.5497 455.27 22.8339 cv
455.347 22.9408 455.321 23.0888 455.214 23.1649 cv
455.172 23.1947 455.124 23.2089 455.076 23.2089 cv
cp
0 0 0 rgb
f
464.341 20.7787 mo
464.307 20.7787 464.273 20.7719 464.241 20.7562 cv
464.122 20.7011 464.071 20.56 464.126 20.4408 cv
465.491 17.5199 li
465.546 17.4013 465.691 17.3505 465.806 17.4057 cv
465.924 17.4608 465.976 17.602 465.92 17.7211 cv
464.556 20.642 li
464.516 20.7279 464.43 20.7787 464.341 20.7787 cv
cp
f
464.841 19.7069 mo
464.727 19.7069 464.627 19.6254 464.607 19.5097 cv
464.585 19.3803 464.672 19.2577 464.801 19.2357 cv
466.327 18.976 li
466.467 18.9555 466.579 19.0414 466.602 19.1698 cv
466.623 19.2992 466.536 19.4218 466.408 19.4437 cv
464.881 19.7035 li
464.867 19.706 464.854 19.7069 464.841 19.7069 cv
cp
f
457.315 24.2968 mo
457.682 24.3979 458.241 24.4589 458.629 24.0722 cv
459.001 23.7016 459.16 23.226 459.229 22.872 cv
457.315 24.2968 li
cp
457.841 24.851 mo
457.254 24.851 456.748 24.5951 456.714 24.5775 cv
456.642 24.5399 456.594 24.4677 456.587 24.3861 cv
456.58 24.3041 456.616 24.225 456.682 24.1762 cv
459.374 22.1718 li
459.446 22.1186 459.541 22.1103 459.618 22.1483 cv
459.699 22.1864 459.75 22.266 459.753 22.3544 cv
459.755 22.4042 459.785 23.5912 458.963 24.4091 cv
458.624 24.7465 458.216 24.851 457.841 24.851 cv
cp
f
457.628 19.1664 mo
457.517 19.1664 457.418 19.0878 457.395 18.9745 cv
457.102 17.4726 li
457.077 17.3441 457.161 17.2191 457.289 17.1942 cv
457.422 17.1708 457.543 17.2538 457.569 17.3817 cv
457.862 18.8837 li
457.886 19.0121 457.802 19.1371 457.674 19.162 cv
457.658 19.1649 457.643 19.1664 457.628 19.1664 cv
cp
f
453.237 20.2362 mo
453.123 20.2362 453.023 20.1552 453.003 20.0399 cv
452.74 18.5326 li
452.716 18.4032 452.803 18.2802 452.932 18.2577 cv
453.057 18.2338 453.185 18.3212 453.206 18.4506 cv
453.47 19.9579 li
453.493 20.0873 453.407 20.2104 453.278 20.2328 cv
453.264 20.2353 453.25 20.2362 453.237 20.2362 cv
cp
f
458.058 15.9599 mo
457.997 15.9599 457.938 15.9374 457.892 15.892 cv
457.301 15.3109 456.386 15.8388 456.376 15.8432 cv
456.266 15.9086 456.118 15.8729 456.052 15.7592 cv
455.985 15.6459 456.023 15.5004 456.136 15.434 cv
456.186 15.4047 457.377 14.7196 458.224 15.5531 cv
458.318 15.6449 458.319 15.7953 458.227 15.8891 cv
458.181 15.9364 458.119 15.9599 458.058 15.9599 cv
cp
f
451.806 17.0385 mo
451.765 17.0385 451.724 17.0277 451.686 17.0058 cv
451.574 16.9398 451.535 16.7948 451.601 16.682 cv
451.619 16.6498 452.062 15.9018 452.749 15.765 cv
453.084 15.6991 453.416 15.7846 453.731 16.0238 cv
453.834 16.1034 453.856 16.2523 453.775 16.3568 cv
453.695 16.4608 453.546 16.4809 453.443 16.4018 cv
453.24 16.2465 453.041 16.1889 452.843 16.2304 cv
452.366 16.3241 452.014 16.9149 452.011 16.9208 cv
451.967 16.9965 451.887 17.0385 451.806 17.0385 cv
cp
f
462.895 17.2689 mo
462.895 17.2689 463.596 18.5932 461.517 17.7245 cv
459.438 16.8554 458.868 14.9052 457.35 12.7772 cv
455.831 10.6493 453.558 9.61172 452.588 11.5487 cv
451.619 13.4853 451.619 13.4853 451.619 13.4853 cv
451.619 13.4853 445.438 10.0575 447.923 8.43008 cv
450.409 6.80312 453.572 7.51406 453.572 7.51406 cv
453.572 7.51406 456.981 3.99404 462.163 6.48769 cv
468.096 9.3417 467.21 12.3397 467.21 12.3397 cv
467.21 12.3397 468.773 13.6234 468.733 14.9188 cv
468.693 16.2143 467.506 17.0946 467.506 17.0946 cv
467.506 17.0946 465.695 15.08 462.895 17.2689 cv
cp
f
467.117 28.4232 mo
471.254 28.4232 li
471.254 28.4232 476.297 44.0082 482.417 47.1957 cv
488.537 50.3832 489.859 61.476 489.859 61.476 cv
471.254 74.0277 li
462.806 82.2157 li
462.806 82.2157 455.851 56.9623 454.251 47.7636 cv
452.653 38.5648 452.973 36.6039 452.973 36.6039 cv
452.973 36.6039 454.245 34.6103 455.277 33.8466 cv
456.307 33.0829 456.307 33.0829 456.307 33.0829 cv
456.307 33.0829 456.689 39.6732 457.887 44.9008 cv
459.085 50.1283 459.77 52.3446 459.77 52.3446 cv
473.492 47.3231 li
473.492 47.3231 469.339 41.6532 467.117 28.4232 cv
cp
.639216 .482353 .564706 rgb
f
459.102 59.9604 mo
458.989 59.9604 458.887 59.8808 458.864 59.7655 cv
458.836 59.6337 458.921 59.5048 459.053 59.4779 cv
473.574 56.518 li
473.709 56.4955 473.834 56.5766 473.861 56.7079 cv
473.889 56.8397 473.803 56.9687 473.671 56.9955 cv
459.151 59.9555 li
459.134 59.9584 459.117 59.9604 459.102 59.9604 cv
cp
1 1 1 rgb
f
408.411 164.611 mo
408.895 164.611 409.363 164.35 409.607 163.891 cv
469.052 51.9828 li
469.404 51.3202 469.155 50.4965 468.495 50.1435 cv
467.833 49.7899 467.016 50.0395 466.664 50.7025 cv
407.218 162.61 li
406.866 163.273 407.116 164.097 407.775 164.45 cv
407.978 164.559 408.197 164.611 408.411 164.611 cv
cp
.360784 .411765 .647059 rgb
f
478.241 46.6967 mo
478.241 46.6967 470.682 41.7582 469.574 41.4516 cv
468.465 41.1454 466.759 41.89 466.759 41.89 cv
465.453 43.12 li
465.453 43.12 460.647 43.017 459.599 44.58 cv
458.551 46.143 460.983 47.1937 460.983 47.1937 cv
460.983 47.1937 458.289 47.0644 457.926 48.7489 cv
457.564 50.4335 459.812 51.4311 459.812 51.4311 cv
459.812 51.4311 457.55 52.5697 459.133 53.8871 cv
463.533 57.5497 476.249 57.0751 476.249 57.0751 cv
478.241 46.6967 li
cp
.956863 .517647 .384314 rgb
f
473.033 28.4232 mo
473.033 28.4232 504.745 33.1884 509.961 47.1679 cv
515.178 61.1479 495.533 64.0692 484.594 62.3998 cv
473.656 60.7304 471.778 59.2699 471.778 59.2699 cv
473.453 42.1596 li
480.824 43.4115 li
473.033 28.4232 li
cp
.407843 .713726 .847059 rgb
f
448.722 166.556 mo
448.599 166.556 448.495 166.461 448.486 166.337 cv
448.475 166.206 448.573 166.092 448.703 166.082 cv
456.805 165.456 li
456.955 165.444 457.05 165.545 457.06 165.675 cv
457.071 165.805 456.973 165.919 456.842 165.93 cv
448.741 166.556 li
448.734 166.556 448.728 166.556 448.722 166.556 cv
cp
.25098 .313726 .498039 rgb
f
490.874 171.628 mo
490.776 171.628 490.684 171.567 490.65 171.469 cv
490.607 171.345 490.673 171.209 490.797 171.166 cv
497.318 168.915 li
497.443 168.871 497.576 168.939 497.619 169.062 cv
497.662 169.186 497.597 169.321 497.472 169.364 cv
490.951 171.615 li
490.926 171.624 490.9 171.628 490.874 171.628 cv
cp
f
452.664 91.5614 mo
452.664 91.5614 458.069 91.4198 456.64 88.8134 cv
455.211 86.2074 445.636 84.1767 444.35 86.975 cv
443.063 89.7729 452.664 91.5614 452.664 91.5614 cv
cp
.956863 .517647 .384314 rgb
f
451.475 94.4413 mo
451.475 94.4413 456.878 94.2997 455.45 91.6933 cv
454.022 89.0873 444.447 87.0565 443.16 89.8549 cv
441.873 92.6527 451.475 94.4413 451.475 94.4413 cv
cp
f
448.27 97.3344 mo
449.387 97.8183 450.609 98.0487 451.817 97.8935 cv
452.894 97.7553 453.864 97.3065 453.438 96.0624 cv
452.585 93.5746 444.542 90.3603 442.998 92.6059 cv
441.848 94.2792 446.051 96.3744 448.27 97.3344 cv
cp
f
459.373 34.098 mo
459.09 34.098 458.8 34.08 458.504 34.0409 cv
458.37 34.0238 458.277 33.9013 458.294 33.768 cv
458.311 33.6352 458.423 33.5351 458.567 33.5585 cv
463.171 34.1527 466.247 29.4247 466.279 29.3769 cv
466.35 29.2626 466.503 29.2309 466.615 29.3026 cv
466.728 29.3749 466.761 29.5253 466.689 29.6386 cv
466.658 29.6864 463.786 34.098 459.373 34.098 cv
cp
.25098 .313726 .498039 rgb
f
495.25 45.8661 mo
495.209 45.8661 495.168 45.8554 495.129 45.8334 cv
491.611 43.8056 480.927 43.6562 480.82 43.6552 cv
480.685 43.6532 480.577 43.5429 480.579 43.4086 cv
480.58 43.2738 480.682 43.1688 480.825 43.1679 cv
481.27 43.1732 491.744 43.3207 495.371 45.4115 cv
495.489 45.4789 495.529 45.6273 495.461 45.744 cv
495.416 45.8222 495.334 45.8661 495.25 45.8661 cv
cp
f
493.032 41.7284 mo
491.839 41.7284 489.856 42.6195 488.293 43.517 cv
490.72 43.3754 493.657 42.9633 493.981 42.3246 cv
493.996 42.2924 494.031 42.2245 493.935 42.0854 cv
493.762 41.8349 493.444 41.7284 493.032 41.7284 cv
cp
487.348 44.0463 mo
487.241 44.0463 487.147 43.9765 487.116 43.8744 cv
487.083 43.7694 487.124 43.6562 487.217 43.5971 cv
487.812 43.2191 493.055 39.9574 494.335 41.809 cv
494.55 42.121 494.497 42.3812 494.414 42.5448 cv
493.783 43.7909 488.423 44.0141 487.356 44.0458 cv
487.353 44.0458 487.35 44.0463 487.348 44.0463 cv
cp
f
491.981 74.5336 mo
491.739 74.5126 486.574 74.0004 484.882 69.9013 cv
484.83 69.7772 484.89 69.6347 485.014 69.5834 cv
485.137 69.5307 485.281 69.5907 485.331 69.7157 cv
486.91 73.5395 491.951 74.0429 492.002 74.0473 cv
492.136 74.06 492.235 74.1781 492.222 74.3119 cv
492.21 74.4384 492.106 74.5336 491.981 74.5336 cv
cp
1 1 1 rgb
f
479.357 119.287 mo
479.264 119.287 479.176 119.233 479.135 119.143 cv
479.114 119.097 477.009 114.435 475.731 109.471 cv
474.29 103.883 474.321 90.455 474.33 88.6957 cv
463.502 85.8637 li
463.372 85.83 463.294 85.6967 463.328 85.5668 cv
463.362 85.4364 463.494 85.3578 463.625 85.393 cv
474.637 88.2729 li
474.745 88.3012 474.82 88.3988 474.819 88.5106 cv
474.818 88.6596 474.683 103.456 476.201 109.35 cv
477.47 114.271 479.558 118.896 479.578 118.942 cv
479.634 119.065 479.579 119.209 479.457 119.265 cv
479.425 119.279 479.391 119.287 479.357 119.287 cv
cp
f
482.107 147.606 mo
455.691 148.3 li
456.256 155.469 li
482.8 154.808 li
482.107 147.606 li
cp
.968627 .701961 .411765 rgb
f
519.177 142.544 mo
522.757 150.833 li
495.251 159.015 li
491.981 151.537 li
519.177 142.544 li
cp
f
471.46 43.8026 mo
471.452 43.8026 466.476 43.6488 466.476 43.6488 cv
466.345 43.6449 466.242 43.5351 466.247 43.4042 cv
466.25 43.2758 466.356 43.1742 466.484 43.1742 cv
466.491 43.1742 471.468 43.328 471.468 43.328 cv
471.599 43.3319 471.701 43.4418 471.698 43.5727 cv
471.694 43.7011 471.588 43.8026 471.46 43.8026 cv
cp
0 0 0 rgb
f
453.856 90.7992 mo
453.81 90.7948 445.982 89.2494 445.982 89.2494 cv
445.853 89.224 445.77 89.099 445.795 88.9706 cv
445.82 88.8427 445.938 88.7597 446.074 88.7836 cv
453.902 90.329 li
454.031 90.3544 454.114 90.4794 454.088 90.6078 cv
454.067 90.7211 453.967 90.7992 453.856 90.7992 cv
cp
f
452.645 94.809 mo
452.624 94.809 452.603 94.8065 452.581 94.8007 cv
444.486 92.5604 li
444.36 92.5253 444.285 92.3944 444.321 92.268 cv
444.356 92.1425 444.482 92.0653 444.613 92.1024 cv
452.708 94.3427 li
452.834 94.3778 452.908 94.5087 452.873 94.6352 cv
452.844 94.7401 452.749 94.809 452.645 94.809 cv
cp
f
448.345 85.8656 mo
448.325 85.8656 448.305 85.8632 448.285 85.8583 cv
448.158 85.8251 448.082 85.6957 448.116 85.5687 cv
448.831 82.8119 447.984 81.5131 447.975 81.4999 cv
447.903 81.392 447.93 81.2445 448.037 81.1708 cv
448.143 81.0966 448.291 81.1225 448.366 81.2309 cv
448.407 81.2895 449.351 82.6991 448.574 85.6879 cv
448.547 85.7948 448.45 85.8656 448.345 85.8656 cv
cp
f
422.103 172.954 mo
393.839 157.041 li
393.023 156.582 392.734 155.548 393.193 154.731 cv
393.653 153.915 394.687 153.625 395.503 154.085 cv
423.768 169.998 li
424.584 170.458 424.873 171.492 424.413 172.308 cv
423.954 173.125 422.919 173.414 422.103 172.954 cv
cp
.360784 .411765 .647059 rgb
f
404.852 161.213 mo
404.811 161.213 404.77 161.204 404.733 161.182 cv
397.787 157.271 li
397.67 157.205 397.628 157.057 397.695 156.94 cv
397.761 156.822 397.911 156.781 398.026 156.848 cv
404.972 160.758 li
405.088 160.824 405.13 160.973 405.064 161.089 cv
405.019 161.169 404.937 161.213 404.852 161.213 cv
cp
.572549 .705882 .917647 rgb
f
459.677 249.758 mo
459.677 249.758 453.675 248.484 452.557 246.106 cv
451.439 243.727 462.801 246.341 462.801 246.341 cv
459.677 249.758 li
cp
.25098 .313726 .498039 rgb
f
405.319 301.846 mo
405.319 301.846 414.993 301.171 417.162 298.116 cv
419.331 295.061 413.547 290.024 413.547 290.024 cv
406.442 291.302 li
405.319 301.846 li
cp
.956863 .517647 .384314 rgb
f
416.51 289.644 mo
416.51 289.644 432.494 287.163 437.234 285.323 cv
441.973 283.484 449.033 293.351 449.033 293.351 cv
446.285 301.553 li
446.285 301.553 436.018 302.58 425.741 301.666 cv
419.796 301.138 414.867 298.679 414.867 298.679 cv
416.51 289.644 li
cp
f
486.369 351.408 mo
493.15 350.641 li
491.438 335.482 li
483.849 336.339 li
486.369 351.408 li
cp
f
424.455 316.61 mo
424.455 316.61 409.991 319.625 411.544 335.559 cv
413.272 353.265 441.662 357.545 461.778 357.038 cv
481.894 356.529 488.499 355.111 488.499 355.111 cv
488.499 325.615 li
475.288 325.615 li
424.455 316.61 li
cp
.568627 .419608 .505882 rgb
f
436.018 285.948 mo
436.018 285.948 440.604 280.351 442.863 277.066 cv
445.121 273.781 448.749 269.157 453.678 266.156 cv
458.606 263.155 470.926 261.632 479.345 267.117 cv
487.764 272.6 491.666 279.988 493.104 287.998 cv
494.54 296.009 493.104 298.884 493.104 298.884 cv
468.772 298.884 li
446.285 299.705 li
446.285 299.705 443.821 289.233 436.018 285.948 cv
cp
.968627 .701961 .411765 rgb
f
460.375 259.906 mo
460.375 260.069 li
460.492 263.151 li
460.574 265.567 li
460.574 265.567 460.365 266.127 463.177 265.964 cv
466.948 265.73 468.173 264.12 468.173 264.12 cv
468.371 258.458 li
467.228 258.668 li
460.375 259.906 li
cp
.956863 .517647 .384314 rgb
f
460.375 260.069 mo
460.492 263.151 li
462.325 262.941 465.663 262.17 467.03 259.298 cv
467.134 259.065 467.204 258.855 467.228 258.68 cv
460.388 260.023 li
460.375 260.069 li
cp
0 0 0 rgb
f
459.28 245.317 mo
459.28 245.317 455.722 253.315 456.954 257.829 cv
458.187 262.344 462.297 261.663 464.759 260.808 cv
467.222 259.953 468.372 258.454 468.372 258.454 cv
468.372 258.454 470.661 259.247 472.211 257.124 cv
473.76 255 472.831 252.543 471.525 251.973 cv
470.218 251.403 468.654 252.338 468.654 252.338 cv
469.891 250.016 li
469.891 250.016 464.832 238.134 459.28 245.317 cv
cp
.956863 .517647 .384314 rgb
f
435.081 344.051 mo
435.081 350.875 li
450.59 350.875 li
450.59 343.238 li
435.081 344.051 li
cp
f
450.822 370.823 mo
449.908 371.952 413.645 373.258 411.862 373.051 cv
410.063 372.845 410.641 373.185 410.063 372.845 cv
409.484 372.505 410.011 368.002 410.011 368.002 cv
410.011 368.002 410.017 367.962 410.013 367.882 cv
410.033 367.184 410.255 363.306 413.161 361.29 cv
416.363 359.068 421.88 358.083 421.88 358.083 cv
421.88 358.083 431.314 351.415 432.09 351.064 cv
432.866 350.711 433.63 347.247 433.985 347.125 cv
434.324 347.004 450.358 347.295 451.33 347.976 cv
452.062 348.485 451.922 360.364 451.42 366.797 cv
451.25 368.98 451.048 370.538 450.822 370.823 cv
cp
.572549 .705882 .917647 rgb
f
450.822 370.823 mo
449.908 371.952 413.645 373.258 411.862 373.051 cv
410.063 372.845 410.641 373.185 410.063 372.845 cv
409.484 372.505 410.011 368.002 410.011 368.002 cv
410.011 368.002 410.017 367.962 410.013 367.882 cv
416.101 367.872 432.427 367.771 442.677 367.262 cv
446.261 367.081 449.133 366.929 451.42 366.797 cv
451.25 368.98 451.048 370.538 450.822 370.823 cv
cp
.25098 .313726 .498039 rgb
f
512.1 331.044 mo
513.358 331.771 520.325 367.382 520.401 369.175 cv
520.479 370.985 520.724 370.36 520.479 370.985 cv
520.234 371.61 515.704 371.793 515.704 371.793 cv
515.704 371.793 515.663 371.794 515.585 371.811 cv
514.891 371.9 511.027 372.288 508.581 369.733 cv
505.885 366.919 504.049 361.623 504.049 361.623 cv
504.049 361.623 495.987 353.35 495.517 352.638 cv
495.048 351.927 491.507 351.714 491.331 351.383 cv
491.158 351.068 488.936 335.186 489.455 334.119 cv
489.843 333.317 501.597 331.595 508.031 331.083 cv
510.213 330.91 511.783 330.866 512.1 331.044 cv
cp
.572549 .705882 .917647 rgb
f
512.1 331.044 mo
513.358 331.771 520.325 367.382 520.401 369.175 cv
520.479 370.985 520.724 370.36 520.479 370.985 cv
520.234 371.61 515.704 371.793 515.704 371.793 cv
515.704 371.793 515.663 371.794 515.585 371.811 cv
514.621 365.799 511.966 349.69 509.859 339.647 cv
509.119 336.134 508.519 333.322 508.031 331.083 cv
510.213 330.91 511.783 330.866 512.1 331.044 cv
cp
.25098 .313726 .498039 rgb
f
428.619 346.005 mo
428.619 346.005 417.203 313.601 423.02 303.262 cv
428.835 292.923 470.671 300.404 470.671 300.404 cv
489.936 301.324 li
489.936 301.324 493.833 320.254 485.648 325.517 cv
477.463 330.781 452.76 328.928 452.76 328.928 cv
455.82 346.005 li
428.619 346.005 li
cp
.639216 .482353 .564706 rgb
f
449.033 283.094 mo
450.592 297.961 li
489.854 303.607 li
489.854 292.729 li
449.033 283.094 li
cp
.968627 .701961 .411765 rgb
f
449.033 299.605 mo
449.033 299.605 450.685 287.508 452.155 278.911 cv
453.624 270.314 455.724 265.162 455.724 265.162 cv
455.724 265.162 457.517 264.525 458.333 264.332 cv
459.151 264.139 459.663 264.034 459.663 264.034 cv
457.487 280.51 li
468.257 280.781 li
469.444 263.683 li
469.444 263.683 472.803 264.054 473.747 264.371 cv
474.693 264.69 474.693 264.69 474.693 264.69 cv
473.019 298.884 li
472.177 303.01 li
449.033 299.605 li
cp
.639216 .482353 .564706 rgb
f
450.803 303.607 mo
450.803 303.607 471.442 300.048 473.019 298.884 cv
476.767 296.117 493.551 297.143 493.551 297.143 cv
493.551 297.143 493.309 306.482 486.943 311.204 cv
480.577 315.927 453.878 312.847 453.878 312.847 cv
450.803 303.607 li
cp
.956863 .517647 .384314 rgb
f
473.019 264.371 mo
473.019 264.371 483.384 265.678 488.86 273.417 cv
494.335 281.156 495.431 299.705 495.431 299.705 cv
473.019 298.884 li
473.019 264.371 li
cp
.968627 .701961 .411765 rgb
f
459.78 255.032 mo
459.678 255.032 459.584 254.966 459.553 254.865 cv
459.044 253.22 460.204 251.547 460.253 251.477 cv
460.329 251.37 460.476 251.343 460.584 251.419 cv
460.691 251.495 460.717 251.643 460.642 251.75 cv
460.631 251.766 459.568 253.305 460.006 254.724 cv
460.045 254.85 459.975 254.983 459.85 255.021 cv
459.826 255.029 459.803 255.032 459.78 255.032 cv
cp
0 0 0 rgb
f
469.185 256.141 mo
469.126 256.141 469.068 256.12 469.022 256.077 cv
468.927 255.987 468.922 255.836 469.012 255.741 cv
471.106 253.522 li
471.196 253.428 471.347 253.422 471.442 253.512 cv
471.536 253.602 471.541 253.752 471.451 253.848 cv
469.358 256.067 li
469.311 256.116 469.248 256.141 469.185 256.141 cv
cp
f
471.401 255.546 mo
471.366 255.543 469.918 255.324 469.918 255.324 cv
469.788 255.304 469.699 255.183 469.719 255.054 cv
469.739 254.924 469.863 254.836 469.989 254.855 cv
471.436 255.075 li
471.566 255.094 471.655 255.215 471.635 255.344 cv
471.617 255.462 471.516 255.546 471.401 255.546 cv
cp
f
461.426 256.653 mo
461.726 256.847 462.192 257.048 462.639 256.827 cv
463.064 256.614 463.343 256.252 463.51 255.96 cv
461.426 256.653 li
cp
462.216 257.402 mo
461.433 257.402 460.799 256.766 460.766 256.732 cv
460.709 256.673 460.686 256.589 460.705 256.51 cv
460.725 256.43 460.783 256.367 460.861 256.34 cv
463.873 255.339 li
463.957 255.314 464.05 255.332 464.114 255.394 cv
464.177 255.455 464.201 255.546 464.176 255.631 cv
464.163 255.677 463.837 256.758 462.851 257.25 cv
462.634 257.359 462.42 257.402 462.216 257.402 cv
cp
f
463.272 252.158 mo
463.112 252.139 463.02 252.02 463.036 251.89 cv
463.22 250.454 li
463.237 250.324 463.341 250.231 463.486 250.248 cv
463.616 250.265 463.707 250.384 463.691 250.514 cv
463.507 251.951 li
463.491 252.071 463.39 252.158 463.272 252.158 cv
cp
f
459.009 251.815 mo
458.845 251.793 458.755 251.672 458.775 251.543 cv
458.986 250.111 li
459.003 249.982 459.113 249.886 459.254 249.911 cv
459.384 249.929 459.474 250.05 459.454 250.179 cv
459.243 251.612 li
459.227 251.73 459.125 251.815 459.009 251.815 cv
cp
f
464.61 249.405 mo
464.524 249.405 464.441 249.358 464.399 249.276 cv
464.046 248.59 463.106 248.781 463.066 248.789 cv
462.94 248.812 462.812 248.735 462.784 248.607 cv
462.757 248.479 462.838 248.353 462.966 248.325 cv
463.02 248.315 464.301 248.048 464.821 249.059 cv
464.881 249.175 464.835 249.319 464.718 249.378 cv
464.685 249.396 464.647 249.405 464.61 249.405 cv
cp
f
460.107 248.735 mo
460.032 248.735 459.956 248.699 459.91 248.631 cv
459.777 248.435 459.619 248.329 459.432 248.305 cv
458.986 248.257 458.497 248.671 458.491 248.675 cv
458.393 248.762 458.242 248.752 458.156 248.655 cv
458.069 248.557 458.077 248.407 458.176 248.32 cv
458.202 248.296 458.83 247.747 459.49 247.834 cv
459.817 247.874 460.09 248.053 460.303 248.364 cv
460.376 248.472 460.349 248.62 460.241 248.694 cv
460.199 248.721 460.154 248.735 460.107 248.735 cv
cp
f
468.654 252.338 mo
468.654 252.338 467.228 252.54 466.332 250.862 cv
465.407 249.128 466.01 246.75 466.01 246.75 cv
466.01 246.75 463.793 247.338 461.712 246.433 cv
459.632 245.529 459.456 245.097 459.456 245.097 cv
458.485 247.332 li
458.485 247.332 457.301 243.563 460.936 242.221 cv
463.387 241.317 463.949 241.684 463.949 241.684 cv
463.949 241.684 470.443 242.408 472.116 245.755 cv
473.79 249.102 472.369 252.68 472.369 252.68 cv
472.369 252.68 470.303 251.776 468.654 252.338 cv
cp
f
472.991 298.594 mo
472.853 298.592 472.745 298.482 472.747 298.348 cv
472.804 294.217 li
472.806 294.083 472.914 293.977 473.047 293.977 cv
473.185 293.979 473.293 294.089 473.29 294.223 cv
473.234 298.354 li
473.232 298.488 473.123 298.594 472.991 298.594 cv
cp
.360784 .411765 .647059 rgb
f
463.067 266.368 mo
461.451 266.368 460.117 266.07 460 266.043 cv
459.869 266.013 459.787 265.882 459.818 265.751 cv
459.848 265.621 459.975 265.54 460.11 265.569 cv
460.168 265.583 466.014 266.884 467.967 263.972 cv
468.043 263.859 468.194 263.829 468.305 263.906 cv
468.416 263.981 468.447 264.132 468.372 264.244 cv
467.218 265.961 464.951 266.368 463.067 266.368 cv
cp
f
497.102 354.644 mo
496.941 354.627 496.845 354.506 496.86 354.372 cv
497.472 349.076 li
497.488 348.943 497.601 348.847 497.742 348.862 cv
497.875 348.877 497.972 348.998 497.956 349.132 cv
497.344 354.429 li
497.329 354.553 497.224 354.644 497.102 354.644 cv
cp
1 1 1 rgb
f
499.827 357.291 mo
499.666 357.275 499.571 357.154 499.585 357.02 cv
500.198 351.724 li
500.213 351.591 500.327 351.5 500.468 351.51 cv
500.601 351.526 500.697 351.647 500.682 351.781 cv
500.07 357.077 li
500.055 357.201 499.949 357.291 499.827 357.291 cv
cp
f
435.497 354.745 mo
435.465 354.745 435.433 354.739 435.402 354.726 cv
430.49 352.651 li
430.366 352.598 430.308 352.455 430.36 352.331 cv
430.413 352.208 430.554 352.15 430.679 352.202 cv
435.591 354.277 li
435.715 354.329 435.773 354.472 435.722 354.596 cv
435.681 354.689 435.591 354.745 435.497 354.745 cv
cp
f
432.543 356.618 mo
432.512 356.618 432.481 356.612 432.449 356.599 cv
427.536 354.524 li
427.412 354.471 427.356 354.329 427.407 354.204 cv
427.46 354.081 427.599 354.024 427.726 354.075 cv
432.639 356.15 li
432.762 356.203 432.82 356.345 432.768 356.469 cv
432.728 356.562 432.639 356.618 432.543 356.618 cv
cp
f
449.236 321.918 mo
449.027 321.918 448.811 321.982 448.584 322.109 cv
448.195 322.329 447.994 322.615 447.973 322.984 cv
447.885 324.522 450.81 327.12 452.419 328.368 cv
452.141 326.83 451.273 322.8 449.717 322.035 cv
449.56 321.957 449.4 321.918 449.236 321.918 cv
cp
452.76 329.171 mo
452.71 329.171 452.659 329.156 452.617 329.125 cv
452.403 328.969 447.354 325.28 447.488 322.956 cv
447.518 322.416 447.807 321.989 448.347 321.685 cv
448.891 321.377 449.426 321.347 449.932 321.598 cv
452.081 322.656 452.964 328.639 453.001 328.894 cv
453.015 328.991 452.97 329.086 452.886 329.136 cv
452.847 329.16 452.803 329.171 452.76 329.171 cv
cp
f
464.113 282.726 mo
464.106 282.726 456.412 282.504 456.412 282.504 cv
456.278 282.5 456.172 282.388 456.176 282.254 cv
456.18 282.122 456.288 282.018 456.419 282.018 cv
456.426 282.018 464.119 282.24 464.119 282.24 cv
464.254 282.244 464.36 282.356 464.356 282.49 cv
464.352 282.621 464.243 282.726 464.113 282.726 cv
cp
f
402.418 311.257 mo
402.418 311.257 403.886 308.158 419.969 304.629 cv
436.052 301.1 445.18 303.819 445.18 303.819 cv
448.262 305.104 li
448.597 306.833 li
432.765 315.311 li
413.453 318.554 li
404.12 316.932 li
401.656 314.12 li
401.656 314.12 401.811 311.905 402.418 311.257 cv
cp
.25098 .313726 .498039 rgb
f
406.143 316.61 mo
406.143 316.61 407.565 312.964 408.701 312.127 cv
409.839 311.291 412.447 317.547 412.447 317.547 cv
412.447 317.547 412.683 313.818 413.11 313.834 cv
413.535 313.851 418.648 313.834 418.648 313.834 cv
418.648 313.834 418.796 310.012 419.507 309.728 cv
420.218 309.444 429.175 314.997 429.175 314.997 cv
429.175 314.997 429.578 310.507 430.088 310.686 cv
430.597 310.866 433.04 309.717 433.04 309.717 cv
433.04 309.717 433.298 306.316 434.293 306.316 cv
435.289 306.316 442.835 309.918 442.835 309.918 cv
428.464 322.923 li
406.143 316.61 li
cp
.572549 .705882 .917647 rgb
f
402.418 311.257 mo
402.418 311.257 399.337 318.06 418.578 315.3 cv
448.256 311.042 445.18 303.819 445.18 303.819 cv
448.403 303.413 450.34 307.597 448.155 310.219 cv
447.065 311.527 446.09 312.275 446.09 312.275 cv
446.09 312.275 475.295 342.647 456.095 362.334 cv
442.032 376.754 400.331 376.964 393.496 356.841 cv
389.024 343.675 403.358 321.064 403.358 321.064 cv
403.358 321.064 395.857 316.449 402.418 311.257 cv
cp
.360784 .411765 .647059 rgb
f
412.447 366.009 mo
412.429 366.009 412.411 366.007 412.394 366.003 cv
399.549 363.288 396.537 353.012 396.508 352.909 cv
396.47 352.774 396.549 352.633 396.685 352.595 cv
396.82 352.553 396.96 352.637 396.998 352.772 cv
397.027 352.872 399.966 362.856 412.499 365.505 cv
412.637 365.535 412.725 365.669 412.696 365.807 cv
412.67 365.927 412.565 366.009 412.447 366.009 cv
cp
.572549 .705882 .917647 rgb
f
455.403 305.613 mo
455.403 305.613 452.77 301.826 447.729 301.846 cv
446.185 301.853 443.764 303.416 443.764 303.416 cv
444.608 305.545 li
444.608 305.545 439.869 307.214 437.79 308.277 cv
436.073 309.156 434.592 311.209 438.873 312.127 cv
439.741 312.314 441.474 318.724 444.19 319.432 cv
446.906 320.139 455.293 315.001 456.801 311.075 cv
458.308 307.148 455.403 305.613 455.403 305.613 cv
cp
.956863 .517647 .384314 rgb
f
444.234 305.85 mo
444.131 305.85 444.036 305.783 444.006 305.679 cv
443.969 305.554 444.041 305.422 444.168 305.385 cv
446.407 304.729 li
446.528 304.69 446.663 304.764 446.7 304.89 cv
446.738 305.015 446.665 305.147 446.539 305.184 cv
444.3 305.84 li
444.279 305.847 444.256 305.85 444.234 305.85 cv
cp
0 0 0 rgb
f
440.497 312.365 mo
438.873 312.365 li
438.742 312.365 438.636 312.258 438.636 312.127 cv
438.636 311.996 438.742 311.89 438.873 311.89 cv
440.497 311.89 li
440.628 311.89 440.735 311.996 440.735 312.127 cv
440.735 312.258 440.628 312.365 440.497 312.365 cv
cp
f
402.147 294.922 mo
402.147 294.922 398.988 290.573 399.732 289.572 cv
400.475 288.572 403.113 285.503 403.113 285.503 cv
404.612 288.506 li
408.191 285.426 li
408.191 285.426 411.429 291.787 411.217 292.237 cv
411.005 292.687 409.531 295.242 409.531 295.242 cv
409.531 295.242 411.673 298.04 411.509 299.01 cv
411.346 299.98 409.131 299.093 409.131 299.093 cv
409.131 299.093 404.724 303.485 403.772 303.306 cv
402.82 303.127 396.611 296.09 396.756 295.564 cv
396.903 295.038 402.147 294.922 402.147 294.922 cv
cp
.458824 .627451 .827451 rgb
f
400.997 296.308 mo
400.997 296.308 397.838 291.958 398.581 290.958 cv
399.325 289.958 401.963 286.889 401.963 286.889 cv
403.462 289.893 li
407.041 286.812 li
407.041 286.812 410.279 293.172 410.068 293.622 cv
409.856 294.073 408.381 296.627 408.381 296.627 cv
408.381 296.627 411.673 298.04 411.509 299.01 cv
411.346 299.98 407.982 300.479 407.982 300.479 cv
407.982 300.479 403.574 304.871 402.622 304.692 cv
401.67 304.513 397.208 299.794 397.354 299.268 cv
397.499 298.742 400.997 296.308 400.997 296.308 cv
cp
.572549 .705882 .917647 rgb
f
416.51 289.644 mo
416.51 289.644 413.585 286.394 411.428 285.094 cv
409.27 283.794 404.932 285.882 404.932 287.369 cv
404.932 288.855 409.791 288.373 409.791 288.373 cv
409.791 288.373 411.701 295.362 416.51 295.362 cv
421.32 295.362 416.51 289.644 416.51 289.644 cv
cp
.956863 .517647 .384314 rgb
f
416.476 295.59 mo
412.064 295.59 410.189 290.159 410.169 290.099 cv
410.127 289.975 410.194 289.84 410.319 289.799 cv
410.439 289.756 410.576 289.824 410.618 289.949 cv
410.639 290.007 412.66 295.856 417.383 295.036 cv
417.51 295.01 417.635 295.099 417.658 295.228 cv
417.681 295.357 417.594 295.48 417.465 295.502 cv
417.122 295.563 416.793 295.59 416.476 295.59 cv
cp
0 0 0 rgb
f
398.741 299.62 mo
398.741 299.62 394.965 303.489 397.806 304.362 cv
400.647 305.235 408.928 300.017 407.901 297.114 cv
406.872 294.21 398.741 299.62 398.741 299.62 cv
cp
.956863 .517647 .384314 rgb
f
397.587 296.726 mo
397.587 296.726 393.811 300.594 396.652 301.467 cv
399.492 302.34 407.774 297.122 406.745 294.219 cv
405.718 291.316 397.587 296.726 397.587 296.726 cv
cp
f
397.868 292.417 mo
396.73 292.849 395.694 293.536 394.935 294.489 cv
394.259 295.338 393.877 296.337 395.049 296.932 cv
397.395 298.121 405.403 294.82 404.945 292.133 cv
404.603 290.132 400.129 291.559 397.868 292.417 cv
cp
f
398.582 301.405 mo
398.505 301.405 398.429 301.367 398.383 301.296 cv
398.312 301.187 398.343 301.039 398.453 300.968 cv
405.145 296.621 li
405.251 296.552 405.401 296.58 405.473 296.691 cv
405.544 296.8 405.514 296.948 405.403 297.019 cv
398.711 301.367 li
398.672 301.392 398.627 301.405 398.582 301.405 cv
cp
0 0 0 rgb
f
396.656 297.686 mo
396.572 297.686 396.491 297.641 396.448 297.563 cv
396.384 297.448 396.426 297.303 396.541 297.241 cv
403.908 293.204 li
404.021 293.141 404.168 293.183 404.231 293.297 cv
404.294 293.413 404.252 293.557 404.137 293.62 cv
396.77 297.657 li
396.734 297.676 396.695 297.686 396.656 297.686 cv
cp
f
457.662 245.347 mo
457.662 245.347 459.317 238.084 467.128 239.433 cv
474.905 240.775 473.019 250.145 473.019 250.145 cv
469.784 249.331 li
457.662 245.347 li
cp
.360784 .411765 .647059 rgb
f
455.357 245.138 mo
455.357 245.138 458.088 244.96 465.43 247.492 cv
467.961 248.364 470.202 249.456 470.202 249.456 cv
470.202 249.456 461.786 246.889 458.653 247.247 cv
457.45 247.385 456.716 247.915 456.716 247.915 cv
455.357 245.138 li
cp
.25098 .313726 .498039 rgb
f
42.3465 55.933 mo
42.3465 55.933 48.8948 72.5424 62.1526 83.0131 cv
75.4104 93.4843 69.344 79.4374 69.344 79.4374 cv
69.344 79.4374 60.7727 53.9076 58.7083 49.6352 cv
56.6438 45.3622 42.3465 55.933 42.3465 55.933 cv
cp
.956863 .517647 .384314 rgb
f
138.573 180.998 mo
107.188 180.998 li
105.431 180.998 104.007 179.574 104.007 177.817 cv
104.007 176.06 105.431 174.636 107.188 174.636 cv
138.573 174.636 li
140.33 174.636 141.755 176.06 141.755 177.817 cv
141.755 179.574 140.33 180.998 138.573 180.998 cv
cp
.937255 .643137 .34902 rgb
f
45.0076 56.8134 mo
59.8391 50.3578 li
59.8391 50.3578 52.8133 28.3251 40.2454 27.5829 cv
45.0076 56.8134 li
cp
.572549 .705882 .917647 rgb
f
65.5921 74.8686 mo
65.5921 74.8686 73.6399 80.2958 74.3206 81.5648 cv
75.0012 82.8339 75.3357 88.2162 73.5667 87.9135 cv
71.7976 87.6112 71.0218 84.4901 71.0218 84.4901 cv
71.0218 84.4901 63.4719 84.4867 62.451 81.7719 cv
61.43 79.057 65.5921 74.8686 65.5921 74.8686 cv
cp
.956863 .517647 .384314 rgb
f
56.8601 104.633 mo
58.1956 110.084 li
58.2571 110.333 58.511 110.487 58.7591 110.426 cv
60.1033 110.097 li
60.2244 110.067 60.3269 109.992 60.3914 109.885 cv
60.4558 109.779 60.4749 109.654 60.4456 109.533 cv
59.1096 104.082 li
56.8601 104.633 li
cp
58.6482 110.926 mo
58.2195 110.926 57.8294 110.634 57.7229 110.2 cv
56.3294 104.513 li
56.3137 104.45 56.324 104.384 56.3577 104.328 cv
56.3909 104.273 56.4451 104.233 56.5076 104.218 cv
59.2302 103.551 li
59.3621 103.517 59.4925 103.6 59.5247 103.729 cv
60.9182 109.416 li
60.9788 109.664 60.9397 109.92 60.8074 110.138 cv
60.6756 110.355 60.4666 110.509 60.2195 110.569 cv
58.8753 110.898 li
58.7991 110.917 58.7229 110.926 58.6482 110.926 cv
cp
1 1 1 rgb
f
58.7083 80.1474 mo
58.7083 80.1474 60.5974 86.1996 62.9173 87.4682 cv
65.2366 88.7372 66.9759 81.5839 66.9759 81.5839 cv
62.7239 78.5004 li
58.7083 80.1474 li
cp
.956863 .517647 .384314 rgb
f
50.0423 157.657 mo
50.0423 166.38 li
64.388 165.765 li
64.388 157.657 li
50.0423 157.657 li
cp
f
14.5633 156.737 mo
14.5633 164.9 li
28.7869 164.324 li
28.7869 156.737 li
14.5633 156.737 li
cp
f
45.4573 66.7855 mo
45.4573 66.7855 56.5447 84.4862 63.116 112.828 cv
69.1101 138.678 69.8841 159.118 69.8841 159.118 cv
44.4754 160.059 li
44.4754 160.059 41.5916 138.982 40.823 130.642 cv
40.055 122.302 37.4988 111.139 37.4988 111.139 cv
37.4988 111.139 34.18 158.271 33.3313 159.085 cv
32.4832 159.9 8.49538 159.886 8.22243 158.783 cv
7.68923 156.631 13.3201 80.2196 14.5633 75.0668 cv
19.2283 55.7333 45.4573 66.7855 45.4573 66.7855 cv
cp
.639216 .482353 .564706 rgb
f
32.3176 177.113 mo
32.3176 178.554 31.8338 180.202 30.8426 180.617 cv
29.8513 181.031 21.8308 181.895 14.8128 181.285 cv
8.09402 180.697 8.18484 180.94 7.68923 180.329 cv
7.44753 180.018 6.43484 177.839 6.97634 176.445 cv
7.01101 176.375 7.03396 176.295 7.06863 176.226 cv
7.34499 175.523 7.63308 174.843 7.8406 174.359 cv
8.04812 173.898 8.30154 173.46 8.60134 173.034 cv
9.32742 172.031 10.7678 169.957 11.1365 168.885 cv
11.6204 167.456 12.3582 164.368 12.8538 162.915 cv
13.2283 161.834 17.2122 160.9 19.3352 160.135 cv
20.0711 159.87 20.8606 159.806 21.6297 159.947 cv
23.7742 160.342 28.6218 160.447 29.3675 161.072 cv
30.3469 161.89 30.8426 168.689 30.8426 169.715 cv
30.8426 170.74 li
30.8426 171.697 31.4993 173.587 31.926 175.154 cv
32.0413 175.546 32.1331 175.914 32.2024 176.249 cv
32.2718 176.583 32.3176 176.871 32.3176 177.113 cv
cp
.360784 .411765 .647059 rgb
f
37.4993 111.005 mo
37.3455 110.994 37.2454 110.876 37.2561 110.743 cv
37.2644 110.639 38.073 100.365 38.3074 95.8104 cv
38.5418 91.2621 38.551 89.0829 38.551 89.0614 cv
38.5515 88.9657 38.6082 88.8788 38.6956 88.8402 cv
47.0945 85.1015 li
47.2176 85.0463 47.3611 85.102 47.4158 85.2245 cv
47.4705 85.3476 47.4153 85.4911 47.2927 85.5458 cv
39.0369 89.2211 li
39.0301 89.7978 38.9929 91.9604 38.7937 95.8358 cv
38.5589 100.396 37.7498 110.678 37.7415 110.781 cv
37.7312 110.908 37.6248 111.005 37.4993 111.005 cv
cp
.25098 .313726 .498039 rgb
f
26.5213 26.8573 mo
26.5213 26.8573 19.0413 26.831 15.0047 30.8529 cv
10.968 34.8744 16.0071 72.4115 16.0071 72.4115 cv
16.0071 72.4115 28.3118 75.9052 35.947 74.2323 cv
43.5828 72.56 45.6248 70.1723 45.6248 70.1723 cv
45.6248 70.1723 47.8552 33.745 45.7561 29.872 cv
43.6575 25.9994 26.5213 26.8573 26.5213 26.8573 cv
cp
.572549 .705882 .917647 rgb
f
24.5188 24.0424 mo
24.5623 28.9892 li
24.5623 28.9892 26.4495 30.5487 28.8372 30.5492 cv
32.0608 30.5502 33.1677 28.6273 33.1677 28.6273 cv
33.034 22.2582 li
24.5188 24.0424 li
cp
.956863 .517647 .384314 rgb
f
24.5188 23.914 mo
24.5188 23.914 26.8269 28.6649 30.4759 28.0565 cv
33.4177 27.5663 33.031 22.6654 33.031 22.6654 cv
24.5188 23.914 li
cp
0 0 0 rgb
f
34.5037 11.0053 mo
34.5037 11.0053 36.2742 19.4193 33.5979 23.5058 cv
30.9212 27.5922 27.3347 26.4667 25.7151 25.2641 cv
23.531 23.642 23.0506 21.3495 23.0506 21.3495 cv
23.0506 21.3495 20.096 21.9896 19.0667 19.5883 cv
17.9856 17.0668 19.7971 14.9867 21.2781 14.8407 cv
22.7591 14.6947 22.9363 14.9618 22.9363 14.9618 cv
22.4553 12.2572 li
22.4553 12.2572 31.301 2.08681 34.5037 11.0053 cv
cp
.956863 .517647 .384314 rgb
f
33.1424 14.9853 mo
33.1424 14.9853 37.6033 12.9916 38.0115 16.4652 cv
38.4846 20.4892 33.6677 20.6073 33.6677 20.6073 cv
33.1424 14.9853 li
cp
f
35.4368 18.5487 mo
35.3972 18.5487 35.3572 18.539 35.3206 18.5185 cv
35.2063 18.4545 35.1658 18.3095 35.2298 18.1952 cv
36.6858 15.6 li
36.7503 15.4853 36.8958 15.4462 37.0091 15.5092 cv
37.1233 15.5731 37.1638 15.7182 37.0999 15.8324 cv
35.6438 18.4276 li
35.6004 18.5053 35.5198 18.5487 35.4368 18.5487 cv
cp
0 0 0 rgb
f
22.5115 18.8544 mo
22.4578 18.8544 22.4041 18.8363 22.3601 18.7997 cv
20.0393 16.8759 li
19.9383 16.7924 19.9241 16.6425 20.0081 16.5419 cv
20.0916 16.4398 20.2425 16.4271 20.3421 16.5106 cv
22.6629 18.4345 li
22.7639 18.518 22.7781 18.6679 22.6941 18.7685 cv
22.6472 18.8251 22.5794 18.8544 22.5115 18.8544 cv
cp
f
20.4046 19.2514 mo
20.3343 19.2514 20.2639 19.2201 20.2176 19.1601 cv
20.137 19.0565 20.1551 18.9076 20.2586 18.827 cv
21.5916 17.7885 li
21.6946 17.7079 21.8445 17.726 21.9246 17.8295 cv
22.0051 17.933 21.9871 18.0819 21.8836 18.1625 cv
20.5506 19.2011 li
20.5071 19.2353 20.4558 19.2514 20.4046 19.2514 cv
cp
f
37.1677 17.7489 mo
35.8855 17.7489 li
35.7547 17.7489 35.6482 17.6425 35.6482 17.5116 cv
35.6482 17.3808 35.7547 17.2743 35.8855 17.2743 cv
37.1677 17.2743 li
37.2986 17.2743 37.4051 17.3808 37.4051 17.5116 cv
37.4051 17.6425 37.2986 17.7489 37.1677 17.7489 cv
cp
f
27.3426 16.6679 mo
27.2229 16.6679 27.1199 16.5775 27.1072 16.4555 cv
26.9534 15.0082 li
26.9392 14.8778 27.034 14.7611 27.1643 14.7475 cv
27.2918 14.7357 27.4114 14.8275 27.4251 14.9584 cv
27.5789 16.4057 li
27.593 16.536 27.4983 16.6527 27.3679 16.6664 cv
27.3596 16.6674 27.3513 16.6679 27.3426 16.6679 cv
cp
f
32.7302 16.327 mo
32.6106 16.327 32.5076 16.2367 32.4949 16.1146 cv
32.3411 14.6674 li
32.3269 14.537 32.4217 14.4203 32.552 14.4066 cv
32.6785 14.393 32.7991 14.4872 32.8128 14.6176 cv
32.9666 16.0648 li
32.9807 16.1952 32.886 16.3119 32.7556 16.3256 cv
32.7473 16.3266 32.739 16.327 32.7302 16.327 cv
cp
f
30.5213 20.0145 mo
30.3562 19.9926 30.2669 19.872 30.2859 19.7426 cv
30.6067 17.5844 29.8245 15.8324 29.8167 15.8148 cv
29.7625 15.6957 29.8147 15.5546 29.9339 15.5004 cv
30.053 15.4452 30.1936 15.4979 30.2483 15.6176 cv
30.283 15.6937 31.0979 17.5092 30.7556 19.8119 cv
30.7381 19.9301 30.6365 20.0145 30.5213 20.0145 cv
cp
f
33.1526 13.4638 mo
33.1155 13.4638 33.0779 13.455 33.0427 13.4369 cv
32.4788 13.142 31.6155 13.3549 31.6072 13.3563 cv
31.4827 13.3871 31.3509 13.3119 31.3186 13.185 cv
31.2864 13.058 31.3631 12.9286 31.49 12.8964 cv
31.532 12.8861 32.5354 12.6366 33.2625 13.016 cv
33.3787 13.0766 33.4236 13.2201 33.3631 13.3363 cv
33.3206 13.4174 33.2381 13.4638 33.1526 13.4638 cv
cp
f
26.1619 14.1478 mo
26.1018 14.1478 26.0423 14.1254 25.9959 14.0805 cv
25.9021 13.9887 25.9007 13.8383 25.992 13.7445 cv
26.5657 13.1576 27.596 13.0829 27.6394 13.08 cv
27.7815 13.0658 27.8826 13.1708 27.8919 13.3007 cv
27.9007 13.4315 27.8015 13.5448 27.6712 13.5536 cv
27.6624 13.5541 26.7771 13.6205 26.3318 14.0766 cv
26.2849 14.1239 26.2234 14.1478 26.1619 14.1478 cv
cp
f
24.2571 15.7162 mo
24.2571 15.7162 26.406 14.2626 26.2771 12.058 cv
26.1487 9.85293 25.6638 9.29043 25.6638 9.29043 cv
25.6638 9.29043 27.8743 10.4652 30.6228 9.63711 cv
33.7327 8.69961 34.8513 5.70547 33.1555 4.53994 cv
31.2649 3.24062 27.2664 3.79043 27.2664 3.79043 cv
27.2664 3.79043 23.8919 2.75869 20.7522 6.58144 cv
17.6121 10.4047 19.6907 15.6737 19.6907 15.6737 cv
19.6907 15.6737 20.7639 13.9105 24.2571 15.7162 cv
cp
f
30.0706 22.3583 mo
28.866 22.3583 27.8933 21.3671 27.846 21.3183 cv
27.7551 21.224 27.7576 21.0736 27.8518 20.9828 cv
27.9456 20.8925 28.0965 20.8944 28.1873 20.9882 cv
28.199 20.9999 29.3596 22.1786 30.5535 21.8119 cv
30.6775 21.7753 30.8118 21.8441 30.8499 21.9696 cv
30.888 22.0951 30.8176 22.2274 30.6922 22.266 cv
30.4807 22.3305 30.2727 22.3583 30.0706 22.3583 cv
cp
f
32.8841 5.97549 mo
32.8841 5.97549 34.9519 7.86513 35.4368 10.1684 cv
35.9212 12.4716 35.4368 14.4223 35.4368 14.4223 cv
34.971 14.4159 li
34.971 14.4159 33.8562 8.83047 32.054 8.31826 cv
30.2517 7.80605 32.8841 5.97549 32.8841 5.97549 cv
cp
f
14.9153 85.4345 mo
14.8386 85.4345 14.763 85.3979 14.7156 85.33 cv
14.6389 85.2196 14.6658 85.0678 14.7761 84.9911 cv
19.1033 81.9745 20.2356 77.5805 20.2464 77.5365 cv
20.2781 77.4066 20.409 77.3246 20.5413 77.3588 cv
20.6717 77.391 20.7512 77.5229 20.719 77.6532 cv
20.6731 77.8402 19.5379 82.2645 15.0545 85.3905 cv
15.012 85.4203 14.9636 85.4345 14.9153 85.4345 cv
cp
.25098 .313726 .498039 rgb
f
87.0305 181.305 mo
87.3753 181.265 87.6121 180.931 87.5584 180.572 cv
87.3035 178.871 86.3733 174.116 83.7298 172.055 cv
80.4807 169.522 73.595 168.405 71.115 166.711 cv
68.635 165.016 65.9002 160.987 64.388 161.712 cv
62.8758 162.437 59.9866 165.843 55.9158 165.273 cv
51.8455 164.703 49.9807 163.679 48.864 164.646 cv
47.7468 165.614 46.8606 179.439 47.3157 180.271 cv
47.7713 181.103 82.9065 181.779 87.0305 181.305 cv
cp
.360784 .411765 .647059 rgb
f
70.4016 169.137 mo
70.2888 169.137 70.1878 169.058 70.1638 168.944 cv
70.136 168.812 70.22 168.683 70.3513 168.656 cv
70.4207 168.641 77.2874 167.146 77.1306 163.581 cv
77.1106 163.123 76.99 162.851 76.7722 162.774 cv
76.1551 162.555 74.803 163.492 73.4173 164.718 cv
72.137 166.254 70.6736 167.476 70.5569 167.573 cv
70.4588 167.655 70.3152 167.646 70.2263 167.555 cv
70.138 167.463 70.1355 167.319 70.22 167.224 cv
70.471 166.942 71.7019 165.58 73.0891 164.354 cv
74.2112 163.008 75.158 161.453 74.7962 160.326 cv
74.7576 160.206 74.676 160.004 74.5613 159.998 cv
73.8352 159.998 71.9978 163.172 70.6238 166.264 cv
70.5696 166.387 70.4241 166.443 70.303 166.387 cv
70.18 166.333 70.1248 166.189 70.1795 166.066 cv
70.6717 164.959 73.2215 159.446 74.5877 159.512 cv
74.8001 159.524 75.0896 159.648 75.2591 160.177 cv
75.5457 161.07 75.1687 162.148 74.5227 163.201 cv
75.4685 162.53 76.3587 162.11 76.9353 162.316 cv
77.3577 162.466 77.5872 162.885 77.617 163.559 cv
77.7913 167.536 70.7517 169.068 70.4519 169.131 cv
70.4348 169.135 70.4182 169.137 70.4016 169.137 cv
cp
1 1 1 rgb
f
22.4505 170.964 mo
21.3157 170.964 20.3948 170.529 20.3762 170.52 cv
20.2556 170.461 20.2053 170.316 20.2639 170.195 cv
20.323 170.075 20.4671 170.023 20.5886 170.082 cv
20.7205 170.145 23.8328 171.605 25.3635 168.596 cv
25.679 167.976 25.6892 167.659 25.594 167.569 cv
25.2381 167.231 23.3465 168.007 21.7981 168.916 cv
21.6926 168.978 21.5564 168.951 21.4812 168.853 cv
21.407 168.755 21.4173 168.617 21.5061 168.531 cv
22.3821 167.683 24.6487 165.185 24.6155 163.819 cv
24.6096 163.567 24.5257 163.374 24.3582 163.227 cv
24.2088 163.096 24.0501 163.053 23.8587 163.093 cv
22.6643 163.347 20.9641 166.516 20.4099 167.716 cv
20.3538 167.839 20.2107 167.894 20.0872 167.835 cv
19.9651 167.779 19.9119 167.634 19.9685 167.512 cv
20.1829 167.048 22.1106 162.966 23.7581 162.617 cv
24.094 162.545 24.4143 162.629 24.6795 162.862 cv
24.9505 163.1 25.0926 163.418 25.1023 163.807 cv
25.1306 164.996 23.8435 166.688 22.8777 167.787 cv
24.0017 167.243 25.4055 166.725 25.9275 167.215 cv
26.3904 167.651 25.9436 168.528 25.7971 168.816 cv
24.9241 170.532 23.5813 170.964 22.4505 170.964 cv
cp
f
47.9387 71.141 mo
47.9387 71.141 46.201 51.6679 43.4114 40.8441 cv
40.5188 29.6195 38.6492 26.7763 38.6492 26.7763 cv
33.6804 26.7763 li
33.6804 26.7763 36.2937 33.2851 37.2571 37.5429 cv
38.2205 41.8007 39.0354 46.6068 39.0354 46.6068 cv
27.1892 46.9018 li
24.5447 26.9872 li
24.5447 26.9872 22.8582 27.1825 21.3509 27.5614 cv
19.844 27.9403 19.844 27.9403 19.844 27.9403 cv
19.844 27.9403 24.4309 53.119 15.4739 57.8603 cv
6.51638 62.6015 13.7981 66.5844 13.7981 66.5844 cv
14.7737 76.3573 li
14.7737 76.3573 45.7478 78.7206 47.9387 71.141 cv
cp
.639216 .482353 .564706 rgb
f
13.4383 83.8925 mo
18.1995 52.121 li
2.31863 55.9862 li
2.31863 55.9862 1.91531 70.0751 3.57986 85.5238 cv
5.2449 100.973 13.4383 83.8925 13.4383 83.8925 cv
cp
.956863 .517647 .384314 rgb
f
1.4822 59.4965 mo
1.4822 59.4965 1.16726 47.0687 6.81911 37.9691 cv
12.471 28.87 21.3509 27.5614 21.3509 27.5614 cv
20.1907 60.8368 li
1.4822 59.4965 li
cp
.572549 .705882 .917647 rgb
f
26.4812 50.0819 mo
26.3499 50.0819 26.2415 49.977 26.2381 49.8451 cv
26.2342 49.7108 26.3401 49.5985 26.4744 49.5951 cv
41.1057 49.1889 li
41.2439 49.1884 41.3523 49.2934 41.3557 49.4252 cv
41.3596 49.5595 41.2537 49.6718 41.1194 49.6752 cv
26.4881 50.0814 li
26.4856 50.0819 26.4832 50.0819 26.4812 50.0819 cv
cp
.25098 .313726 .498039 rgb
f
118.349 177.576 mo
118.15 177.683 li
117.252 178.167 116.133 177.831 115.649 176.934 cv
59.2488 72.2689 li
58.7654 71.3715 59.1009 70.2519 59.9983 69.768 cv
60.198 69.6605 li
61.0955 69.1767 62.2151 69.5121 62.699 70.4101 cv
119.099 175.075 li
119.583 175.973 119.247 177.092 118.349 177.576 cv
cp
.968627 .701961 .411765 rgb
f
140.063 180.998 mo
108.678 180.998 li
106.921 180.998 105.496 179.574 105.496 177.817 cv
105.496 176.06 106.921 174.636 108.678 174.636 cv
140.063 174.636 li
141.82 174.636 143.244 176.06 143.244 177.817 cv
143.244 179.574 141.82 180.998 140.063 180.998 cv
cp
f
116.831 162.922 mo
116.745 162.922 116.662 162.876 116.617 162.794 cv
106.807 144.774 li
106.743 144.657 106.787 144.509 106.905 144.444 cv
107.021 144.382 107.171 144.423 107.235 144.542 cv
117.045 162.562 li
117.11 162.68 117.066 162.828 116.948 162.892 cv
116.911 162.912 116.871 162.922 116.831 162.922 cv
cp
1 1 1 rgb
f
139.192 176.372 mo
135.14 176.372 li
135.006 176.372 134.897 176.263 134.897 176.128 cv
134.897 175.994 135.006 175.885 135.14 175.885 cv
139.192 175.885 li
139.326 175.885 139.436 175.994 139.436 176.128 cv
139.436 176.263 139.326 176.372 139.192 176.372 cv
cp
f
73.7219 83.9462 mo
73.9002 84.5434 73.8928 85.1776 73.7752 85.7895 cv
73.3772 87.8603 71.2361 93.4638 69.0066 93.4994 cv
66.8704 93.5331 67.9636 90.3837 67.9636 90.3837 cv
67.9636 90.3837 66.5755 92.7455 65.2893 91.2489 cv
64.2156 89.9989 65.0398 88.4325 65.0398 88.4325 cv
65.0398 88.4325 63.3606 90.7509 62.4451 88.351 cv
61.5291 85.9506 64.2322 80.37 65.8123 78.914 cv
67.3928 77.4574 68.2766 80.5346 68.2766 80.5346 cv
68.2766 80.5346 70.1878 79.1894 71.0823 80.1029 cv
72.0291 81.0697 71.093 82.7064 71.093 82.7064 cv
71.093 82.7064 73.0803 81.7978 73.7219 83.9462 cv
cp
.956863 .517647 .384314 rgb
f
64.6189 88.9716 mo
64.5838 88.9716 64.5486 88.9643 64.5154 88.9477 cv
64.3972 88.8905 64.3479 88.7484 64.4055 88.6308 cv
67.8469 81.5438 li
67.9041 81.4252 68.0467 81.3754 68.1638 81.434 cv
68.282 81.4911 68.3313 81.6332 68.2737 81.7509 cv
64.8323 88.8378 li
64.7913 88.9223 64.7068 88.9716 64.6189 88.9716 cv
cp
0 0 0 rgb
f
67.9636 90.621 mo
67.9339 90.621 67.9036 90.6156 67.8743 90.6034 cv
67.7527 90.5541 67.6946 90.4154 67.7439 90.2943 cv
70.8733 82.6171 li
70.9226 82.495 71.0598 82.435 71.1824 82.4867 cv
71.304 82.536 71.3626 82.6747 71.3128 82.7958 cv
68.1834 90.473 li
68.1458 90.5653 68.0574 90.621 67.9636 90.621 cv
cp
f
76.7454 104.738 mo
81.197 104.738 li
81.197 104.738 96.8885 108.541 107.416 123.665 cv
117.51 138.167 114.878 167.242 114.878 167.242 cv
111.015 168.336 li
76.7454 104.738 li
cp
.360784 .411765 .647059 rgb
f
107.131 155.045 mo
107.045 155.045 106.962 154.999 106.918 154.919 cv
85.7337 116.247 li
85.6687 116.129 85.7122 115.981 85.8299 115.916 cv
85.9485 115.852 86.0965 115.895 86.1604 116.013 cv
107.345 154.684 li
107.409 154.803 107.366 154.951 107.248 155.015 cv
107.211 155.036 107.171 155.045 107.131 155.045 cv
cp
.25098 .313726 .498039 rgb
f
28.9383 30.7685 mo
26.6087 30.7685 24.7825 29.454 24.6936 29.3891 cv
24.5852 29.31 24.5618 29.1576 24.6414 29.0492 cv
24.72 28.9408 24.8718 28.9174 24.9812 28.996 cv
25.0047 29.0131 27.3601 30.703 29.9998 30.1786 cv
32.6043 29.6615 33.2849 28.0849 33.3128 28.018 cv
33.364 27.8944 33.5071 27.8349 33.6297 27.8856 cv
33.7537 27.9359 33.8137 28.077 33.7635 28.2016 cv
33.7327 28.2782 32.9724 30.0849 30.0945 30.6562 cv
29.6995 30.7348 29.3123 30.7685 28.9383 30.7685 cv
cp
f
8.99538 79.7436 mo
12.0393 81.1527 14.2732 83.8646 15.3206 87.0517 cv
15.989 89.0868 16.6092 91.4022 16.4534 92.6234 cv
16.4163 92.9149 16.3509 93.1977 16.2703 93.4608 cv
16.1228 93.9437 15.8743 94.6879 15.5408 95.2768 cv
15.1643 95.9428 14.177 95.871 13.8689 95.1708 cv
13.6155 94.5956 li
13.6155 94.5956 11.305 98.2807 10.0344 98.4184 cv
8.76345 98.5556 8.0696 96.0053 8.0696 96.0053 cv
8.0696 96.0053 2.69949 97.2753 .642357 95.8988 cv
-1.41477 94.5219 1.82497 81.8998 5.31765 79.9823 cv
6.62771 79.2636 7.44363 79.0248 8.99538 79.7436 cv
cp
.956863 .517647 .384314 rgb
f
13.616 94.8329 mo
13.4568 94.8153 13.364 94.6972 13.3797 94.5668 cv
13.6565 92.2841 li
13.6721 92.1542 13.7908 92.0653 13.9212 92.077 cv
14.051 92.0932 14.1438 92.2113 14.1282 92.3417 cv
13.8513 94.6244 li
13.8367 94.7445 13.7342 94.8329 13.616 94.8329 cv
cp
0 0 0 rgb
f
72.9373 265.847 mo
72.9373 265.847 77.3826 265.447 79.823 267.286 cv
82.2635 269.123 84.8391 275.019 84.0008 276.095 cv
83.1619 277.17 73.0462 271.591 73.0462 271.591 cv
72.9373 265.847 li
cp
.956863 .517647 .384314 rgb
f
61.1096 241.091 mo
61.1096 241.091 62.8806 249.037 68.8997 257.513 cv
74.9182 265.989 78.4075 270.599 78.4075 270.599 cv
69.1048 275.097 li
69.1048 275.097 48.9627 265.4 50.616 253.587 cv
52.2688 241.775 61.1096 241.091 61.1096 241.091 cv
cp
f
56.2727 231.242 mo
68.4553 250.276 li
55.074 259.148 li
55.074 259.148 51.4417 235.79 56.2727 231.242 cv
cp
.360784 .411765 .647059 rgb
f
110.708 355.648 mo
110.708 355.648 108.06 368.067 114.743 370.491 cv
121.425 372.914 129.902 371.722 131.466 372.315 cv
133.03 372.908 129.334 373.909 129.334 373.909 cv
129.334 373.909 137.58 375.326 142.414 371.06 cv
147.248 366.794 138.899 347.718 123.434 349.554 cv
109.713 351.184 110.708 355.648 110.708 355.648 cv
cp
.937255 .643137 .34902 rgb
f
112.041 355.167 mo
112.041 355.167 110.233 366.496 116.915 368.92 cv
123.598 371.344 131.235 371.243 132.799 371.835 cv
134.363 372.428 130.667 373.429 130.667 373.429 cv
130.667 373.429 138.913 374.845 143.747 370.579 cv
148.581 366.314 140.231 347.238 124.767 349.075 cv
111.046 350.704 112.041 355.167 112.041 355.167 cv
cp
.968627 .701961 .411765 rgb
f
41.1404 206.378 mo
41.1404 206.378 36.6116 202.085 30.032 204.441 cv
23.4514 206.796 24.3196 213.319 24.3196 213.319 cv
24.3196 213.319 18.617 218.467 19.8562 224.719 cv
21.0965 230.971 30.6419 234.262 36.0969 228.339 cv
41.5515 222.416 35.6009 215.357 35.6009 215.357 cv
35.6009 215.357 41.2244 216.251 41.1404 206.378 cv
cp
0 0 0 rgb
f
42.0467 308.615 mo
63.1912 355.688 li
73.7674 351.058 li
60.5901 304.489 li
42.0467 308.615 li
cp
.956863 .517647 .384314 rgb
f
20.3294 310.5 mo
23.5379 361.818 li
34.8787 361.046 li
38.8347 312.895 li
20.3294 310.5 li
cp
f
54.1985 269.446 mo
54.1985 269.446 77.6658 343.467 77.4676 344.8 cv
77.2693 346.133 54.1985 354.662 54.1985 354.662 cv
38.8347 303.544 li
40.448 273.742 li
54.1985 269.446 li
cp
.639216 .482353 .564706 rgb
f
27.2327 260.972 mo
27.2327 260.972 22.0261 271.522 20.9104 279.729 cv
19.7947 287.936 16.0667 353.993 16.0667 354.922 cv
16.0667 355.852 43.5032 356.115 43.5032 356.115 cv
43.5032 356.115 43.0374 281.986 43.5032 281.242 cv
43.969 280.497 54.1985 269.446 54.1985 269.446 cv
49.1033 265.18 li
27.2327 260.972 li
cp
f
54.2971 213.916 mo
54.2971 213.916 57.5833 207.54 57.5662 205.788 cv
57.5496 204.037 50.7674 200.662 44.6555 202.373 cv
38.5432 204.085 36.9334 211.486 37.7049 214.784 cv
39.6922 223.275 47.1443 220.745 47.1443 220.745 cv
47.1443 220.745 58.6067 219.214 54.2971 213.916 cv
cp
0 0 0 rgb
f
27.0623 261.99 mo
27.0623 261.99 33.7415 227.22 35.9729 225.5 cv
38.2044 223.781 50.9168 224.859 56.2727 231.242 cv
59.2415 234.779 54.1985 269.446 54.1985 269.446 cv
27.0623 261.99 li
cp
.360784 .411765 .647059 rgb
f
51.8318 222.744 mo
51.8118 222.899 li
51.3245 225.806 li
50.9514 228.086 li
50.9514 228.086 51.0823 228.643 48.4353 228.145 cv
44.8899 227.462 43.9246 225.786 43.9246 225.786 cv
44.429 220.394 li
45.4876 220.733 li
51.8318 222.744 li
cp
.956863 .517647 .384314 rgb
f
51.8118 222.899 mo
51.3245 225.806 li
49.6131 225.383 46.5423 224.245 45.5984 221.355 cv
45.5276 221.12 45.4866 220.913 45.4861 220.745 cv
51.8064 222.853 li
51.8118 222.899 li
cp
0 0 0 rgb
f
54.6541 209.047 mo
54.6541 209.047 57.0501 217.064 55.3294 221.194 cv
53.6092 225.324 49.7957 224.174 47.5662 223.063 cv
45.3362 221.952 44.429 220.39 44.429 220.39 cv
44.429 220.39 42.1614 220.863 40.9524 218.661 cv
39.7434 216.457 40.9241 214.242 42.2322 213.861 cv
43.5408 213.48 44.9094 214.558 44.9094 214.558 cv
44.0208 212.205 li
44.0208 212.205 50.2683 201.56 54.6541 209.047 cv
cp
.956863 .517647 .384314 rgb
f
53.1531 218.67 mo
53.1199 218.67 53.0867 218.663 53.0545 218.649 cv
52.9353 218.594 52.8826 218.454 52.9373 218.334 cv
53.5506 216.99 52.698 215.336 52.6892 215.32 cv
52.6282 215.204 52.6726 215.06 52.7888 214.999 cv
52.9041 214.939 53.0486 214.983 53.1092 215.099 cv
53.1492 215.174 54.0803 216.973 53.3689 218.532 cv
53.3294 218.619 53.2429 218.67 53.1531 218.67 cv
cp
0 0 0 rgb
f
44.1575 218.079 mo
44.0843 218.079 44.012 218.044 43.9656 217.981 cv
42.1819 215.525 li
42.1048 215.418 42.1282 215.27 42.2342 215.193 cv
42.3411 215.117 42.4885 215.14 42.5657 215.245 cv
44.3494 217.702 li
44.4265 217.808 44.4031 217.956 44.2971 218.034 cv
44.2547 218.064 44.2058 218.079 44.1575 218.079 cv
cp
f
42.0467 217.209 mo
41.9177 217.209 41.8123 217.107 41.8093 216.977 cv
41.8064 216.846 41.9104 216.738 42.0413 216.735 cv
43.4978 216.703 li
43.6526 216.688 43.7376 216.803 43.7405 216.935 cv
43.7434 217.066 43.6394 217.174 43.5086 217.177 cv
42.052 217.209 li
42.0501 217.209 42.0481 217.209 42.0467 217.209 cv
cp
f
49.326 219.11 mo
49.4544 219.419 49.6834 219.81 50.0745 220.073 cv
50.4866 220.349 50.97 220.21 51.2893 220.057 cv
49.326 219.11 li
cp
50.6087 220.709 mo
50.3479 220.709 50.0735 220.644 49.8098 220.467 cv
48.8987 219.855 48.7151 218.745 48.7078 218.699 cv
48.6941 218.611 48.7298 218.524 48.8006 218.471 cv
48.8718 218.418 48.9656 218.411 49.0452 218.448 cv
51.8904 219.82 li
51.9641 219.855 52.0144 219.926 52.0232 220.007 cv
52.0325 220.089 51.9988 220.169 51.9343 220.22 cv
51.9007 220.246 51.304 220.709 50.6087 220.709 cv
cp
f
49.1033 212.502 mo
49.0564 212.502 49.0095 212.489 48.9685 212.46 cv
48.8606 212.386 48.8333 212.239 48.908 212.13 cv
49.5496 211.2 50.7815 211.623 50.8328 211.642 cv
50.9563 211.686 51.0208 211.821 50.9773 211.944 cv
50.9339 212.067 50.7986 212.134 50.6751 212.089 cv
50.637 212.078 49.7332 211.772 49.2986 212.4 cv
49.2527 212.466 49.1785 212.502 49.1033 212.502 cv
cp
f
55.074 212.383 mo
55.0081 212.383 54.9426 212.356 54.8958 212.302 cv
54.8914 212.297 54.4636 211.819 54.0125 211.817 cv
53.8421 211.807 53.658 211.902 53.5008 212.078 cv
53.4124 212.175 53.2625 212.185 53.1653 212.096 cv
53.0676 212.009 53.0593 211.859 53.1463 211.761 cv
53.3943 211.484 53.6853 211.342 54.0105 211.342 cv
54.6829 211.346 55.2298 211.963 55.2527 211.99 cv
55.3386 212.088 55.3289 212.238 55.2302 212.324 cv
55.1853 212.364 55.1297 212.383 55.074 212.383 cv
cp
f
54.323 215.594 mo
54.1936 215.594 54.0882 215.491 54.0857 215.361 cv
54.0598 213.92 li
54.0589 213.854 54.0852 213.79 54.1331 213.745 cv
54.7586 213.147 li
54.8533 213.057 55.0047 213.06 55.094 213.155 cv
55.1848 213.249 55.1814 213.4 55.0867 213.491 cv
54.5364 214.016 li
54.5603 215.353 li
54.5628 215.484 54.4583 215.592 54.3274 215.594 cv
54.326 215.594 54.3245 215.594 54.323 215.594 cv
cp
f
54.4715 270.306 mo
54.4715 270.306 57.4251 249.279 56.4197 239.754 cv
55.4143 230.23 54.2971 229.206 54.2971 229.206 cv
54.2971 229.206 51.4412 226.971 51.2415 227.254 cv
51.0413 227.538 51.9451 234.708 52.1428 237.341 cv
52.2874 239.259 52.3689 242.319 52.3689 242.319 cv
43.2659 240.591 li
43.9246 225.022 li
43.9246 225.022 41.6843 224.937 40.448 224.84 cv
39.2122 224.743 39.2122 224.743 39.2122 224.743 cv
36.2923 251.294 li
27.7259 265.465 li
54.4715 270.306 li
cp
.639216 .482353 .564706 rgb
f
50.073 215.389 mo
49.9417 215.389 49.8352 215.283 49.8357 215.152 cv
49.8382 213.711 li
49.8382 213.637 49.8728 213.567 49.9319 213.522 cv
50.822 212.846 li
50.926 212.768 51.076 212.787 51.1546 212.892 cv
51.2342 212.996 51.2136 213.145 51.1092 213.225 cv
50.3128 213.829 li
50.3103 215.152 li
50.3103 215.284 50.2039 215.389 50.073 215.389 cv
cp
0 0 0 rgb
f
44.9094 214.558 mo
44.9094 214.558 48.447 213.285 49.9558 211.049 cv
51.4646 208.814 51.6638 207.621 51.6638 207.621 cv
51.6638 207.621 51.948 209.251 53.1101 209.777 cv
54.2727 210.301 55.0198 210.44 55.0198 210.44 cv
55.5047 212.768 li
55.6868 207.39 li
55.6868 207.39 52.6336 205.215 52.1946 205.159 cv
51.7556 205.102 46.0896 205.38 45.7263 205.672 cv
45.3631 205.965 43.0633 210.041 43.0633 210.041 cv
42.6917 211.968 li
44.9094 214.558 li
cp
f
35.9729 225.5 mo
35.9729 225.5 17.3484 236.129 18.5623 251.538 cv
20.3372 274.067 56.5071 258.12 56.5071 258.12 cv
51.2415 250.363 li
51.2415 250.363 35.6868 249.247 34.5384 248.329 cv
32.3196 246.555 35.9729 225.5 35.9729 225.5 cv
cp
.956863 .517647 .384314 rgb
f
39.3352 373.674 mo
39.3352 375.069 38.8665 376.664 37.907 377.055 cv
36.9583 377.456 29.1814 378.304 22.387 377.713 cv
15.8928 377.144 14.3308 374.221 14.8889 372.804 cv
15.1458 372.134 15.4246 371.509 15.6365 371.04 cv
15.8372 370.561 16.0828 370.125 16.3728 369.724 cv
17.0872 368.743 18.4705 366.734 18.8274 365.707 cv
19.2962 364.313 20.0213 361.323 20.5012 359.928 cv
20.9807 358.534 23.2444 357.125 23.2444 357.125 cv
23.2444 357.125 34.5598 356.537 35.5193 357.339 cv
36.4788 358.131 37.907 365.506 37.907 366.499 cv
37.907 367.504 li
37.907 368.519 38.6878 370.651 39.0896 372.246 cv
39.1565 372.447 39.201 372.648 39.2346 372.826 cv
39.2903 373.161 39.3352 373.44 39.3352 373.674 cv
cp
.360784 .411765 .647059 rgb
f
102.057 354.049 mo
101.744 354.697 70.8269 373.62 69.7337 373.463 cv
69.343 373.408 68.3836 371.98 67.1897 369.827 cv
65.0139 365.91 62.7864 358.202 61.2801 353.538 cv
61.2801 353.538 72.2107 347.076 73.5496 347.032 cv
74.8997 346.987 90.7879 348.582 90.7879 348.582 cv
90.7879 348.582 95.6301 347.411 98.5647 348.739 cv
99.4236 349.129 100.116 349.698 100.64 350.312 cv
101.912 351.795 102.28 353.603 102.057 354.049 cv
cp
f
39.3352 373.674 mo
39.3352 375.069 38.8665 376.664 37.907 377.055 cv
36.9583 377.456 29.1814 378.304 22.387 377.713 cv
15.8928 377.144 14.3308 374.221 14.8889 372.804 cv
15.1458 372.134 15.4246 371.509 15.6365 371.04 cv
16.9866 371.811 20.3113 373.027 27.9768 373.294 cv
33.0198 373.462 36.635 372.915 39.0896 372.246 cv
39.1565 372.447 39.201 372.648 39.2346 372.826 cv
39.2903 373.161 39.3352 373.44 39.3352 373.674 cv
cp
.968627 .701961 .411765 rgb
f
102.057 354.049 mo
101.744 354.697 70.8269 373.62 69.7337 373.463 cv
69.343 373.408 68.3836 371.98 67.1897 369.827 cv
100.64 350.312 li
101.912 351.795 102.28 353.603 102.057 354.049 cv
cp
f
43.5032 307.634 mo
43.3689 307.634 43.26 307.526 43.26 307.391 cv
43.26 281.242 li
43.26 281.134 43.3299 281.04 43.4324 281.009 cv
53.0774 278.069 li
53.2049 278.024 53.3416 278.102 53.3811 278.23 cv
53.4202 278.359 53.3474 278.495 53.219 278.534 cv
43.7464 281.421 li
43.7464 307.391 li
43.7464 307.526 43.6375 307.634 43.5032 307.634 cv
cp
f
26.5764 272.398 mo
25.9983 272.398 25.6306 272.288 25.6184 272.284 cv
25.491 272.244 25.4202 272.107 25.4602 271.979 cv
25.5003 271.852 25.6385 271.785 25.7649 271.82 cv
25.9134 271.867 29.4285 272.889 31.7835 267.579 cv
31.8377 267.456 31.9807 267.403 32.1043 267.455 cv
32.2273 267.51 32.2825 267.654 32.2278 267.777 cv
30.448 271.79 27.9334 272.398 26.5764 272.398 cv
cp
f
48.8445 228.579 mo
45.0393 228.579 43.72 225.922 43.7049 225.89 cv
43.6472 225.769 43.6985 225.624 43.8196 225.567 cv
43.9387 225.507 44.0852 225.559 44.1438 225.68 cv
44.2093 225.816 45.8108 228.994 50.8982 227.849 cv
51.0301 227.82 51.1594 227.902 51.1892 228.033 cv
51.219 228.163 51.1365 228.294 51.0056 228.324 cv
50.2097 228.503 49.491 228.579 48.8445 228.579 cv
cp
1 1 1 rgb
f
33.3338 365.18 mo
33.3084 365.179 25.6673 364.388 25.6673 364.388 cv
25.5686 364.377 25.4861 364.309 25.4583 364.213 cv
25.4309 364.119 25.4641 364.016 25.5418 363.954 cv
30.43 360.117 li
30.5364 360.035 30.6892 360.053 30.7718 360.158 cv
30.8548 360.263 30.8362 360.416 30.7307 360.499 cv
26.3152 363.966 li
33.3582 364.695 li
33.492 364.708 33.5891 364.829 33.5755 364.962 cv
33.5623 365.087 33.4568 365.18 33.3338 365.18 cv
cp
f
76.1883 353.624 mo
76.1306 353.624 76.073 353.604 76.0276 353.564 cv
75.9495 353.496 75.9236 353.385 75.9632 353.288 cv
78.3269 347.554 li
78.3782 347.43 78.5203 347.371 78.6448 347.422 cv
78.7688 347.473 78.8279 347.616 78.7771 347.74 cv
76.6843 352.816 li
85.2669 347.89 li
85.3831 347.826 85.532 347.864 85.5989 347.98 cv
85.6658 348.096 85.6258 348.246 85.5091 348.312 cv
76.3093 353.592 li
76.2718 353.614 76.2298 353.624 76.1883 353.624 cv
cp
f
117.308 352.888 mo
116.824 352.888 116.356 352.627 116.112 352.168 cv
56.6663 240.26 li
56.3147 239.597 56.5642 238.774 57.2229 238.42 cv
57.885 238.067 58.7034 238.317 59.0545 238.98 cv
118.501 350.888 li
118.852 351.55 118.603 352.374 117.944 352.727 cv
117.741 352.836 117.522 352.888 117.308 352.888 cv
cp
.407843 .713726 .847059 rgb
f
110.799 357.522 mo
124.982 349.537 li
125.704 349.13 125.959 348.215 125.553 347.494 cv
125.075 346.644 li
124.668 345.922 123.754 345.666 123.032 346.073 cv
108.849 354.058 li
108.127 354.464 107.871 355.379 108.278 356.101 cv
108.756 356.951 li
109.162 357.672 110.077 357.928 110.799 357.522 cv
cp
f
116.915 352.04 mo
116.83 352.04 116.748 351.996 116.703 351.916 cv
116.637 351.799 116.679 351.651 116.796 351.585 cv
123.742 347.675 li
123.86 347.609 124.008 347.651 124.073 347.768 cv
124.139 347.885 124.097 348.034 123.98 348.099 cv
117.034 352.009 li
116.997 352.031 116.956 352.04 116.915 352.04 cv
cp
1 1 1 rgb
f
143.107 364.842 mo
142.993 364.842 142.892 364.762 142.868 364.647 cv
141.804 359.317 137.873 356.023 137.834 355.99 cv
137.73 355.905 137.716 355.751 137.801 355.648 cv
137.887 355.543 138.039 355.53 138.143 355.615 cv
138.184 355.648 142.247 359.046 143.346 364.551 cv
143.372 364.683 143.286 364.811 143.155 364.837 cv
143.139 364.841 143.123 364.842 143.107 364.842 cv
cp
f
17.3489 251.68 mo
36.8064 248.907 li
38.1028 224.84 li
38.1028 224.84 17.3489 228.352 17.3489 251.68 cv
cp
.360784 .411765 .647059 rgb
f
36.0491 242.263 mo
36.0091 242.263 35.9632 242.27 35.9094 242.287 cv
35.7425 242.34 35.6218 242.454 35.5413 242.638 cv
35.0857 243.672 35.9993 246.352 36.6648 247.97 cv
36.8714 245.786 36.9094 242.89 36.2483 242.338 cv
36.2034 242.301 36.1424 242.263 36.0491 242.263 cv
cp
36.8064 249.15 mo
36.7127 249.15 36.6258 249.096 36.5857 249.009 cv
36.4939 248.811 34.3474 244.142 35.096 242.442 cv
35.2346 242.127 35.4588 241.919 35.763 241.824 cv
36.0598 241.729 36.3357 241.78 36.5603 241.965 cv
37.7708 242.975 37.1253 248.33 37.0476 248.938 cv
37.034 249.045 36.951 249.13 36.8435 249.147 cv
36.8313 249.149 36.8186 249.15 36.8064 249.15 cv
cp
1 1 1 rgb
f
51.2415 250.363 mo
51.2415 250.363 53.676 246.073 54.5496 245.05 cv
55.9998 243.354 58.1516 242.851 58.1516 242.851 cv
59.4304 245.463 li
59.4304 245.463 64.7908 242.588 65.6775 244.018 cv
66.6702 245.62 65.7815 249.138 68.0286 251.072 cv
69.2171 252.094 67.9422 254.987 63.9685 256.887 cv
60.7093 258.446 54.1985 258.735 54.1985 258.735 cv
51.2415 250.363 li
cp
.956863 .517647 .384314 rgb
f
56.4197 246.918 mo
56.326 246.918 56.2371 246.863 56.1995 246.77 cv
56.1507 246.649 56.2093 246.51 56.3308 246.461 cv
59.3416 245.244 li
59.4612 245.196 59.6018 245.252 59.6507 245.374 cv
59.6995 245.495 59.6409 245.634 59.5193 245.683 cv
56.5086 246.901 li
56.4798 246.912 56.4495 246.918 56.4197 246.918 cv
cp
0 0 0 rgb
f
72.01 277.495 mo
72.01 277.495 67.076 280.616 66.5847 277.546 cv
66.094 274.476 73.2869 267.01 76.3386 268.614 cv
79.3904 270.218 72.01 277.495 72.01 277.495 cv
cp
.956863 .517647 .384314 rgb
f
75.0305 279.227 mo
75.0305 279.227 70.096 282.348 69.6052 279.278 cv
69.1145 276.208 76.3074 268.742 79.3592 270.346 cv
82.4109 271.951 75.0305 279.227 75.0305 279.227 cv
cp
f
79.864 279.762 mo
79.1922 280.842 78.2547 281.771 77.0681 282.364 cv
76.0105 282.892 74.8367 283.093 74.3738 281.781 cv
73.448 279.157 78.4651 271.604 81.3723 272.585 cv
83.5384 273.316 81.1985 277.616 79.864 279.762 cv
cp
f
70.2127 277.844 mo
70.1551 277.844 70.0974 277.824 70.052 277.782 cv
69.9553 277.693 69.949 277.542 70.0379 277.447 cv
76.1253 270.824 li
76.2151 270.726 76.365 270.72 76.4607 270.809 cv
76.5574 270.898 76.5637 271.048 76.4749 271.144 cv
70.3875 277.767 li
70.3406 277.819 70.2766 277.844 70.2127 277.844 cv
cp
0 0 0 rgb
f
75.0305 279.464 mo
74.9798 279.464 74.9285 279.448 74.885 279.414 cv
74.7815 279.334 74.7625 279.185 74.843 279.081 cv
79.6658 272.867 li
79.7464 272.762 79.8943 272.745 79.9988 272.825 cv
80.1023 272.905 80.1214 273.054 80.0408 273.158 cv
75.218 279.372 li
75.1712 279.433 75.1013 279.464 75.0305 279.464 cv
cp
f
44.3631 221.097 mo
44.3631 221.097 37.2586 221.097 37.2395 213.036 cv
37.221 205.151 43.6096 202.309 45.4861 201.903 cv
48.9422 201.154 51.2415 202.204 51.2415 202.204 cv
51.2415 202.204 48.6492 204.46 46.659 208.12 cv
45.1345 210.923 44.9094 214.558 44.9094 214.558 cv
44.9094 214.558 40.6516 212.265 40.6516 216.614 cv
40.6516 220.409 44.429 220.39 44.429 220.39 cv
44.3631 221.097 li
cp
.360784 .411765 .647059 rgb
f
45.1301 208.648 mo
45.1087 208.648 45.0862 208.645 45.0647 208.639 cv
44.9353 208.603 44.8596 208.469 44.8958 208.339 cv
44.9275 208.224 45.7161 205.497 48.7923 203.095 cv
48.8982 203.012 49.051 203.031 49.1341 203.137 cv
49.2166 203.243 49.198 203.396 49.0921 203.478 cv
46.1497 205.777 45.3718 208.444 45.3645 208.47 cv
45.3343 208.578 45.2366 208.648 45.1301 208.648 cv
cp
.25098 .313726 .498039 rgb
f
50.9661 244.171 mo
50.949 244.171 50.9314 244.169 50.9143 244.165 cv
42.7234 242.395 li
42.5921 242.367 42.5086 242.238 42.5369 242.106 cv
42.5647 241.976 42.6941 241.889 42.826 241.92 cv
51.0169 243.691 li
51.1482 243.719 51.2317 243.848 51.2034 243.98 cv
51.179 244.093 51.0779 244.171 50.9661 244.171 cv
cp
.968627 .701961 .411765 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 24.2.0
%%For: ( ) ()
%%Title: (2202.w037.n003.175A.p1.175-temp_01.eps)
%%CreationDate: 2/3/2022 5:03 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6B3X+]pGi)`^9;=eK+3B.JrrN6,Y3!mKS1*`OA:H\^qhTTaX/\?TD^c]7[?a^]?+OZB+hF3RWciD2J:#c1V#ua?EVf(EfIh8
%;N=:"=h[Ee;PoaRo<82=be0n@L$aF`)-b`'ehf1SA_Ku:c$4tO@@N3ofKM2E1eQS-=RYUb)Ps[oc8Vb_<dQ-Xru'<b>JV1>#u^6/
%C:3RVQ)b+c$YYa[E/ojAC05;ZC-a6/Adg/rNiDQ<2RJ&Gn@^=/W0aO?EjuME_t$8+T"!s@4JiYd@Aa46L/A8A^%GWX1+Of+rlolD
%$dU<i:+PO-)YHnt=>d_Lnt>kg1Z/Mb)>"%2k29[J&=s*^C56GclICKqSbWtCZ'a6Z@S*%m\M0+:rs\R]5FGhWT`6U3pqKntniM4P
%;HCs&EHZO63/6>uY)reF#l&%=C=_]aN[BTB4:#`IC=!9D[[,laJ?m$Gi$J@g<sIqd`?c0=g9(lA[llr#;UY1mNoe=rIT!S#/.d96
%KKiL80>aA%[M5REXj2CW(JrU=7E1G)8%)j)B7&HLfQpK"F9$Y?Q2++7X[Y=P1-JVZ`G0o;NoLEFl5BmnlR_B&%l^Lo,f`O"MalCf
%ei&/Q@B6LloT+3b@Juj=8@)Tb)9]LcQ#\Xo-Oi"GAILe7qC[k(8/l8u,>!+lH=3JOl5oi>T(Ej4agDM(\^RRK<U))-VIaCVb>0]M
%C.e&A]i?NUfN*loa+(&fN#2BaorjfEi1\U+lP^I9*9XeW4TQ#$G17?6kM=i`4fBJEKpVAdP_V'<_()B"Jkc<bV?`qN_S9$[T,h*6
%#5hR=rcMNElhgH9T@]p*Ks-er:FusH=r'=S(9';QF'Ym0](jBiZ'suf2:jDqFf2s7FaP:sq!^YqI35Nc5$#RFp_U!mo2mT:a/8Yp
%50;um:9fUNMac6ok/ANF-l0?*:R\3*1ZC.b.5o`&/IS$-$W]X)n1Rg0\2:Sj%"Z:1=9jDo^BD/<#<,,^n1T5WT^XUX`Q7&A&LdQM
%Yi?ZR7_!D:`[T46X!)0O([Dcn=Ji&cP@mQF/f@[aQ^]c&$ij(qB?0&]j>EoY(&l$a#UB>fY*b:Z3BpGq_`([,@FUNRe8SoN&c^i<
%"H`EZs/O1N&cTaa#UB=[@PYPLEd7jKVWJ&N]]LJ63h@PU*ih$d1i=.V#(S&H;ra"NDbW-mU49BW!iUAY!Mnid3BotMnLmpQ?:PhM
%0AIEE@N>R_RVOP-.uDZo@kafrG1K?^q2QfJ/Ak/T(Q#"@A"Vr)\EAtlGr0e@(_%Q_+04Yr\U3apTC\,44>0[rCo0??Lq>(`&$p:p
%olD'cY#fO[SS;X-ecBj'?3<>cUujgXdOW(&D2mj&2/l;/S^b<-&j9M`AN_embY:g\THAP]U=*"*6L^c,/-"6[J*t#@%lAJM0'^.@
%O-KRQpW>^la.GLJ)Vn=VfdoAQ^%+rOa.I^^qub1O"YT)Ro$?#.J*t#@NtM==3KH#8^J&#6X?Z5*_C4c`m1]p4i%aP/]jeg@`M-UY
%Cra]p`I_r9\WB7`kfElgFc&W.G:Wd0f\@ql6l&UkPm'Z;U0'+#/5QqIfNJ,G:[r]O#4\p546L71UuqSW87>p+n?64,DJj+cXI[OI
%Ta!Et96c..5n*qYQSjT2UuV>qQ9337dZKQ]VJ5%[ggXRiK4V;*G*DS20^==Z'-:e-GoA!L]h3O0T5bpZjKa''T1YM/o+hFj-])$N
%Rd__d%<3_?Tc7T,+3"M,@T-[ZXQaAG*sV;do[,A6Ml`&;-B(2.$]kT8$:pejmk@Wka+DnoFXD*EGE$,ONgQ)*aZN6q\hHD\k2Kk%
%e1lsMY%:>cc8@!83<X\h@)r707i"5AF5U&E2N1M_A,'3n-L\c8+9#]X"mD1WC%CaY^]W+P(9i;`>B!:al^Fu=AO$g\+qDOenJ)A.
%hC>gUgp?:o`9H9.I\h(KW8K/T3BkM-e+"`WS]3H^s*HZ1Z!7BMM?jj/_q-I1YCk/Ta)q%i!;&p?'0$W>Wa>l<\D=J'7gM9;#Y0[?
%?jU?U:)_S.c6=[u)Lr%Pd]6#;(H(/Z$'70M?q!`jNYtTY7qE\0\,]h9\J'4n@(B%`@anNjN1M>/kpIF*\%mS$3lJ<])VHA'T^EQR
%YQD\aY=)fR)<l\l#Y5-C$Xd)Q"SH/!QS;4"oGenkYo?!rWmP,MKH/)2LR\['pp=S9)DS#*="IBO0Cm2g`*J$7QS%bQK?Cs=id+Gu
%%&&EE3i.QjB`b)\9=FR'8!bt,l4Il`[D9:[`ao@o0jR-Yf-J4a*&4B^Q_9#'EE2$uM)k/QK6g>P<KS2=_6T)%2o3!.CDq[0n@HW`
%U_]k\.*L]`&=sX9dc:GC*);;,A,nZYO4Y62!g@4]Ql?b+o]m]AE*;<T7H#<H$Ap<brb8>[G][5fLI;_a(^!&(!Gt=!n=RXmGf:7g
%IPs)qH3O$#d<n*GiXgEr"P(r?k@Hq(!RfuXZ:I<C=+?g-$kQA,4E0jb&m1Iq,)PPTlGe\BO=gO7)a"ZCF%qaRbbCo\eMN_@UCgT`
%6Ep=JB>c^B<Weqn<_u_=&3c2)74&m#aTul@\na:ULe+sZ`/-lCJ/.5M9T;ZncYBkEd`1?>o..Z`(pI,ke!PZ(S4.7#;Kn&D2+n:2
%1JU!2"Huge>VM8e1RCU%;7M@j<:V*NZs8usjolr9N$!:05>-+m8J+CYO++DdeTg1IKj%Q%U9k=:-X'_41TGQ=*&'5^A'5aSKL.B@
%61X+6=I"=ud^DRj5fdX(Fd+aThZ0TG\>"Ql`rumeFGgam$[p6nXVtQ1</JcMW[fJ\0=2p^Y=BG_B*=DL?;lLj@#?pWr:J>L/K+f!
%WJn,";9:NX_9F/8<uc?s&[hM@U@f$gj<C`d+aEsiBbFDuA4;PB,,i22X9::3=@F!5#Ps"JkbB<>5U"G5EZ!<4dKXMnYf\hCg8]EA
%2F\juQjZM%jt<dG*qbr`=:*4.U,ItHA49qW_ZH!CNOY"9TZG3i=V0k#D0`D37=66;H^>0td3id@!h*6@7W:a-Acf<TR@)X3WF[)O
%o[k;(lH0Mhf](@9dAB5UEVc+3m1@43XIr>KdKkgHMuMC#)/,%/M=H`s3>5m;_>#.u@*KT/TTAEu&s#4jJk7(b>f1jp,D^X;&.gE'
%,,HulNYU;`+]=+UKE0Dp7sq-:B8f]XhLr9fd-jtUShSD5MeKrkR0>/V)(^jO\N&]52FMa9'H7%W;,!R+]E-T?fN9VC&JkaGRQ7`o
%QrSNuJS'@m]b$t?rN8-&A!]PK/UL`icUO:rcWX&qWp`7_4oLuZ4'308M4+m5*n05X(uq6&2W1C`]N"d]M[4N`C$Z*A>0=f1!#(RK
%S(n$bB!XUj52d()/(>9uXH>_WC!kHEe?2t7`JAN4+c]8I5IT;;=Y0r+dRGYK$7oV3V!<dE>.-33(M$MYIkg7#6Rk:,ZY%PC+9S,c
%r+Le!8K72>S-'$X_5p!tSEjf@A2dK7fsp"5cYAo3j?_fJ]XaW+7<gNU++D5lD#1ItMR9<[)QpA!+sk46L?Cn-a,CRrj]WaI?nfGJ
%;CI)r#Wr#B/"[h:M`h^ld9"f(FCtrK8fB*8b4AT@9gRan6ff#UWB^gDlnq[!X\6)4el!hLGjJh3_mG5lEdDGU@a(a:*,;/c,l-C^
%l*rUak409jnWM[ET3&\""2aJ79mXfs.W>_E.22uF$?AO'Ok,jp8qQ+as"`jNM2n]kR`4T`7>-B;d'7oBW).";jJ;$OU9K8t:N#*Z
%2U/1Xbm]PGPOt:6)Y:bQNZaU`V%?`0]O7L3G_2O3Ac0_pLIW#TYf*!]^,1+A@Iu3GMF]Kq+CPfaYY9I^a.XF'35AFghg)mYN\NjE
%o.^Yu6nk*Ca02):b/p."O-$6c-W697[$0$G6tO=Sop(]'lqZRkr$19i7^:%.#48!PaAio:ccRMnV@L!-'k76Lia^EHW4[Iu:m`WP
%NR7;?bXO-M.#gS8R8/2FI#&(3T;Na`NlB1$n!R&\o.5L@pgsh->Sb"f5fc5r6UGNL"&VQ"osfiB(V't3CYbJ@s)Kg?<"ZH0^XRpg
%Ps0C88CGlK0LqXHZ!d0LVbs)nWG5V42N%h88&u?SPSA'H^]R"K0n*lL.Sbnq9nC7t.Aa:7A72t;$q$B7">*,BOoGm.c>doKYNZ'G
%Z?(1a2o'qoQ!8E<\gjkNe)eprSP&NTnGtNjX?q'oU9fhV;*C8?LN,]R.!=.;Up)m`d_>/cF^RLd,XKq`Z!aB1WJm2L"/I86:@]5J
%#&/UtPo+uT=3F&AgOf)XXaBi:+G9e3_h8jaU?EtZF"fL`\Z2?s_q^93C'0qeJkY8W\kNl%+d9Ed;'FF>*!n,2/A9>3g.36Z7?XAQ
%N'h%OLsuP3mo6BOifn`lc&3nRfS_5Z6(Wai+YrC0PW0lKT]q0X8.<#1TmZ%--V"uC/?V&d&KIER*?2rNjlM:50b5n/+pJh5f\2NG
%8L)&Z\7B]+G7@\"Z6BTt=;<(3(f0[%'IT6rmO:RsUJRD9'A'r\LY8EC\<#SVMV/rMKdfhd)eU.4n@=$X8t7^BJ"sLr"s0^QM9&-N
%:sb?bo6GnWV02roM@K-W`N_bl"Ub!c#h@=<ddL9Yk(]sI7QkAjKg'EsA.;f;pm4]1S@WeKFr_Tr?C;fZ_%3d0<7M=sBi1!X,>RIA
%.bV,D4U7"bU9n"O:sVrVi(AN2ip#,FWtJKoZ>FhB_<^i/-lc[SFPW\F!-+76mdfQU/L%5j:hYW-4o?K/2(<!PEfemTdoL*gXHF$"
%%/"#T,oRrp!1Q$fV`#QOaOH`Ti[Qi[Tg,<f7UkEc'17u=QaGG?\:Y62)-&/"MiF6HLLN1lj<"Ds"7J\L@?#ZiN`8XQgeO]fMD:F]
%`@;6MfTlDA:hiT8mr=`05S8W8";h<VNL[F.2<G:/H`P":\:qe0p)K<'oL^(ek^_he*<B3oJlLla?s'i8:*Er(9V\_^B><G(kX2tN
%CmGC>kE*V,=Oa%jUU+2-RuIOP0s4]$C-+pS</e<r?tamNMG"\1^\ODNi3WRQ.klKOhdY*;Z1WoN"]tgA0CP'D31]2?ot6[KAq5cb
%j$`a7cY+&>Oeu4W#/*(m01)4MCpUeOLiI)@OS#T-7+?JrCtGgdKT*FifaC>!_ke2=(#on4X:F&Ym3;Z)NQD(jGUlXQdO'NVn2?3Y
%g>KFSKusjX3F]a>FX_cI?agh#m0Ne=)L9IH.LmF5oan)2,:8%sJt:dS,A'A,Zk/-p7V3V0J^A13/K#;Q:_e!;Tk\0?l1b7$<c;X`
%5=D[pA1"q.a=GIFlqg*T8iNKZW<5@g;!Y><Yq*d*enF+q3?ZHmAl5!5X>kQ5,R;_B)91^$1/<65,XcoV]Ai>i[3uq_Nh<M'N;,'t
%7^)D3d$b\4kc^"ACA:XtW`W`fhF+&uo#e].&=A'@lmsthXpDC4mi$LH7T5^+/BIMZ^)fLr<U-uf_Hn,_Sqai>D8e4AQSq`5R=(Vp
%G?*ub*`nMn"&RRNogckjf0ig[3!TVpFno%JJUOS(7_XhbI/A/M?UqBV(u8c1EBqpP@S\,bV1B+LoF0<lK-'qZ`1YE=?X18-;+aq[
%&cUhVS`:tMn^%[.':YBUan1tAm#.)tb@H]/iicD?k"gOe<bPPV/_0qJiD6.319(HS3$V/-JjP^g'-%18W'Q/p^N/rHVko=sKkh^T
%?r,U<Ws>WtWap#Y)ANucRs[[OT]m+/Jj/Fm6N?USbp-t0_csh+=;XqF/qVf@6H;D@s1,=*6,s?Z\R1B#KK"3]]])m=_,gHe71QOj
%*U%XE\W4NiR^j-tY5T_h]&7s.4.eBWRlR4AjZWhe=X[fT]dK$:oI?W8im*KSC6Xr.k$'5q6UaV\\;\=TILcBI.*Xfd(e,SpEp*Vd
%="bnW[N$3>.$APT_N,K"RZ:A<Vc_/8W;oA,G\>%e5#_Lh%9/rU<60=+F0Z?KQ!@+b>US9JO;$)hBI5pt2@^B&I7KP(j_1?\$o5Nl
%&Bg$K3=t=]Cff<8^A<g9)4ObSl$L(A6XCbPbGh;".&;PR(<)*X[!Mj4/,1#F7uigG0iGt8i`,lNSe:iZS495f#]^604>0t.Sr2%M
%.ZbAK["M66^HAh1bX"`uZRRV\1YeplbPhh$lQ0KOkJX<**gGp]12Rju9K5rs9:.c$M9TRk;FS?'o]_W"71geg7W:CWA\f$ZM@r#q
%VeRq,#Wiq0pks;9^Fe_*=a+=g.nf;j7@t.(]K[80_T>01*6$ss_ou;tN&g.fD8&lb!sP'ScM?b;X[]^<VOmKFd'N\Tdr#*'\bK-C
%]\S)BPre'Gs7O-DIc_[><kIj?^")=)2sR<#^]$0Y/N6GAe6uJE1g6/O@6(`:neF@4Vrm2J8a;r`Pb8Q^*7`.6Q0.ur*>Y\A.noJ3
%BM0H?CQeCFn?gTCofD$Z[JKX%g1\Jek'BUFgoUeRTTu5V;2:X+n*hS&4S?;(MIG[bU-?Iq]*W/E?Du.7s#3o54\@OF*dMGL;etJ%
%:uRkjDQL2E,NtB;2_-9C,ie!=C:/*5$C^.C;C^;`[a.kWNCGcDl\aj;#34%n&[o>t:mh+TBr,,G>H.R=V%`RBC"/Sr,V-9P*]1.3
%=*+BOGh]3-];kqZ8/m(&gZiaIKE0fJBMkh27Y6Dj1s19(0QYb]rK![m<:LN[_T8a3ol<.ZSj2rF7ENGYM<=cCG1*<ig9odZ@jS`Q
%X&CHI_u64p:3_[NA1=,(W0?^:.FDn+o%eJe;+"e^ErO&s)nX/J%F7#ZD@$.7Dq@/gVBH@4ol1J;E=/4cpltVPWOqlEq;-4`@o-EM
%`O*!oX3*1,I^jm;?E@*fGbT(9HCnAl:N*^#[i=FjhA7Xf4ST]!IbsX/2)Y,PX]gL890h?7jeUW;JQ@i)@^aeo#4%N!/(JYjXA]Rj
%>2B7-&O"&sSY%="i8L1\1S7k-LG%n*rDgQ:eZPqDpGGt96&f[<codfp!5ULT!-'&\cH\KX+OLpZ)k8"8Ep#Oc1ofD\!L)>!c;pFt
%_6J8I8<n2sGd,VE!L&0h581j%oDV!gOL6&i1k%MSV^/n<`,>_0qJ&5e#0O0l`(mdadKNoX$?*rp\%3;+;<RZXd-[L5_KNDW6pg0r
%pB?Se*L;#\[SuGohnp^%)m=X-Z6a!?[tAf9[)6?'r72&69Hn0TlJECsou;HY!m]Tg!4JjJhIVe%E.,,-$Cg?(0Q2R$Fs._Ega4je
%'>KqFpHkVQ7^lA)f@^I*TW@BMFEN#a7:)g>SLj#\6eib+f4$cF7\^j0!cWQ#^s]90cg-8d-#F![,Zl[KBGP-[gcg;N6?nr&S[`]-
%iqlDS\U/J\m"m5OETK[.Prigd@+eVj)jU-8RCa*!qf_*78<XX-jq<?Z-GJ9RQ^dbj'45VWN/92Hn`Ba/[j8u0S$U/YRnEn0k]h0Z
%n9\9n57bnr+(MQ=QYanlpZb5qh`7ZZYEONIl5[/mj[/aU6<?8s1,It@mgCbVcmYFTHgS0:Zi\g2DS'0\lFH5+E4G;t`p%2!m+a;n
%0jR--,VlWPO$71h(m<N<ja/h=P"Fe5=mJ/V<(:nnA")=NpU[nriY&Gh?&\T9-2R1c+6V7&@XX.*B/N8f;q2hZF`T3D,Y7?:G?^t2
%.GQQ[alq/SrSF%g,6;2Vik![5[J"gN;%MtaQIP"CpBG#Gq!sDj]+`s+^0[!8FZAju1(ph,O@LddkaqR3h\'0,ah[\:!/t:ZDI`#k
%.eV)!ZJa*)5<"RM[8])MQCSjU6XfU4L1odFK0'8>-G(8l,`hB%b;!fGTN^U,_9jtM!=:U=`HC<I*"K&,`9-08Plq<W^'30alo3ff
%[1'`&%U,.CGqJA.+j<.cb!Wd[P#1?$*f6(KJ6`ugm"<+q+6>J>:@MOI%Rqb]]+qd"6H%rP><Ck:O$>[`8X@\@$_GV%I->D%P'kLD
%9(L(_)V&(C%"BSU&K:WWT1$=Mj?_MA\W%kPb8>p^P!nttIH?lb"GcDL6+PE<_P+R#r<=hP5l0$E5Z=gbK-VE8UDS(.C:'GmG]dBq
%Tg"-Ia>b3i8ob&E,0#@3YtTi&7!S[Z"eQpU3]b])/5A0`6S`SSUO8gKP8iI3fJ,K*J!*4/O,U_D!6ig5Wru"t,BpR\OWkZdX34%C
%#>Zs#Qs<JWLXsgp)(d'^W=o7foTFMOUfnt53W(<f$2CKjoSgli*Y-:=fW<2e#PECFh%-Q.H[CphRnHKD$bj:W]=3!>mrFV=ei&4S
%]3,S8+b%2L<mVgXPuA'`]*)>TUZ(G_L]`TrrZ$^j";;XR_lc4`Pl@#\o[`AUHTSJ(2MkS=/)IUkbN%"'Xdb!^E6G_S"MXTnLkGoH
%%)#2&Ec?+7mk.0WYCCTnGM#r#!lDp\&IlHKd,0_JJbo+0k\?q8"pm&R_8ds@23K5^`i@l3:dObEnFJ]Se1W=65qAY5jI5h?[M+14
%&tUCQPH*JfJPpF9'C80kV,FeR]j]g.D_]3\h\TBi!Xb3V>aiU=mL,!&KR'AkQ"i0ZSmq@6Bp-7JCaANR)tsS).jVkl_29\./,7A[
%8_-O6FbgL)doN60KYsbB]m:G[]i%KKW#ko:)2uDNCo)-o6qII(coX0ZhBWcrT/\Ti9U%'/MQt>m.?.7Q8ePNd?="qgVJP<k;%dT+
%Tas1[^A.3F,T#P`D9HqA77dR)d*(^Z&8R-0k4%Q.,V\g;\L<YHPY!LMs4LYAdQ$?_,QVNPp#fH>U6q-LPYmQ]V/aXH8HR,_MhH)p
%77ec.7jNcb4*PC.0rHAG65pM?NqVR[M:1i>PSh(Q*_(nrIrlJ#3J4TJ^G*9>>bLsUNdl-*E>8(IOuW$2gak7!2gS8;R@2.(IjEY$
%M-N](Jr*a%aL-k0)[X'`eq0'A\Mc1oL0:U3aJ9KK2N_`uPA1b@D.9S@UtS5:NJgbomg's6k0/KU'Q+4Rn8EM*7qr-FZAe4cN9"Le
%,s]:W),6FEi%j#gr#Jg^X23-BEB(bt(b$gul53H>02_FFXR:L&2>M-`"A$+`VPAW^9=p%)\(hJMjQ;d*]t't;08HHjqXra7g':Y7
%$p')1[tM]bhA9jh95/:.'16^fNL>Gf,B,/mR5.itOYRsPCS]m4(#Hjo.Qg9#RH3ja]'Q9E\Fp,n;7h8>O5F2`Iic[:DL<<[e*&()
%='1MWmX?p1L>H#-%ik:i%.O:JY@/EMnADKPJ5W/nCp_#*h<?9]qXeck"iJ'2FQZB'Tg*"8/]pS2:Fr^$dE"t3EOpQM6-SfW3dB\(
%@&85AGS7f2?$]Ek%+bBnE&T@),%<R;.5UT_3G;DRkI%OX7*#4(iB4J_-OFoJmZBJ#ACu$OjaAi8j.dkiE?jJ'3d+IbTZKd?8)q;_
%3t<&n:A027+Iqfu?AY0ah>a$nF2qhkGI%61g&M"8Z2[Ic*-ZpeZ'nLi:\K/`HbP\,hoVJY&Gmi=4l6j/G`;Qln'A4AD>^o7+P"Wf
%Gm>fMQ10[R"N20oE*mE_Y+2),PC1-daN1p1&.Q=O)j?ig`4MiB#qo!@X*np;FTO_UD4Q8aQP?P#l9e5s[DMKoHFjj?PK8DM/J@?F
%@8dDf`;ClS2@5RA_ISiafslgZ`oP<ifu.5\CP?2F'hkcL'p_k]XKhW8d\qnkeQ,dYD7"ok[@=%Wpt6pA2Mn&3-B"?9i#GeV;o1Lg
%XR<dD4>-_/_66J5gUZaQmJ<2Df=^9#9qamcq'K:SpR7RL?pA'uRFrh,p7O(Y3*t*PL*\N9>*C`R_\d)*gRpqI^_CFarS7U/4&K,>
%Eg(hP0S*QXZb8`]j`6PVi8n]J4:/Yo!\]bQb9ZR4$,$2&M[73O*-b=X(lH(%!\]bQb9ZR4$+p]#Iq,^Z57&J2f`9I7Ed1&7Ji'&R
%Q9.AioV%Rj44cU*Cgn5-6+,.o%4]taH:Ca?,WTL$m.X1!3G1PBpIpP#QUiAtq](&n4LUSM,[!*j9-u".nP75HEXU?8Bub5'KdjRk
%2=udrNdfSJ3=bYlR4-,';i[W`hk!rZNlkMCamD`^rYi]/QhJaXEoY2BI.beGP+i(M)REB<$*F]+*+p?/'f,@#fc-iemBD5lDh[;+
%`#4u>Pi,b"b6bn;Pq!5!%+hJ44rF:558\j!1A-'uq&NWortg*6Ij-F5KrT?<#)8*mIrOjgFGM^Bcpki=>;Db;gGq*I9"RTQAm.Y*
%+O7l8ktb0qHNV;`!mZj!3Dg9TWcqgcoKiQ<E;O[]jc[Q>]gj;j'$'d^(WUJBEK&:"ZmKdO@9uR_(rS.l^bCUT9]?o,.P+&CWfoE^
%a:i+t`u'Li#.g4n+ApS7co[X/s""26:0U#`'3)F[PpAr_h!S4]7,?`.8>QG$P**#4P5mE2.l#/R0D04"#<;7#U>tY2b4eAnhjcNH
%5Db>e"BQ)("RWGG$GU`$H7=\@2GjFf@&l6[4-`S*]&7I5a9LrN<2teBYHRYUMZ"eGS_Q#C"_<gDLAh0D@slVLQsS&o-?o'?eMT3R
%-Gc#QFW*j<pVqWEj:>V+1V@n^Brb*(_IZ[uU#GNSJf]-H2X!p?IL`rkPAV-%QdH3K-?AI-h0kYq%rrmG,C2Mo,Z'ppT[/RG\sG-X
%l!B4^)4blQSpic8mMPaJ`;l)5B9MaAqATd4gWZs#gJ1"a`b7^_6-@?kL#S)N0aV@i(LcZe0D@+f`5J.7G]OO:DW8o8]Xe'shHU+\
%A`Cs/]Xa^IN+84r2J2qnJu]STd%<r2e\n#J\8r=-DW8r9gpr8'2o$k8ju>>Bc?M?kM80uLL[M+g.%do!,XQ5/]t%\>A`D$q^-=Pg
%f.eO5]0,HG07gSg_RE-rh8.^b]b846',igc!&/"_@H]AcQsB8DCr5N4>``qi.FX:A[@[=F8udR6%)&;pXb&457*r$*<.iW<C5Rof
%c(J&#r*2f-cY[lT<g2kkW-\3NN/@o!8?S\l<rQsI,;DD0$S/3,)"pMm5J*@t&s0gTff%RAQhTN&d5g3dqWdFDRhf.s4G++2MsD"*
%"6df3mH!/=3pZqFpU^e,'<=pO>l1??Oj2HYqnA^qOE]7C[SDHQQkZY$l9e5s[DMKoHFjhqqfRsJ%ej@hKK<i"["4_)lCkEhT+V?/
%@s.6uhP>tIi`[`\_3,4U<GL>XH\,,>HT%K''j<A^aYm`QrQ0oC)W"GJbJ]hg6>Q!a?X#TI(>YA16"=[b,Z'Ae1"ZDB2X4]pS)JCO
%+Z>2LAFEn>?#DDPMMB8%Rb1"AS*6/pm&N!+dRMW/)@^nBC?TMi8bVg&f_o0U4oPN[0bOQpCq#>glGVYs9(rKV!rM9B\k@JJ@'K''
%JGkVk]cl9E(k,m5ZmqX<>+"N#)ZH^4*nl=3KK9qD8=UqZ>aGuM#D50:NYCN!GMX6]jd8HP&%cjUc<<T=([pR29m#DLYFCAd*'N+;
%M@npkQOSthd5.BdpnP/48WFY*4+(qZ?t9sgqm$'bZp49'iqEN!jITNF(a^%4h%,?W!Ha[d?A"B%iTnk%I7)`4.#RN+kbXshG%Sln
%s/pYaQ.uiu]hK\#FN&V$m&H&rekKps\AcCRT'[Kc>;F4BM&uIS13U\5R-[]P1Nr!NQ<5&\b9b.aKJp]69OLs=M/k:Vf*(!Ig)bRX
%oUgs%&_OU^ACq@'4@jGTDI`m%RH,<$8(+!CRfjfJPreI?23R(gC"On9>2p=fq*U$^'K:_-_+>7rN'qbcU_<%6&AX&mUK`/Smoc(n
%]CjV/8;`OL@^:qd)6%UgZh4Woh)Cgkj"JVspR3'g/e/qJ5%k,mp1]\.;A_`l7jp>64_?V+h+Z.gO+5s\ABlIm0aW:+"0,2?>II`6
%1Ql,[4e0,VaAE6rN*;,#+.C"d^BA6t]3uVuC\;`?AOoe_@+"LfUV7,LclGJHW]V)h<U0*%J,O;t8^BMJ[Ti.9h];P?':;V)gc,U=
%\Q61fT%XP:_-,D_mBk"ia4hZ4ph;pj<\%ga-re`L7\dO'J%MQK.ip@iV_W!R!(?j/rW$W`bRYl,DMIbIR:6O"D]&*cqtL!Nn+3l%
%X0[jG:Uaaq^8a,@eEIW!b./%u%fqKo:V]$G^a?F#pFEX`22j"&W?(o3ZY8jcgAjn?i(lhr^(atOB3a\j^.iMS."aIm@G6`@%Gtd&
%M,(p5q\)3-KQgdslj'1-[?^UXa[h]sJqn]_*+5!d9SP=>O_*RclQ\/o@,6j8h4P[03["U2HZGI@c[FGu*nm/#"c!+W#fbV+LqWcm
%J,O;p"M_M(I%jL,7]9&F[#[25J`\H^O=t#+e&2-V[?F&p]DDQe,%7/:\e3Gf$]S&n#6$t5kQ"].*&$UZj;n0NVr43jVZ!ZBI(_.`
%b)nUXYIaO(UKf2=B9$n0g,$cjZh=%^pRp&C]iAQ0AUJHt#9;!ch>_KU;0>d9j4@r"T%+'g!N#[%B:Ek'!+#-[O+m_g3r&&5!3J.O
%(ZDJT8't"Pe_eI_ruMb2g-mg<a_4trOADU9ObC=?:4*`_V/EooW;T#e0GI@?:%YQ8:C\]%]b@=D;&3GO#AA1P%L#.^S5]HGFgHRE
%3n/XBTCH+-mF*/pYMP%CRC'#[deJW<7q?FE4/q>T0W<hrp1,Ej'!Z:F5N<.GG-I-Xr@cD@p'&8+&"k06N$TM5<WEe]+YZWdpQ`Pg
%&)NK2Ri0O-m9AP]29D;!nT.7Z!pPna1i@p.UsT4$C,8!>m'J6T\&U^I17&phNDW!iP!ctUe\]44<Ih@oML!^g:/D.9lShMWs4<I&
%/ut@2,+a_CVBSA\eQas?bK,TsZ-N6=*]0>ULQRs1Y;T.-l<`-0<nfY=Ej4pP9&Y#1f5W?3!MA3;;aII*dKj%<'\uHT1/fQKe)9nc
%h([*<L*0K12l].kKUO'0mfSIcHgTb2F>IUh)<94LX&;^#/&/q%7^tRn?>Y=X-CRIWBO;0C/uVhC1::-.d$a=FE]$%L6!8QWQ=6_\
%j^oep-uI\_7]/belp`JZm5.^f6+[f=H;K,e&`32:'WG-oR,<em?I`8,4_oa[rA&g!<&83B/O4BZ>O?"?-KsrBH=,/@V2IgP"(O:$
%c(m&4-Yi?t]\<eJ@I&9-3XGcRUt3\R:2j+1<]XFOR',OR;:dicR1JT?KD'bT!52r6]ga/=n27f%<"Z@]$1!*S)Qo9]7=q6[JeR#K
%gZK/g$$3)Z&3.>W\RJ9AK:QnX$-9WiM#uW+gbsf]=Z8;J;nJ$$KM]^I7bJ5TGYM5:ni^65[<%;d@I<MY:O:694X2`P/=VRa7^61"
%l@BG=#FGl]]l$CNBXI`BqBG,go?B`RW$8Cu<8hTj(Y&^$_q%;NYAX:6!BP]ioG*<-;u>B_'8Y+4*T>UfUisJ-X_+VSNJu)DefKp9
%;.iA`1a4o`C:-qM;]T8L!Ps<Y;k/DPHef-mmo#Y6pTSt3E8l*a6iiq+D3U4og[;Ee(QmejYO0>E#PCh<"eu=igZ_L#]T3)rZGiQ2
%5!3#g01BPOel9'egu!Pqrk*gcn``"*Wbc?(>QmI,7B'I)_K*[>aPS,Wc<rj'b=IT$B[N8Oq@9`\Mu_rSd+S)m==i4lUu&c;.&;/F
%+/lI$$Ha)i<)r-9/>r2'NFlq#?A@_:>-/uL98usi.U9u!C3dG=l$oj)cR)=DX/+H=iCZ\M[_&0S,8ThW$[[;(LfY?@:aA!LSboW+
%Q7Lcp9Tjdl*tWEOgb!Ou`bVN_ONFfLA3DdjX!EXqAD40`*EIa]:;^bMhEE4elD>GeE=GodoQVldW>"TrFHnARO2,'ZIkr]ZZ-pol
%r2QcqV0UFO#gsUWLB[PF+Z!c6O#c7.$0[j.RfdeOS06Fn4MOP%U[.:@M3lta=YI_TSkHEf[;h?1/WD[D,um!.:TJWBkK^s?S,7#/
%<151bLl5JaD.<?,X@MlN*XQUJF\jn*<bm9]DRI@dV'@8O;8X-,\1-/8RIb"MA>=V-86r"$qO-Vd"M#F"m7rqE(:I\$_d"?IKb;J,
%PFng@$a`2^>9r&Fe7^2[cEjTG'FPbZ=/c5k1[G50qR=uZ\N6[QitY3ho1)0=_S)f&H!`_TF#2[tK=><@,]OK#:R&nI,Hjqg`bD8q
%)`O,$G3,eH>[c&d!f=R\Uq!LX0m<_`+t&U8LHmR^,`Q;Z+'1/t0'SIBmj_911*,?T\f8^/MfUnmP7cD4(U&&u?s#o"Fosq5(2oCN
%I+m`U%+5Buodbq^Cc9HCnK(]C@Bh`62)#?;YuQ"]\?#AOj"_-F>FAZeI<i@q/Yh^>7cunnM5upE<(47[RF,)%)sa\,ql'bm>c%!I
%W!00V9d+rT3^o>fLdYE!Ns`%"(t\:!p(q(9='#JeddALO23Wrlj+a.WHG'oCnhQ8&/T#sFD\<LaZWf*=JD%],RC;Zgk^*@UTm2Kh
%1sj8pgd!Y%lY*kF2AG^SSnOBFN>>^5[gFQlYYq5+qP/\JNLTEf<?i^tP^,jlL3(TJaF_$LG^p[FS`#YOHA0E`R*IIL+>L%$7].B(
%MV!ffTT4;L\+]Uq-I/DjV0`$%'fdsc^M@m2ofA@Q&psZ^eY!e2C0_97Z^kg&#@IRd2po*[<kB4,Y$2/1IT(a#SjBaCR^ealB](eG
%_;2W(W>\Ec>GVYV"o6lOFF)Y',Fg9hK69JoUW"##<7amQe;BRd<Le#3mpsSk>GO0"FFq>egFBU?8VoLDFtFQ=TQSWd.k5F/>Rq(^
%n<9Nq^5:RWM.3s'=F:"3qr_p&mC4a7!5Q=:>R_dd&f%Y$PBYaG[sP8'D7b/C^9(/@g2*<<H=!.bp%#'$@S9eV7IA;j"l4m%='7[K
%$SW]FgKFa?[XLjqYeEs^hP(U%l6`\$i'nI9A-Eq<X;>+`&;mU@F[=I!1:C=;70+q%Rf:Sbolh."HWkq%F%Om-9f`:OX&a,t9;p6O
%Q5[6J#bn8ChIul!XeYSae>+#EDA&QhBV/6b[G[p=@pQ6Z'r>ePgO1\cJp#^Is2pVSf6t+K()eJ+"^gZ(B6DB]\(un[mQ$@A`=7HG
%=[i>qToH$Rh.dU/I1/_W/)%MCe>e!L%MIQB0Q*1aZo`1[/E\KD.ZrQ5DesYn+Y;U?5!D]=dq`6=pLWbPrU/oKX0B8._I"l!1T`%8
%rR7n59l"l5SSfGckumo&hXd#'k8h<8h"pfhgNhC60@$_=2Lk]%PtoYT.AYE#&#[k?\X-7AXljN'mJQ8J^bBKm]_-TgKJsEFq!fIW
%5Fkg5c-0tu1Zbb%SqlVoUY0^ii&j7%oPGZ+4FB[Af=mJ-?K0"*qO"V%eS"YsLFXIZ0<O0Q&q.uMYH9.aR@D(=+(r:CYG^l-rX"$9
%J77"NB!RKU_ZJDXg0:2[fXB_oUMXh]QERY+QLQ1oeL>&&QJ1h?aeYiRI+\:M+5c"sV6qsP^Wk`,!<2ag:7Rr`kT`IT_q\LpeuMWk
%T72+WbC/h;cdto%N2bgs68tC=2P2R'\`K[Dm(p1)9Q;Yn+9:;?T@QaYXF)Fd5(#(`Gh'2c'@mG](3E=d=NjO<cUD9[g(K)E+'+=R
%LZ[Hs?aIu^XllkaZ?#(K/A6B`f$[4%jn%3T784G/N\<e6,iP4k7Dab:pKSP^qOe#ER@Z`M0-4%82M^ji!:%I'T:u1WU+9$A+Gk9%
%iQ9)GDo.[)-MMidR:gs'cC!q.GOP:3Hf\nH\[CO5Rq=LD3W&MqZ1.DFakCRkmD=2;U\c?]Yu6&Cr7ehU0#gc%DKh3"Yici1b-MoA
%ZF.\T\+mJCZ/`F!8r*5bP8>a-CKm:jo5DrIEcGs&\F!H1\trcKQ7lRY8hWBq[%tQ:rT-Xps3^Fa^2d8oUDpN4nS+j3[\([LpSZ!c
%o9J^H(X'!W(N!=P@(mMGcdqANqo-k7M=IO6IJ%LS'^5@80t65Yr_V5qD`i^@En0>Q.p$k*:8D-4T3BoKBu=2gn3>kuR<nfE`nkNB
%pUf\]`S?nA?-etAV8_WnLF65C.5Os`?2A4LEa)aD#77FZqMUa:=*f2L>Y7eE>Fh?8^\F6m(QN<>hGuh2IeL("1S%DHRpYqIQ(Hl^
%q^oLci\(kL1NfCK>.o!LnC)K!Y2L85gnU_2iq)mAR>6ihONGtXl)E?3/*Z:gL$eL7Z$;G'Og'^UTBnPI$6H>elfkrmeIUp?[J`R@
%iRMZi^%cn'Q[X&Oq(TMSEU@O&F0[Wp?9YDP8K5(nf4hQC_mD;WH'#JGDqq]UqtOaVI5Lm_/^<<Vg3^PFV>[.e,/*OorAhPpU6A[C
%-aQ;urUf?tSb08+-YM],F`T:.>?NAMo,jijdqc:l#O179\*)ul1X2!FNLf3RqUJJ&S)+QcNmlb/(?a/YZgL<ZoguTThVZtkdr12S
%DpjEsY>a\pNCRdKpW$(TEL;f*hoPHQf@>rH0*fdtoZ?(KI_,Hcq&k)hI_(q2DZlX'`N8SR?!DUK/`#($XJ`guNkV>OO2QsUoL@2u
%RVq8rVIjnuZVtr.Dr45?k+<Mi9C8-#;oVkB3b=^`2&KrJq7?-;b1hA)2mp4ps#B]D@ISO,H0a:qWVlSKr`&FZ.sl$kdmeIpoAbb"
%WL`UG4ge@>?(ZGl3BW[TB0\s/Zdl%Sj8JW?e4C+(5$ctU;jB;g6#F4/Br\`0D;[+=LMtu4WVtD#kumo:q=K'rjCijRhgI4r>49+<
%B@^7Vp1cm?qXKp&e*6%B?f+Wq[U8Gr^XtK&e!iiD:Sr>#^:'pM^-5\gIQ'FiE;GdUS=0q2K@Y-h[U5O'.UIOW@A`@;q=EkED"d53
%eBYDL#7hp<cQ4Wd?9`pIXM4Q-^e);?4n(ZWIs^\W<AXRr?SEQcG[Y0M*c*DL3=kg)[@]Q@b,h[/ppb^]q]K"/rp\ifldbf`M_FJc
%K4\aZ1Qu/45(R-SB&@KEc7F,\I[i.%KDLP]aY(k$hO]-VP;>u.B@bC9T?h>eH87^k0/LpehG&.Lc?ud$I%)R7Xgg/oO2(&,1f$cP
%flT6YB-1HE?dE=rCX$!d:9DgEm$]#.T3&=>0[/mpHh_?!lg7,hp0dUAPM,]6f2#u\ULMQ@L!GJ,HJp8.gKg74H8sYC>'d[m0#)gJ
%++D?p>^a<^nR:ic_g],#ZX80kqsipWLI[W?k/5O$o<!eGm^pGn[EX]kLRj@dcVPNDI/5*OQT=`rcFL[$1ABk1f9ohnY.gI]!Z="B
%:u@n9qtMloc';Wo2s72$_k$,S?;8[/b_;nhjo"-+]\M:i3rePf4#=YNXjEZsc!6LrhnI;Vc$sH'?d2ZD*oJaDhl<9S0N7bT\<*-W
%0YQCn.XYHFp;4OGG[W`@(LGEGJq\E.nFOLg2>F\#;>KimU!l"#YW+jsp1[BKNT8".(K2]>KeLI1iqB-6Fn'/2D/1knC<nG[h=<=Z
%SZ+aY_`XALT$BJ3`Js7TO-^b,*j)i.Pt*p4p@P,(T6@>,V(^ERUY<i/dF)"mi*pD7k3:lg>Zo3%A[fDp/\S0U2O4iDO4MaGO%3DI
%(R_u.V=*#`,I<d7Ya'3@:TBiGk=lpCoBL;_.!)oopd$6Op#\]?qQaF5SpG*6?=)@?4'D:"e'<!Jqr75<c:Z,\IfJQlk@J$kBDL<M
%k7_?C0)O;*hFq8nc^^YA]^4u[)i&'[,NIjmjVW+WfUUW^gOs!/F*iAhI'PtdDJfTsQMIC$Km@.i)eT&fm\-$D<lk^=jPchXg/tD5
%=8C22`7p!i\gW@2;LI5hIV?tBp?S#[c[W4jcBgK@Y0=Sd55>_\>@0>84F?@,a+.Ubj\C9PIe$Udg+V>8:>'P%*d$c<h1N/l[N;fH
%`J]G1iucAlB0DlZES`88bWDYt1W0%^BL03;$b9oQB7>-b(3@[rm_RcZZ$TB>X1I3dGI)>KU[:['^0F&8\,Q3R>C$!C>f^rdYoqe4
%<&RrB8)E8B0:LauI*VHB5@*+=.^,Fnor!#*$X\RjG5^4_@FK_>G5g.o&jCi2mlc-,Z;>i@H=`p4Pm6dOCjkDNGhu])*'>[c0WP^j
%<?%u^I_E6p-p2=L*Y^eTY*P,T5$[IX`mJ:+DVBC64TDh[Gk\kXnMp#%c9M;OqYn[%V.]8f:S'2'kFZPqkG9QHLC[]SBte\jViTD9
%[@TQ2S:#XorG#d$l1+X&A:^Z'8os^ZdSg)(g!f?>Ve8*9c/!"unPS7JWu:]YQZq#IT4b"nnG3(=9_s%FG1"O25C^8c>/>tdG-1]1
%/:2J^FIN1)0K@BAI!kHAkJ-H9Ej(p$/,)'55+QJt8rGAs5-qq1jg/FfBn!hGH'pl[=[+H"GhXedjN_q\n8]n?.==0;cPDsV[eA==
%B:i5UEo+\2g7+/flrmtop9+2[k\If?\pWo^\&4+_`KQifHTf%ts('qgnij6qb\uMql^qc]>O1/^k?BSJs&K%e@CLCLipHQqdhfEG
%lIj1PK3(i-ZLdZp2r8p1jYspMl`HNF?*XA!BfNg$ErY(qe'%@#nEI!aSIb*h:YpRbHj*9#&&P[$fpqY;ml$dX$Tn[+\c4@qY^(]m
%iTo(-R6KDP>05m8%c11'f%8\lH@&M\SSr/s[1D"^cLggRmIA66:1gQ:\l8B?Ln,&Th+'Qaeh/$3MXt5%GN7Asmd>)XF6@]BdqSQa
%=):RDhXTc@@$oQDMsgN"h"%VQpWWI`pC=muB7%&R2_Xol_q@!GlcXW&qk&)pRg82WO,F8"_6_/e].7qa#A9UVP;`lG_s'+j&$K$j
%]\e5<qG$9`p#=?or5:_Q3e+_`GWNJ1ok6OuDo48!fsB-d8+4-ZWMA&/e$Z[QMbd^;mOZYc^-0*\._T'anj'o>I!Tl)maDF"]h\lu
%e+YBUS'Tq54BcI3YH?&fIP=RP$Qi\XB:hDQ5G((:3<,e=rg9=W]`7csV"sX]qGUuALAA3f]lN].c0P>Q:Q:",r+lW+o]Me;qpWk+
%\a\`@oB+<On]%(JO%XE;(Ve2K)r31C\p<i-o7p'iGd)2Y0mNEin0iP]I!7g=DX>)$=l%ig4ZP&8m[gd$:A.<:G39Ek.IFUh&#I:H
%NM,W%3r<*0>r#UFg>Rh_d!f[giU2p(\ZhN0h)i#NHn1cU*51a2?CX3gc7EC@SF,[h*hS#PSNaMhf2p:BQYVB>eVdJ/@XjnTXh9+h
%ntAt=hF,9RX1MTipq$KFZ1bSN[diFqT<4D4%LZEbdJhi.WfPb<He!=G1TX<aXZ`dLJ%T-hI29egonRVf_tr(So4,J@CclDoP*o)*
%jU:CQEIRKNEDm]9e'6_Ij"JZs@eqAZo?I1'eG49p&PTU\<[MWGc[7ci*A>M,pAE.6s8S\aI!cN!<8i8&<.P[5fn23M?@pd/Fnbcr
%:O+%3^E,4mcJ`K2(&[8g0B)(1iQlpIV@52c0&(2s6*!5nA"]U!`cpY0\/h1"i0TUW#4".!c?[j>J[l:1eS:Ep`/Rg_T54X;\PmL'
%oW5(p1l1MS6LgF!+u'n<hGG]AO`qbp8ef7V3\#s%$g_<&;/_]E>E)fgB`+h#_7Ih[PoDd23MeGe@:C\D-6G')]sJE\'6J>5'&loV
%HR[N)7+HD@^$ohG@p]PB(4d#eiQ5LSr/l4BRlBLFBNjeIJpKFjh6[n,<Geh;_ej^doACU-S-iG.WcK5Ye7O!+*Hi"=mF73gYb#S7
%aP3\eSjH&n;`i74ZkS-N532T#@#ue[30S[;VN0VRS(mUYr3OdF21ZoLNI!'bb0i,Ve$G]F:K?]8/eqlJ7k#97lC\X6UcJtOW"c*Y
%P_BmKWWBU+M)ijIZO'm[8\JuR'*KYp;(ka$8?Xfj=cEYsl,'M@VnEC:g8Sug!q5Nt>dHsY4eUt9X3s\_k'=AdQ>PHpERa_K$_Y%M
%o;U>[[F*.im1N]/pRkNc%5@?)XI4u:H>i(p2`M1(HCHoR@=id=;SPabMh;s-oQ8W+P_:1N&'hepPBp')C+tA%hUJVAr5:6/].uVL
%.b^h:8:JRB-#XK[qqVofC;iZUZ\R=]1H'/CLV=4\HuD[P<Mb-P"5T?pHn4g+64PX2/7$HI+=&AhIk\*LI_@/k\K/TuUa2BIla2&7
%?G8#)Tr3Jj>mm"=616(]IEQ@0i;4!KgrsB;:'^R\\h3Beom.<JQF^5?^`Yd'*92R='MFCNI>\%7aY<lSKBJb%*+'r92%)S#6&r#?
%''$'CKDffOSlTA\:f_'<9Gil958pY^^"]f_0U_o@L:DQ?hC.L^(V)R3OaOT=T67Z#4d96^;(mK<*orHQVL"MA(l.ZOM@Ql]-'Ht@
%[`5"fNAiP>1OIQ+p>GDZ%l*tJRLGeKLPtRYEpgAq<_XgX9Xn5SM*uQNQ5aD>kUNKq?D=1(`r3DVh-Im='"^A4C,Jb<c=ZQ%N/X-n
%6uS-eY$O57_f3r/\/EWoG.\KaK.FWbbpFU[,mQ#qTX]$uJR8o5=[)!nL\"]AGJ=j1'_XaO[/d(1[GArh)VrIne,0.aonsO@I2:`8
%O.EQ.&&*g'i2T`VK'YbZJ,Ck_^a=@`W5fQq\@9;L=U<sI&P_H.K/MdCF3@UbqFjfjl")-ZY14K$cYWl)KL6UUMVTaP97nn^1Y&%F
%pfI;@;g9bM3:Oc#d`mujr\m?Tn_5r\lU3FogJrH;huTsF'\>O'g.W+=(ok?-c:m1bO7<uM\k_b^O2(\GV>kp7@7CUQ(O2.9l$5JL
%m:U[PBmBEm&An%tNTD),_qY0,e!."fQ#14p^:MfJnI:2<A`?,pW?pNFN,'7c<Pq-^j7tkS\f'Cg11aTp`fco"7D=<:\2*^tlhMFE
%O]3ed_K*;RAXaQo'3_[MRIL^CU*@Xc";Z8BL79YY>:?nXR\-j4dt](dW:)uaQ3gqZSk/h@W<`k_C++3[L?V@2kkM$q7A^Ts7<>^i
%^*C/7E\/,0p_hh_&f:C#I-OM[)9;=o:>*hs(WNL^K`rkerTerOpngKm_U2*&c)9D>`Q;X-VDOAONpkrS?_Drr9\2_W_d$Hm[I>?d
%a2[E^/^MEE.?Hf\J;Ka\^Ek$TQm<h\Ll<UL"-O53Q@LnN.D3j@P:hK%ADeW)gk%^p5WM(^%E$%,Y^E;+&W-^Q!IOD=CG)A%1$mO6
%K.1)76Ucp#Mha/PkqLQQN+LE[Scb2HD&PfE*q^p:*fd:_NjKCC?&EKW'I(s>>Qj\LZ$p![D%bnj0$F]CC'qkdM"b=\!<*P?2DRK@
%=.5Eh=Ng#M^L_^/$,nTg-#m<^0?hWuTLUC6]\7lh$Qe'D1;X&k)CC)I$fF[0h6m%c&O_e!dI]RE-\Gr@>i0`B:&rWf2DS]'BS&Ak
%HU-K=/*E*!!K"!*7?@tW0--Pmn@A_+!Q;?C%3,,["Bq1c(6BI<?>HkmOP?R*9*\P/D:=rXOG>+f5@>&C1dh`bK\CqtL$SKN-[\/=
%80>kaYgQ6Nb?,>l+V'LT>OW7_m#:<F+otQV$c"E^-N<V_/j'd_]h)\ML5@o#o7gsj/DEH6"4X[]&I=_qKuOK7=rE0-m4Yk5<7ntf
%eLS91ZN:7G^MC[fmXmn%87sE+.Dm(sBlY>)V$g7R;??)U>(]as1F<OI[(On,&jS"o0J/_DF:\9Y@`UJ[H=MIe@P_[]$3jVF*bYn\
%N%3"N!mq)>6G+d6JiK@@CDJt:=TfB7]-Ld3PGPhsU'X:83<TJ,;.H<H#8XYFU?gK';\p/RbQ5=3>otq_lTu2V"Jqi3OePq`X.+d0
%.5EMr\`Em^!Xb%^5pmPSNjp!@'8Lg6(nSo>_QZR[+9nOdk>F\"*j%Ip_?.ccHq>Lb91]t^1cDT`Un?\OUk*a(CN>IW-q;fe&dcUh
%!aWHVY-q!c:qTr&Ljok"/se/@M6tmu4"I'7P<UC_62Q8p,4tq^h)1VEW5]8q=hkAQ!;-aC&BQ@-JdAqs6qBSAYdh(OdO%E\C("b`
%C>WJ\eO);gG(I*B-E[GIUV;M."J`hX%:1&?=K&8m"mUdk9*FLh-C;S1;">Vda`_JQ[1/4%BNnR]b.,NT('m,9DN<nY*oW)QCj)Wj
%\,mi(>6nr4Nc4kh6?WSBc@7'8"mAF]'nI_52i==0\?HsL&ch6N("5#OUB%Xh$(htcieja]YcKEJCX7'8a^^HMWRZ3,PT/#W"<`8Y
%1nB,KVghY=&(NZ'C"FVJ!28IHAJd`_YXlEkMC_76\\rWh>c"3QCn\Aa7VW5^72qC^a=P=DBqZZeVP[2'_$!.Ucckg.M806M;8-sh
%.9Lm;PnNfnU+N7#n(Jft$%k=G@C^u'.PX:U;dYgd[cE_6W:"*M$#]$"e^QoTbVKMI\tfDDJJi<FWKacW&R5n,"GZ5hEWAl;#gNBe
%du,?t'+mQ8'Nf,GYu22UDH$b],k[2Vn1?C5U"&^_O^`i(2/*.U*@cXNYR'aeC=7_1;e>IJ9Q=^X9H<OGV5$NAl)CD?&nE,EqC83^
%Mi&K347o%Z<u2LAJXCN.&0;00/g4ASP65!%MM'P\HtK+WVVZ,<qiGh)HT)T$2[V/m7S-+C8RZlSd>^e9QI6Db3E]042eh%54%Ng=
%E+NmY*%*;#TX;J?;.]X%WX)"78>&P4<\O)Y$,_T&R`AS:lkE844O0c`h(%P\ca<_;3r#%NDNH&dF'CngJPh'h!g[5:0F`PjUo!a^
%:Y5k]PSaY50tQi2)2BOW$W-,]7d3E$HM$Q">VXIDU%R;VBFCW58]qc!2(u8G^aW*[f>3ORHU/q2!DTd>fsF6GaK^E(Ns'`P8/@Bb
%i;\.71)jnT#o!a_>%ACa*s9beTb).8F@"7"+e#*umWbPad=ZNqk!fiZ"3j_WoX^%o4?lc5^:"$8F2=Tjokh((I1Rl=D6ZlSP%!cU
%J-_&Qo\<(*]NWNIBLB:U/rm4e8/5kef5jWo?/V:'Ag6^bNXT\C]Ke,m"_,7(`)asJ[e/AfZUrg4-Y.h2"r-5X$HihSk`o&.afu#+
%2"moiPGTh86-Q$E-Yei!"WBE[?uf0L&_OIF;B,9S'j4]b!OeO51Q&C.O['(SijR9SPU86742`>hZ'CaZkD.ggOY/FQT</J$ch'%:
%VW"h'!N!XhUaefi:.7A:1)*kLC1SqO1rQh>g7$@'dW&9dn!G()nX45=CgBBnn$Ymq@$cI!0SCfR:^@WmgV#?l;!&LW=J1i`T2O!0
%8iGW6pV'TA>q).-&jt1V#TtU@B1\'r(d?:4@bO.O3Oi7X5:12J=fdq]QshOQ=['9&0NZrU<\90/9&.p)TgTZsWp"spU$Pqf(FZ^,
%;B*@d39>FGQ%?F3.tE>KS3mB!:0i`X-5DrOfoN1_N;e!9&epnFV>Q9\)+l.M(fqBU;Chn)=fMaE>Ug@k"Kmr,Z5n\";d%u@@hG#T
%i,2'\=:uDueT.Icjgp%4-3ubrD2Q&<OOG>L?>GjZTj]K->eNmpKCl[6lg(B>oY@oDC28'K8O_?qJKf'rF^%p!+n?@n&F"!+?s&TH
%HHMFk0F/<-lX<nOa$hFF)GF'=*.5btFBA_J;SZD`9dL'mNBi@s_FuN()Sl7NM1338+`J6LL&_r76,D-^'J+2N<_?u"oMg["Oalqd
%Kl3pB$g9/!BA"Yocd?lf-#'W4NcAN+BGeC+S61n_Jll5&)X9Xr3VORu@oUJk"V*uLOhI&';Rt9lP%inH:(%71/D&r[*So;_.HPip
%VXHpL88f0\Xf8qMI3c,m>Qm@24%kM[cS\\$J8nNd7H!L#rCqW`'"I`a"q^(2L-'qY!V6/;3IlH]^)FkBV5Z%VLNaqa.2LU.AcW]j
%*u3HqK*LY2RG1$n:4[#PFC:lg;;E[d#&Pg58[u*l08C=R'+rYN?*XJs[:qsr[OUi"?%hQ3iYE6,jXYDp`^gZ*JA3a;4cGY(O]nKp
%5HpH!=PP2FUCnHh`h3A+jr(0Xh\FqtE"(:J#9feq)E+X3..nup$\#%Pq:IVC>1mBe#On^cKi*8P;T#i?U?gOY!9+53F<_GMr)6&b
%ldm@uAKarS&jW,t];S%!fB7!Fgun6IgD0Hifj_oE=%0`pPW9!V/^%)fo1=mmna3*k-3N/cr\9XUWMUM]d=nHk*!&VS#Rmhf*Q:^F
%9+8k,\tp/c5&2J`e[)Y.i4@,K@-H@M>'Un+_DbJU0!>4KV-S?'#YUG@BNpED..JmcQlN(TBfh&AV:t;,>bqnrW!Ko%jhBg_L#GQ:
%P"p'40anGB+$^1Zm%_KA_3cgu<.V=CYgnMhNX$3%`hfh2CC-nLU*GT7A#kQcKE;O<c<G<G,u#'a>qA,bjA?7Y\2MZi5.S>jM`mJ)
%PeV5_Rl&BD2`HPt_EX&q=uNPugp2YPW'*()X5F.rU5h[QC9WWXUDr[cOG^k62a+N#gsd'-C59g9[;']X`hHue!2K&g3\Fur.#Y?S
%>I#hU&qZ!o<*R#n]Gcg0bu96RaOlD]0ad=qDO^11K%(j?TgD$L/NPbtj7%M[B,IY%N&NLHD-n$oEel8`E&H,ZaUuQ;;[!0g%-E#C
%hi&ESA3Jo>JooZ80dQ:p8ULBXD[)\":q4V8j-ZVc!(+;Lkg0Z'(E,n(7=<Ljec#s]mV0^9@*HEaYjWlqhR<A._5@-)gJ<%R4]!NK
%<^F2-eo?[B[5_6a=JX2<0K.Q7EDuo>m7>:IAr/*67=GaM'*k:pel%4<-*ejf!]_6=nO@'%7jtZJaZU!d$<KM!!tCAe0""feJp%/K
%I9IZ<>,`fTGZ#D'So0J@:s+T6I9Z6:.G.=74Z+&6Djri[>fCrR.kD.#<pCIs$@42U;aj&[p.B\W\a;,!]Xps12&HXm7RR[2ar$DX
%B+86U`nK^PI`hV<,7AXUTn[O&6"F\gQAlP2A^.+SglCPGc"HbnA!uWAJePdd%GP>a@]AB<Wfq]p7@kqcRO*/*CfTKR*jlX/4WZ@1
%T_PAsh4E+_c"9['/M2L;D^;+&!T\gQ-Luk^$:RahaDs-WW6RM0RT`<$^7L59M5ST@.J-Rj;_$A&0eTV%'eg,0I^(#M%gmqAId[i;
%*O^ct=ds9"DtP9gB.<Hfob$W#>lu*:[1,m5ZOI"8<fg_ugbkr_.W/@0.\29?OTl.Q:q4Fo%[rkX1X!gP/4WX3AVQ^,0Kd^<8R[21
%U)et7[$=*L[(D&]J4-8g,?4.7aGRh:B]bs-VMkoo>nZ3+)\\5[-dI@t@,R8IkJ5mgPY`_R`j6[XAYQO:.!!^.j;]kPl#9OY7%$M)
%?ilm-QW$9\"/S"]>D>mi!!`*pYq-\-]j2e(VM)<*BhuT^$tNq6G8+N&mQ?iEFND0o,H-p$3<]2.P_.oS<XS,AiR+S:]fCjR/^m)q
%PA4Oi7=10*DfL7ZAhS-ZL.,2KUW>`:(NTf&*607bNcrp<2Jt'<#s`'_BfkCi,9alePGp'G>Im7o#m$pHmgeDb(&#\mIUkj)1(t'q
%>:>>a?!Rth>@:mtC"M_5K'K:!(cOYM(U1<o7[Gb#:b8jnm*j*Hi,+WQ.*)jtjeKqrBkX0EO*'kcj=Cdk!n+&"ZEo;m)8M_>8?V'C
%#&u^O(RhkU`BF(UnmRZ"FE[cqA]dWP*&XmWCPLQ[qXD"hJc!>?71!bBU<k6q"I8cC-!25V4%]kJ@T+DRbG@*X03%!DXg,s?Uc=Sc
%;AE?%?`VmaSB0uhVe>m+d?UZm/^FV+al0ZLqF=Lq8WJ32\/:H`;@@P@>QWN?]TOk,'m$)s'13m?"Lk6+$n=,snM,&Y.f^5hV2q$X
%(jSR=c))\Df/Y/sNp%gr=>6S*eA-4F/'#\$4!fjnC%DtDd;^RScB;\#e:P)ATh[o&&f`r28H<!A#-sqtUkIUVa1s;gMOYDMJH=PN
%P=h9G.(GC6UnqieQ3o5_2R'Eh'!H\P2MZZR(9r*\cZ(trA@Wb>*!_m0=V/@WY*q$/g_e@0FFT652O51k1j_+jQ[7jkMTCCuV']gT
%PDSA,OKgLGLNgfJ$[8Y6-Zk<s_Jm9J1,Pq$Z=1`anIl)2EG$l_6P041DJ;u1&XH&,j=R4bW\k3jh(C;?d^?[S[qlR($]1),qnnP`
%8dE)4X2C(.9C%a5Ps*:h0c!@F>H5bE74rPf2L9ep<9`I%VP\5@Q3*OpF5J2q"XOS+$PF&&g^tqhIAs0&g6Q3p*bNS5b"*gCdc46I
%3@7UJ(lLLc0jgicT^"5`$+#:_"e7n287eKX-O1-&pEWnO(kX_H/_]O7.l#4O@6WBI+I<deCbmgr4M+ZE'H3eqK\FDRr#!/O+@-'E
%pbF-E1r9V@eY!U;c-eJOGc=./Ybj%ij<#oS1Z.4:MURm$X\G;S=@s`)/9+Ba!fhoV]h-A2`$/H-La>_m-_h4^'F3[sRp9\_4sZs4
%$aO;Zn?>n]bN:"(ZF$kB`1O.Fgg+?&PK1X:&Zk1&<CF8Rp?"DN!:W@CA/'=Z'QgL`A2.mggON7:9?n[aDf$%e"%`B'Zlscj.$<p(
%Q+$*g>%"uWMbNC$,)V1a&Oe"ML_rm\_r*p`P_g5_TSeIV&nL;?)(\]$@Eo5=_c)MR#,Q$JikPVhL`2QtR$WYB5]i&`dF:V5<c+g+
%RLNH8bYg&[.]FU^oWa5#Bs>\J*,Wb@,`5US_'Y8k%T]Z?$VquK,K5=(:Ca+7!3cEY4;]XD9iFn,'+%W+?AUUH8jsq-3Yo\+!Q?+J
%5I?k!Tf7j7hsqKR-7X>G3W,hEDfU[Y"*S:^I=\;5%*R0@k6\-oqF_P`;RJBHiJ_!G^<g^+;bbo];]/\H)@A/3O+?_6*aQlUN`I`K
%a&1;A.Jji;]?Pjd+?CsIjl!.],:g^]0m/"N+[o5Y+iVs=\RJ-1@[_$@g4!u#_SJSk$lOEL-kO<CXS7qA?W,Q%A(qurZ7_,6)2h#q
%oVd^;\4\SBAR?=(&XfVij2B&5]m4(;bZLkoUW?-[Me]<6m%FIK\G]r-`t>dUH=Z^XG5bu^L*BR,i%ZusWML4J1mpL+d;GJufH$>/
%"(]DLa7\G&`p"A<*N(\-;=6e9SNX:XXZ2mKnD6s6,[mD(E'OGPD@2:m`4)_kCnY[=Ll.*pA/I8DW!S5_*=Uf)dqQ0\7](f4]5LcJ
%M>uXMX%K"<;V**'%E5i\19fu8c?H]O*8Z@eS2eE-qm,+`aAm5"4:=X@NGY\WKF*g1G6i"IOPm2#7Ec^Ze`e-1F9BgNlkk8l6/GW+
%F=Kf/5rZk#Z.qd=)\3V1B7kT`<E\dTrE/0&.KeiRWpEATZj:IsUmU$E&Xr3FF[@F"1PW*Y$b0lF?U:8/#Dqj_/[Wlf<L-sU#DIkB
%Z0FY,iFj[+T^PQ#'XpN_c;TaeKs;,964YUqTB[;)WfSf(5n^9\(ofODeV4`n'LC\noIBC4+DF2:,SeI\"]gRS*F\5"o^:rdS>GN(
%QHM^u25rr1*uBT.8\;_#cUp65Lk0Ht:nb[_j9%CPDcU8.X_*B9-PY?'#MB]*!*bc7!l@j)%OtqB+@X&Ma>6hY8!.@267sg/;iB\(
%3!r.A\B%]lJ^pll\n]4d&,7PpJNQk!Z>g7h;jDAu%?X)AcK8Bu3&USiSog1JZb]Y7kR:jdhLP(7Yt)^0=9t304s$?$oMHKFno8#4
%+-ggKGs3jPj\i^&\7\7B41^MGQj'`#9d;2u)+d7Hi/!)79%6978od)R:a"U0Qpf*1W>'_]0]>u8Pt:#rXqC*n;W&9;icqD&J.XJ6
%Nk*S(s1i:79dr#cMs90F1HO*O5"7V`%]LA1ML;+U>g1'[[`EX'Pd3n@0M0Ih76X1RWJCZ-0GPa2$5&NVP)j'Mb_2l&En"SI,WR3]
%RH?r*69V!WFY,WkMPYP%Kr@9Y9HW7!#Sc1\jb-,s:"8-M-S.)+VcRP/?Bq_@j1@LM#8F>f+:=fPYA,`FU"HG8n>JKT(\b^bO,/st
%9SSXfp,k8k3H<Ba?#+PSKF[k]Ela$U&o`Rge\A)g.+Q<B;V=Eq%l494VoHOu"Nsa9,T2Y36LtTuP-p-Gq];+MaO30TIQs.hGM.]L
%f5&V"PSYdqmD)Z5C'08d];UsYS(--j+?W@JZ8dqR;=9.7K3EAqS4bTAN/BTmLlN1Zgmq'QZXdV7;3/Aj$Di&JT@C%ZAWkci^nNlm
%iTQS8$0db?UP-`'P];7,S)LB;2tTS<aL5nDap^(#=$rk5RoJf,SlBd\cFi=DC08qclNDhr]Z"_r<)mmjb`([Sq&^:\1SgeX'35hF
%1,N#k9b6OZ[NInp>P-_#FCPU'&NA"V6>/q,Qr2-\_T"l3?TIb3!E1@sqcYgc.5!5`!hVDiHfVoZ(]VRETQ$T$_Fg3(ViR4DAZJH_
%(%H]U]"4-:7*@V`9o^%KGpZHZ9G`slSnku#(SeB5.R(!bb4j4ZQ#:=NdiN#Kgn_&^00Vp6;)FbEWLe:73t9tVga(V1rKfHQ>`hNR
%j#d[lnPgQsDpU[;<('#?&KSj@V)GOgq7CkYKm#"]8'><_`SdsFY)p_cV6"CQV6nQ7\P9q@D/ELf!9a\kAD,ut5EAi$L6RP00rr4Q
%fl1gcmgnI#AgslDqER2M8i+!Z&`<Tjr6priVtaAA5"Z,dQP"jOEi?nse#2g@"#hTE"YXJp&80r'V&^sVqB:1hZhA4l)mjm'*jZV6
%1YP6]S/m>eJF!Eteq(#Zn5R\fagYm??C.E2S@F@<;8+]\,R?9@IOK)-Ip#)i"NJ(PS+9p8!t?6&PSs:Yl@'/Ze(TR8>Qo&P91aRJ
%D9MuD'GUc<q&gCP*@u%5%>8e,-q36:?5e1fObsg"#TCfRL51=?;^?-5f,FD1Tg\aK,(jC)GW_5e.U1"QeEdCT\0VI'nklOh9-X:/
%';(HWaSA-LiG(^+IV6<XME%Atp6Ig9T<Jc&ZrgjQo0[9A"[t&9>D\MV;<6_S/JWQB(,/II)9V(BMC6=#,SGm]/9&L4WcUb(Oi,Zm
%-*<=AI<GuqU<t8MW+al?0[Ra;.K#]XL!PDo/PL<T!^!1h0Wo-8TL=ute!2Ut,qZf47C9\1P,'cVd%b,P:HK_5Z:Mf.J8!F6g@V,p
%@TRf_7O_P8lBl]6mfN^X9BJWED)Eb-Z(oW[Qk\>59!Lo-,b]8akf4gc37"&[']niB)AH?TR@`DYE-%7_FDR5r_ZC<li#J#LB&J,%
%Oaul=E#iKj$+5`5;C<->"K4m1Tm,jS)8op#TFs&LSWmBT;V^c8-[LP@pl%1ug?MXl?j@hbrrAd22=hUg9`9I4#gp7bMGDR?BNp1=
%(+M1@^5UbpU4Y;2.WWoLk#4+MD&#k\eCMmk-DtFUXEi=&PY6Xo.*n'6*+,P.o+_q%95WJI^`ph-<ElkfiSs5B()M7V\hFNZEseAq
%Yqpq;L"%&I>D(+^PSt5R**^E#@u*P_CDad;Q4@Kbr-VFM^dVqI!`O)VVk.Ud&BkX%<gf2"o%&ke;@sp:U*=UYki+&Fl,Fo]=;m7]
%AQ'3BE@dEK&mlhO5rkpsPS1YYs4K.&:]U_d.B$!V+!VT_R*ZR%GdNJ3Eg:^j,<1]Q#"p9m75k>=B^ciN&=9'gO$-DDcf/)Dg/5M`
%VFjR?(?eY]<#eofG:KT0Mam.>#37D+2(3(g]6mA>,OS[pEV:LB.TkEieWG,E]9aku!>spq"*i<514ZKs<L.<?;4H``Ks)!OTtr9/
%H-]NR,J$Ug@e2l+\A4SAE*lm.PtEYhkS^Zr,Rs<Z9h0miE<'RV3LmgZdSbHa\ajjcK[8f`<>m"^CHAIdEr*0#>A$WKK`en5L/p0=
%OO]-\IKCfi62\cd9V@Y>drc+#mOBD/3OMbOEr:e^I<\<oMJio(q&Ig<3)_f_JTMX=-!/?'k7:4"6]'V[a_?2R]n2b=e?kV=B6+If
%V4]k7L&M7Jpr-.B0ERGH8bc+dN%@g<Es7Ss%uFcbM@\8u4t"0aW_u#nj(Q0''7aW.+FKO\Kft$WTOM?,oV;uXH'4CSQ?i[jNFC'4
%C^m'17S9,KCpS=#&h%H5=#C7(WHJYqqa[$3+OD2(G\`/8#guqN'!J<5JO)D3aVP_dq7q1Vd@t__N7E+m:,d0@d\IA--k'$cT\(_:
%B6l$4*"P_'qJJA&I8#>fe)<h<hNafJ]J2e+jrbWiH[:&q&\>.#"3f64bYC2o7^GK0nh:Do$(@>=-^QJ(j[!HhAM5TWK)-@6@<H+K
%A,0`uHanPH1rGTD(I>`>%9p(V=tb*-h.Y>jl9HFgh^^5Q7]RT=n/h.c'gplsI@!F#DR<:@*`OZOA?Ef.D>[Jdh$_AjDL5s6)S?T'
%Y]dEO](f-Z^&_;b_t$(#NHtcC?2et*.(=flEnIqh$/M%4M!.sY]gfJ;L'Ifo\eE"##.t#]9E_cCX=)@"_7K`NBbfWMno%NF#9t8@
%eBB[4rA1\&4-<2M(iohr._`L9;="\A1!uVRT&'V2]>UZ:T=]o@j5X"JX+tp3^\8ek"?J.AW6+k/Io9<hBCFcqh@3XSXaSH(4kc'M
%YtSU)gKW#'L!2INDH,%c!jh3.C5^27MM_7FF[%//PO"kT+nusZPIFDoSkD.Qj@uQn'43.<*V8dRZ#_Tb7.B#"G`L4Y<&g-uCp9KB
%8pe.P`@:]p+'4+>8*G>KF;--,#ti#,$mjQjd'g,W"!pCaa^!El(eVVM=Fo)q;@pjAZXBA"MNi^:E:B0!?X7,r7gN*<=Dt,ekTlQO
%%Lfr!l7rkL&#bAt1l=*n7Tbf[:9,bA&uc91^JPekJ_GuKI@^/G:0h6-aKhua?N7:A85;*<C(-@Ef/:+71FtY%S4IAL'a-ZA9X]+T
%19H\+>fK"!e^17SR)/6B=E?1%/fiiIZn]bp/1L\@ga0WXFO4;a"(Sb&`VFcUKYB*9H5*&pD2Qte1;2"h^dq&,(dV.CJ87bg?!FJ*
%EmQC>RH9#1L84?J$:i]g*UNn&]QoHRNFCSqWY\P]s$rHdZ%pps#ZH#,%VD88F<-%0*%]E4^:_86!'*spTf1C707e3!h.j]Y.->Fp
%$:^FCoa90"HqPOp2Jb\qjXHWbhZRP;'Hb-g8=.5o*dbC0Za?N-!Gb#[`$=PF6q=6P&p6I*M%PFkQT?T"`U]r^(`(mKVWuenKS`!:
%;^MEF;XO@FJi?YYPkeWsJ'K`!Fb@5c)c^!Nn^Y*nI"3hYUN<+s:#(.q(H'"LL;CnJ0Yl^OH@h:i#U4H-6K-ZC-"!Y7;4O3G[iE3B
%NMl!'Ern1:"f`I:qi3S*Pp@O\a%FRia70Z_.Z+J1I(.YCn"E!pQ[5,N2&`T;l;dWNWo:,Jb.RGc'na021e8f`oj:3$s*sb!?-/+:
%8_STEGmDL4%(*ZSA>i>f2qp)e5_U*5rm^*P=hVBc"@8^&4kqh+dD;hd<I'R_n8KblB(jhFX\=^_c!;p@mgbM,!lH(pQa>k"Ik"%q
%9iV67IOQj3P>LnnX:eo&\?]+d4C."-N7S3C"f#`NCsjm!N,tg&1sT;e$eI8UWeYMdB(IQY\ZI[;ZWARj(humV4WU5p:2jI5]'NP/
%^snrA?"thO%>>./gDHeQ_K^d6[h883cWfo=#5&K;lGk4JVhauH@JAI@f@>MY4195Z^8WRO3G:dQ*C\,mL_NCmWd!#+-lT7Wo,`nO
%Cr,GA6,HN1)BAu-"l"Y5Ur7__"G9BN&-I+,[I5nNRLVV]+-lR<Nj#A.hn5#9bHmQ_G$eb\Ho)lU\eC!n><%a,9RXdGl1c;?0-nE&
%WJXEQ"40gAp1EGQ'D<3u9K1\=.rdZ,%K-9Zk+OAYdUbDl$pl?,qhY)0V$tq(S1#amef3FISedEQNj[hhCUGj?(/C2uKO0)Ps+3W'
%s2?e/4.c8=J[/nh9pNWrcT%WtK`THPShrD+-U]e@2n\u/(t&8TFZW@f%bdHe:KcTh!X6;?L*NSK<tFZ.;3)9!)B-PJ!!sD'/<QB!
%Tl@q,?$iAH@eX21i1NdV*?:eNj162">*'4lOE;KKCSJu7,drXYAg?4rqW[@paq]-MWMTcbC!89uPoZ,H1>tuc`I8dt--DW`c\\$$
%mbSmj$W]eT!Nq;>B3.7?lW3pjY[@<9:il?fNF)Pg#;s9jX.KPQ;e`uc8:7gVr9g0K<`.-1rIh)IAquWE]/G[8EPcp;*.LU\o6W^q
%T-)V]=Z"8V0:`KP`k")?PoeY1hQ$FGT'2];1:Rd)c<R:!iK=N80Bk?cc/Lbqca-a_'@$2XTp:Y)j&)nhYZZfk+rNWhpfT]>'K^c4
%/OT^I)0fb\^d@7Zk.QC1.ci`02d.1;lA;U!KK9SOZ`+9?/F,@l#69jh)s3,H#(LcN_KgW+X#$pmQS,Q96gHVtP?dB554L\tD8gO=
%94>uRQtdqt;mNjo$-#N$1X:3FV`W>_qi2#GO_4Yu>gc8.@2b/J-Wg;G9^ni<%j;?Ge#X!)Ks]ZGM!</`R@V>h`2[:8\EHN8[SpmA
%-u'5?;.D`,nSt]H0WUUV^gTim'E?2p?=1,!s1&6HisrF[J+lq7:H1]?Qojfn?i=qq*+mUnT5fJ\r\$6:NC%I[]cI*_2pf[EUi3#X
%hS:'Am,P^jJa`TjJ%dl2'F&qja%.4o)mMa?UqC0;O&F;6`=s.n9Hp7PA0q:M.5]jK,$KRD@hU!\i&*SebcscT#a6]1HOE:t?0.U]
%lDIr!eFV0'2Nti=8*3*!?46RNH+Ric\LQn?Fm9^>'CV;c(]7ZV*N,pCW#u;ZV::%K<'nO7l3=o0;ZhlaQ@?IT^rAE=Qgpf\?F9%m
%e3G@$-4YgoOu_-$D$J1k[eR.4-ApYWJmsWkAO9^NE(k&K]C(#+pPcMO=LbFrAKN>'X*4hpcf=n5b/3#m_<ffd)s&jt]UK.e0\4[C
%^g'`u\u8X]_7N_mfH:[;n..iSTHC$9cJk-$:au50;;SZ^XuS^kk'RN!nLJ#cMKl?SV.<jM)Wb%5B7%^LkTW[lO:Z(k1l+"Yn&ZR5
%2d1X_>0i]2p\XKdm5J$%V>qh'8=/EMfJFFcdgF)!kr:)>[oK4_OBn6iZ():f>"no;,8jh68,'U>"1-QErf6LBZ:"P73of_35+r#B
%;uT3H4!u0\JZLFQ;&BDD37i@`c%;Vu&ZOFib[sNcPW`m8ZXsLXM=%.,C-qC<7L5%cJ.4eY1JL[S`R[nr(e[GKPe4O1.I-T<)GF)(
%..n-19hU`\C>$1V%E)PKf,";O/'\)gDdVW'f@f<D6%ofjj?.hmeO0[CRMoGNAZa'ljc!&r<t(YBAtB"(c.@ZR&H!>%A1D@T//a3V
%8n@HP=@UjMS]YPNTppm+V9W7t7X3YU:E!AKWDO*'s'TW@\`d[l<C_6qd?H"j1TGFlkssZ#@\F$DTuo9-eXi+.]6pHS^1UmREF%Y/
%cm5SAS_K1kA>1.A=ua?IMFU9p&C^M4\5-j&Z1!dJh`B4QU58#s(h9+EKTn+njtrdpiX$f0Q;dB'M[n@n($)=fp3*<[$[*m%c]1/^
%:mV+&"Ca06\LsD=`t<QCblm^+.ilBQ4Vjk)oB:3@dr3uUK&'WEY)DgO'Z&qp$,]8s$g4!7j]n(jN6SS'#Q<GB&,4t6FdcRnnS-HG
%X:IN6(,<E9-:3'`\pQ'$[GE4D3"uU+->AQ?'m3:L,HFcPlJHbo+_&lmT'GZp9]gDkfp@pQ:Tg7G"RTpIYI*cU7C6S3n]4q9D%Qac
%o:a'a<@#[^.1brFA+H-fKVRG,4PK%=;=D>(2-Mtcf#bg?H<DDjF$6)+]gn9/TT%Gi>=Oi9KF+rpUeTH`SDoT9/OIfWM!\`]kB?_i
%WJG$SqLA/t6TsPKruCT8)!Q(1NcR+"gc1<1[HGdS*@_Lj)""1.Ve`[^S*kP8589E@F>l10\uX@FgNn<$X<R#=g)q_eBgeX8B9<+.
%ET*R(c!3#`E=Op:Zg8O2%4pD6H;&J<pI8PkCLi9LgZ5l]h`%qP3MsNOMsA.$!^"hjn>2M4+UpM(KSPV5n[77,/:HJ1^3,tq-0,77
%6<)`X"cR%G.&ic)Lp6sNH^BGb#UQ$2A\utdo(m="0@-mr@S6a=d*[.3'Am'h76*@tHD>0;&,Xl\6??"1,.P<L.#048-s7>Gf/9e0
%W5>PcD-QkW>_V0*#0MSl-rfW_*c2?MGVr0W;?Ifc%W-P*/570[AbNKH!.m-0gt#I@dU;VcC4"f4jB;iY;Y]eIFh`_2nAf%XOPWN0
%+i=dSJiE!R:9fN+)h=!Ao^cW/_*WW[N<ak-g/J#@&)elA#$,\nB%ZJqOoAm]U,P+fl%SWrAK3%8I;Y&A5CMpmIq)FT4BX-B/eXMB
%id<E9;AmNF%H20eaJ:\"P(_NY#*%sQ3>-[9DTg^-Aks(i7_[/\KloL_d\ZQgD>e!alP.0:D@5s(eu*js2$NXH;%Kj&n6bJjV=$Br
%LiXsP^,A<VS`\6:^=UV0PkN2@\JsRa^BBK\Lt=a(>e#6m5t=[tLC6u"^f#N?Vq&\4gB99kacKpjK$BsGRM#(HfhDesrf'>VU]ms>
%F_F[,YRWf/g3MBBIjE82(?=PRC'cH+>?_V.neQJ75'73B(3P;fPac1=4a<4N=hpmp6g4$]\g^M"VmHl)lZ/%Oo/\WQP#NuBVE9bn
%EN:^-6h%QFdjHM!Dt,*9r8V28I8QQ/37EE&p\9T%PXC-PfC';9g5nKL\csT8L]&,hC"p&tUG%rC/a%Dc8P`Kb1!=bVC0`j_@[+_7
%<gTXm&iZ1O,e+[=WeAEUC+/m8e_FSdd%)<BASI=TabplM=C]61Wmdhepu2$D..AkT@#Ao3@kK=%Z@l*p`"#G$K??2(!?8%N\dnQj
%=A'P<D7/ep`[WXc``?Zn#\lH*dZBO;a!,._Pc(cPH]MQATNn_[_%8oWYk68ZT:uu*&"L/<iXAsj-C-+@dJh>Ji$(*QZdE>>$3Nt/
%R,Iu>&m8#iQPbG6I2G_;o1Z:49K[1a'5]k_lAERlc`PQp7c@j#M\`E&TSD0V%b`AAZ)FBbeP/2@6kq54ecf;c(1+*uEhtVtHCV6t
%0OQV_RcL]Fc)9gejJsa'btuqp/.QSB8Fe"k#r0`2A&9Sbp#Nl]+VMdQK>>3c'!&rA;M3IQl4:?.rKo'A1q-!#^2R'/9;,1b&'M/f
%LB(a:RA?r40'8>B]=/*MLkFX#Hsp$_6,&ZR/6WuddUZr2,R.;ZhIUF:R@rIP5S0F-njlf\i4nb9.:gf.[)DX26jnH[c=]9.^?oL_
%U$k&ZI^(hXXbq,qVMIP^-C>&Vc4)BNR_$I.,DOp"VBhm0nV1)YSN0:OYo,tL/nl$4lDD=D8A9qj<f7ptY!SNgF3hW,f:s)0'Z3*]
%'7+(2eRLN_oR(0aj\o2\UmiN+"Fokq[5`h<0O:m'j33R+pbpBNPYnkJ>q<a8E%`/2h`8S@O2LdS5OmU*8A)aMRM>FID'jbO=<7!V
%KF$h@S]p`4U_Q[tS]F%Ab2M1D(<$6)A^K&@RMOB+c+5/58/W<`:.BSL1>7M4F=GML$.fCYW.S"3)O/U0].H%HRsXeLkX#fGFWN2h
%LUBd]BW'@7'WI]I[@!lAfM4R@J^Jd;QY9<LLe,?Foc<U*OY8FLSN=<>\@0<711M_g/%#OX<Xb"7I[7RAk9J!j7F+]S8)&5UUVENV
%"&6&_)TiAN7=5RqK\fL*R:;dZ-CU:#GhWi#AF.<p0!>H#\R"a%NuWLn6=EgnY*<efGkp&T7jpuKCC:#KX@'t/==NXSdVFhd&cJ&`
%Yba_*"*\\Zk/S7R-e9TPRLrftE\m"QXl`g)1kOl(Lo;_\D2Gob]N?5[%M*!na>L.\]<r6mb0+NG:H:%>N,K<<dNNPQ?[P_-M^"Zp
%RlU3sW=2M8r3@Ch(n,Abpb&]V*k2j,O'#<fkd;^%3-j,Gbc#E1=+(g^W:pM#=\fZG:,1qr2!&>[]o,CCY*Fa>qaUmQ'nKV4%THoR
%8r&4]NRE+sI%?uBCDO5t4J=@p4@1m91RsbA\n-6Kj4.Ob5&,RXn<;&Zil/g7;t0FcXk)aJXdBe^QcH[oe5"Z:AiR&@pq(*C*gi%h
%?X&2$Q"i@`\p:H-2P2Y[aYLI\-+(unUMUHhU./a@ZqIXSD2mD,nal;UAL\`:.)HSH?,@"gRrXaDX1hLPQWPm_e/+EnIO%3P.'\c*
%77cEC<\.<TDi\fc!^pGMktLgQ?\hCP`ar/T?>eQ_FS6[tilL0V5+TsLcU!&`Fk2d3AK!BqFLIJB[@r38m\F_:#-5h^CuoP.D:KH9
%q4cWY$XrScN^7):QZ=%Hd&2b+\gV#4m++b"?1M+?:?NjChR.jMRm&-q7g6?>Yn0XRrFiB>kIA\@78+$C9TmKPofrYmH3B_#gp=&,
%QR$:c0+MOnW*JngI/ZFX9WR%pCbKK[7KIB-;*:(ZIe+1lH(e.;ba_X1cLFnTE"qYuFu&hsX"_3[o2#`=)`"t]hgFS7K5#l%5ia`L
%0%h$)Hpg@kg]PJOLG!r,]RN>]S2nFJ2i_eR"BGU>5LIS2-2iF==ahOAn^.m-X*0qIA&?n)cK2<*i/-?"7fI#aDh'^US5B+CoD]qF
%=:eC-.6ch%3Ss]p'EaIej^&&nb,:uI\WAV+Z=G,4)3H^s6mYHbdpfmX)W(t6h3'`>Cn$")i_V5,h?//b9\*c8):E<'Nd5[g8*\Bf
%4YZt!/Iu4I)NR:r,d9U=Ru!o?5Gi"q51g_:Y6dJN?PH]/iH8S>r/g^=)U+Nbq_=+Cmc;G^4Z(IU2Z0.8n]rYbYENN+Wp(Acf>Mqg
%MRM(S+k-9t;I8#!NKJO3BJLJl!k."Ya^\P%j]?_Dr1J1@#5)EbZtt9A,[=VMbD*g`i,%P<@>rR8CQOR,q;?5*DR*sik-K%[[sp,B
%[M[EJeA5.AAZU6?[HQMb\bs?"7W7.#&K1(NQH)JmAiIE^1<%*\l/-5RRK*XD?\=7pDp3[4+u?sg:N<q_D\@d+\]>R/EPsDcYmOp&
%'n2'8!Ye`f>t\s7/Pl2*([pla3KS[&:&d/TB.pmT:JD^TX>Gq4g&RL:(,;#dJcZ%eUt\3g(29@h[,@rh.EJ<cFjleB)b>ZO-KEVe
%r6q,+B/\W5RZr#L?@.M&!Jm8NL$$aS:Fn0+g&h3bj*127hAWqRr$[o88o/T0T\Hd%`sFAOe-ru^W_&JW(_jnfQ=RO"E7A34X)@1R
%A"-T09miU4E&J.3Z0C#LlHM_t#gd`FE*;-,]nC6?gL>Kmb0kHS"AL]G=""bVpiINjV9sAO)mpZXCc@94^i]%>(P4GIEPfp32ZN?Z
%+hrCdR=Dc?f=CPrk$sK%&0Em$Da'G'EglT`;0>C+T#Ni*7[iCdZBK89J?!1e[u$-ZU+OQT\LW=37L"HVml`@BB;+IW%(V,1;G+Cc
%iBd60A5K".!D+JS*3"X0.7lN\`msg>?$#sD=Jap7>h:qq@@@Os=F:[:bCJj/P#ct>i[QpOogRUtDo+GW1&,-F<Q[@#SAiuBrYTE8
%&Npu^8dhR\hXruQ(K+jYV5AQ&c;8C&O54NF@Hee/0%6+h>p..VhF2+\%O3V=<=1?l,NdM#1E@Sl_#AVL:2Yr]0K;NmJkOau7futE
%Na=SVRImq#^P)Zc_kti++U':Ocg>-!g1Z__`SS6hY!m=?<t&?oB]VV%F00sEN"YDZkL19)UP?bK49Sp+-Uu'YP$B=Mqf$BB=pZ'Z
%o1+dKa\`[c?C>*-:sE)aS7^O(A\X7%EDJ036(Do-7\Si2c`M@@asWBOF\?1m3(@BX!ODIP%/SFc^M\k:Dead(-7UPLTDpFk@#^.U
%='-()2`/hM'3e^J6XDM);Y=@e)Ot-q`8@c[BLVf:hqMFC;h<f[@c2LE+c$K6kL2kcZEM%.KCkrkm!!Sg9KuY%H&6)a^$Zt+8V!)O
%'%Qoa3=VbUQbR9m[r:S]VXZR#i3SDD71:+>#>kcF<j<KaACIo>MfRh&'=a^n=2fCTOi7l-I0pHI,<Hi[dm!L0B"_KRb%W5aK)n/-
%9ADjf'X82N$F'Eh^4]@0Mc`Z/hh&6<McE^Y?$^Cq%S]o8l$L(7O#-V"?X.3RMAo3NmK,hdmJ*a8NKpk+o(",6U\W''6eO*Dh%+%4
%>2UG?q0?&SI:nlkZNO@ZWIT^K8p"?IPf4oh<%9.t8gnR"1D\eP!5ZdSUn%s8Ys:_2+F"HI"2Bi-JhntTA1NKkX^@D*Q;:u:Rkg9P
%aC8>@+HkMK,T9%+-pn"KWNQk'\jkek;c)/#U;\Kt/?qHla")TD7t._EUE#-<;KJN@.S[\F)iIU-jiBnVq%r7`9K^`I-6\/$-#'o>
%B]A2<nb.CEO5hM+\"2P[h/bduIE$,D=k6+2:jM6S`_#'jUQ6kfMmn8i.A.rN:kR8&h2"kt=1@NG6IM=E'"RT^.B3*^3JXe0;,f0C
%?R+T;qSq_0lM38H<f#C!%3dX+0S[ddX&!P]To@uYRQ/q.,o:seeE'CNE>[#0Tk#l!Rs?^3W[AQ[[ET+(>+K*bLaLonqGs1Ho(0S?
%HY;m"Uo[=%IZ=M6mg^k)lVrH"gq5s48pE\6I83io;"Ndi>i*ZAjI/m,=3\JAl67LAjGo)Wea9pVr-A)Vh[Em/jb*Oa[:8c8gYUb_
%h\3>+f5.Xl%*\s1FGiScKKB!-gj,erYpuh#c);$\nj+F@O1;=.B>9=WT#F%N.`5]?3.31?O7BI"TjQd&(!bOI*%\!V<1U!mQ\:G,
%Wi@&##tCrQL3s?4KD;+U!QFOA8flS)6siB5XTF$h:9-&Rn*kr&4<!i\'o\sb<W#>5?#`%_(tN\%pVQumrMopeV$Cm7iL#F`'hM<6
%\Q9d:QF@]7C#4u(1s-*E2>Ona-0UmlSO9$3q0AJ4PrHE6r:[N.ramkJ*P(oEgKUBBh_r6HIE3QeJJE,j<c`X#O60**7"eVeYru`]
%JP#^-7nk5jKa(4K<27IdH3p`r]m@F*!^0$?c:o*IqXRSOpskeH9ks%D=5N_5gA+H@<^3r7c7%/CfdXGW2Hi66(sSnXg4i;'VmiSZ
%3@nPu_Voc06Fu=+mS`0.PX4S[0%m&AZ@\[;\'$6DW0hpt/!&05;JRKqDG)FmA46N_?G9OE%H^of%5[0]4\9oVeeo2Zm0A,`;=n%&
%<9Dk*;U*O9>jLJ[N%?PK_V"A<#VZNVlBH"W!]Yf(_41qC_i%=Ieq2/F`^asfbV,$W4E'6B4n4m$XIml4%@hfdr>Q;NPsePD`d.-=
%nH;dJpEHc:2G.ZAlV.V@RF4kXHgiX)4/j(/YT3I"eOZqHiSquV4mD?0c>uaOq<B-jOmFS3[h[>+8,(XR)j8TA'`p?GCaP.So;o^>
%ri2%:=&8T03jMs<&9\&b??B_RMiLM++WMF:Ph3/oh./P"jVT$,_-!k&LS\O9+H81gDmY;Nl..smTq-3i/W/Jrb%MHmh8mE?l.SQS
%1+EL:af(;3'CKi9]oYb&,"4b@A$kF_XtA!:C0\n@I%r-^";9$=B_JgK4FM=>8(M<3l2Dka4^bt$.md:"CML5J7XEik1sK\OhAAm`
%_<#/O5OXKM3^UPImV(o=chr1ERlqEur`F&Cc0r*C53QUrqeVqQ>J$A!IF&Ni9;akPD\Qqm5Ie?&;Z=LH2Yi(jn7l\a8/1'h*UT^_
%Q(m(ohsXBIA)U:oTR>?RW%YV)Idu)=I_0dmH*Q:C6m,$5!mJ^gljuW\--hVi71t`?,<&_0^7U"/)9]+t]of+PH[Y!6^?7l9Af+`d
%#"T,:MP]HHnqCDIYL.)$B^5\5]Sof$(g5)lk>;;5U`,-"@[a@l>PPSNX22slY>I;nl3g^WrF/PEri.9YB>o:O1+CV9r:1=Oif+0d
%CSZ.XYV</F=XK\gaoo*T_IpneggDh:Y1q8h$rArM[P[pAVMl)c9Fo0G=CSD:qmc!CJ>E+C1jW/nB*jE$8^Z./fthoQ=T]i^!qoRV
%]RICT?rXmo1JSW!N)F90M+fhpM`,Rho8tXq36"Mb:6hdP31Sf]kI+X.*_3N5)PC+u"nAWI,<@h-<CQ2_$CCGT$qn+R7+[[\"7jOD
%(,,fF)?>YCKk&3j-QFGL]4hK)R7UL:d\uOIRS'(nFK+P-?+/:JllK,JD1?kC0XK?4#kQ$lVgXYiYE_Qo?OW&mIjocI*lp6<lfe3m
%jniiqP%ph3riY(%=%@M?U^.`@:7%5i[sl+t8)Bc7(D;?2"fo/!.Nf'4\L#dBCb(o:ZKGo$g;MLI6B)`gLmY\L?8aZ"3jTEK<;;r`
%jAm]Tal.RMX>]K&[e_b6$M)_*Gko!uAqJJ97B3]\_'s+[C2@>2W'6>0k^Q,(#bU?F=H21:r-c%qT/]-d>Z>E/:)\\N]8</&_I&7'
%m"*b-E8f#&]PUaD(d[R/2a,5!?VR5''gP\#"\3NR@Asm$*g$\h-/1+Sj?mLRY6GFnI?h_b+Bu+h3@TmO93PP^,j:@J*S($`:r+EN
%VI^`2r@.E[>HK#hal8F($@eXWL)De/)!Pm-8:@UqO+,V;5D6Vo4f$Rf4TZ1UR'KIea2W.(<HZ,uHdJCmKdStg>(!\m?"Q5`F'qRT
%%ZBhY=B\F*bNk9+P]luoWioE%?Fm(/Z"tFBEpU#sV;:Dh3H3pSU/NaGn.Qgs7r[RGmXjHPJ>dOH';%Zc/k#5TOS<S5/6&n\XkVJT
%6h;0?q$)e!'L2T.glGW35oY>-hWK'"pCB.l[PFF\GCMfan]RO!Xsdd7S&37H`F8@S<)+`R>qODO'mB9D1pJIs]:")SB*s]DSbt*A
%i"hWIe3(CeSA]'"LoZCO^nAUmIr.UQWa(UDo,t:*886Bt`^BiBA.33WV[WFtci/p"$U7Fq"1a!*0-XF;(sb3Id(oJ5WRkt]-91b6
%%qp2;jIMkZ"I7bdTR>P2a'Krh=0(MH,F5?P#bT2+/=fqUq9tW_=tjC`p9cjX4.>uU!qeDjX+k'.Uek>9$,`ndcnd$#!t?Aq`:BG)
%Jh]>/J4n_cd2M?S=mYpm<O"mpI'R33_0`e!B`O$)4K4%#WIf\#>\!9fpjF(2$+;<"[<?PJjb0e^Er#!8rR&OcRj`'pKCtG1X"&(9
%hqj#WI/"!V!nlG6U?<!\9'X<0J$QK([sn1f7d9>cCn%UbijVMrIoh-a\ZXDh)Q`ejOuSI",NYMGQj\GuntOiuBB'XkLQu5,:Y`?j
%*TK3GrbQhr%^''Sj7"=@iPMe=iJFr^X2^1N):cUZj!uc5gq=PrGSR5XGr@d?X*GbAkI"qtiTfk$8Qu'pT#PF?<QG($_\8V-9oZ(0
%M$K@;Zf1_[%KC?krcMsdCbejcRNb.u[#=k-gT"3;G5Z;9Wmhqdb"5H=:51b_KBAcEl>fk40-.G,9e?CgL8u(LWK_Nn3h_rfZ"&55
%o@jcf&hMseTOqs"I'AE$n=qpr.dWCe[mXR)[u`+OCRhD89':%7(l_s=5_;0-BJHAm-7D&aJaV+UM4F;'LIYgmQ_GS%$R&\XnKS)p
%BJaLP'?]P?GLI+)h)QW.MPi9Cip;terpm$_$s_fB#UmG)s)et0@]?0N9]/M_ftoAj'lNJ`L,i``N1\dU'q)*[^k$p*-JAuL6,.0E
%d9&tdpldZ`RuP/>+5R&_Wd]d?3k$H`ESet6">bHC=YC!;G9%WP*)GrX.TKthJK/I%c)N61/u&N&WnuR0?&QTf<YK3dBH')#-V%U&
%P,GoP/hUBcA`M9jB-\ZF;;-\@h5#8=Wa(6!gqYI>,WB//QBBYpZ8BtU9L1Hnkf]'H:c<Q^f-r?LmDrC,4YGBc@PsnKLug]5Q+00Y
%i:c?\h4=:Z*jIplO#X]8:LN9L+W]h]-U!dRE9!%K9ED]'0,9W/X60@-:4U:8eSY3@JJ2-Opq#/+Shr]i1A&WN7B)&R9LjSiBQ132
%J-hA.'H+sHLHU$2&?$(DI4G`T-Eq*`Lr)mU/&<ce*oI:Xg*%a*;B;IK=ar@!.kM7QUJdG;4*!3F?F?:1j:hTq%:4n5VOGVOOp]%^
%a06=GP*[P>*?='5N95M"*KFGdC@^":ceIs6d4ZQm:%P%m1L/(i*fX9,0TUp\Jh0fIA\,]*qp@>0K9!&b?R;6Qc'l/E.Ts0S<:.A/
%Su,Foru))&<rkm%eot/(enaA_Pdj;VCgBV&/G$drCCgXt]sYN"H\EbAZYEU\0s<^aN0/]"VFc*II6bMHmGGgioG78fqlnjmo=PCe
%*hie<VH2#30RfXnV#8?>a\Zo6rt\NfIhTj$GZNJU(%thM,DrLY>PKf)n:SqsMP!.W>%;e=XRm"n-cC<qK[ER7`W]PINJuHR%aIVm
%:!#`)WVtE>fqp;>5m9RIWhMaT+dHL3SF*]p6N&XbCC&!.G0_E+GqJ,V^W@:ILl`M9T/Fp#-N%Y3Vg!B?8/q6RTC!"8L3_sQCUY"M
%dNNHq`hekb+TsbjBo;Be(FOo8;Y&M^\g5modORNO<2Cp5V?$'@9`U$*X=/jemP2C]^#1iU#N*URMu>u+G>)`nJi_s<\;sK&V9p\p
%h+ecRT65r'HJY`GS0K_JFbhXQpDaa1a_@Rh):rQHO*$RtoYpel6>F=[p.-a6p7GW8.Hs3#.@hK&7U;mMg\_gU8$rAP[KY]_a@le)
%^?4u$%0j?PfZ/!>q8&r^WTt:bdLkP);S;m_3%Z*mb2m*=m$*<Pf8I(`et`heCjh#)&RemILT1M+2.#c,l>7f#6&8]@MgC1l7\K8-
%qo5?C2X'lMb9BZXr9EsRcJa:h7)gs[bn!XZCtV%?dr[Lke.Z;B9$uMpe7'Jc\5<LnA+TGrB<V=*$i_oGrIXn>>)I\oCFN!&?t]Qo
%mm.VR1R^\9SCa.b%I.YKJM\,aUD=NEGb8hH[>dEkc_0@GOi161M&HqE1!<[((gpe+Stn:(R_f`@&!7?T$PQpG9;\dUCLW0$ScCiJ
%K1U?GboIShC<KEr9q!=K'bCnJHDB;J(BcL&XTBt=!_>YdeVXlNIb<"_'IDi@;2^i(aOu!/q-^Kb8Vsr4U&!`rXKL]*#1M:BKK)(5
%W\'S26Vun,-k=X^+3'l^8=&P0%u(gAe'0sDH&P$Hbpj-HLE9@_SgqW%55U[ppAWefENRj,pI<6W+,<lkNl0TWi(QF;5caaODSk`5
%I5d)p,8sY4j/V3+BNFhE/>X-6dSu)MhKr)D1gP+KJc!JYl_b/dPI;5A\VParVDaJlA]cn(G40ku,[=3^Qr=RF8BWAqm5a'4R&<-^
%E`1M&F90<&;R"JD1D^a*4fh(,WeMh3&TJZ.QDPDgbc_a+bpjFW&F=[Y]6>'lLtO*Z>-ce>U+>u*1;BDM:gM,og9@jLeNBC&\4[YN
%!eT$0p,<JgT;JpGHBPu.aCkD:p;q(>$A-R'MAWBR689+&0nH^sOLa]rGacH)J=V4M5'fX;jt-l#NDDI85lFJ&Y8DSHb*IqKKB@(m
%^*^d@r3kEMNOq.]+Mj_u4EM5ETInj)<"4hUf:Vl@d,nR*;1?]=+mkCPrsOR9#BNoM]P`Z3@T;P1<=[RcQ&&6DQ5CcPUoJ.+7;C)A
%&o0>!8ME%W`mB_gQ*Dlkh20S\`fg$j&'B`&c-Su,Z)_5a%YO$n/CSb4e(=gu\J4B[/,10ZBs#CTRD&^mV/+2@HIn,BNs5ru]C1ui
%d<'`g%Y$uM^/8e">JG4&JGW!SOg@3dI1>QlqX!c(h5uQF'er*PUH.'mKUErM4Nsuu13pJ#B\MQ.J4&5u:M5MNB#,7fllK+\--DA7
%g:i0u-$=E@M-BREXB=eh@\jtclgD]gZTL5$*A=*H:]E?s$J]DsGr'aU`fJ_Gnb;\9_j()`hF,OqV\U<29YFV$Q)W,n['P!Pb+iLJ
%`.m@gV4`,_+FRc$<UifhZWK<ZNj>]q97'i(YB>(2D]na!Zdsr1+oc$7+=a7#^),,&X!`<ZH9<5CFKr)E/Y3#CgZP(@-bTH&^Mh-*
%``A.<&L0#>%"%!dW%L+h)<Ai\:kgPOD61QuqVFt`Rds(:\L#/$fWLEFNk:4&FsW2r.J)emdUIi[D=h>n34<b,=YgT%Ri/@h+\RsL
%f!nQ`R.i=pB/]++5VMWC7ONXW:f1tU*^.XX(lYbbpaB.6a.a\s4+1i6CbKa%4DUM.-N*h0a+&S=HLB)^W=XpWYo.`U;.IS7619&W
%=L,3[_keBZe.e36mHAek9$gUE7A6Qt!);`5MO,5[#XJ=t5MaB#'a[VYTVbh'&.^KG[*tt:P:H]C4s>?H#/c>@8NW0B<0ajPRmSkW
%Tr3]mR6j>$$Acr2O_9r3UI[eRmRBCE#mL_&]cM*+)Q&NlRQ.SYlNVsqSe2!`C)k!%5N>3H;pnoN0?+l+E;YJ\IbkljD9bWR9iTQ^
%'kF([0\RUb)Q6e6Klo"$9:(5BTb8dkd55WoS$?5,l2b>N@#Le5QI1-EO6Jrq'=lj$mT7BY(7aZkN2"G61@_Z!F*FUN%q?L%hWGg)
%JKS%.`8D$EZ_mK)-_$;R@V,'T%:A(JnY(B6i7YM"JYP_t[olaA.?NS)h^/U\I27?fdWJD$O;hhm7NaRlZ6]uJ;chrPnIi/\jaFX0
%4#sfg`Z,EB/Iqs:!,Dg:G>\`ij'44i(qs-96U\uP".cp<k$md$?;@)9l8SNd`!ehAq>2sB<l*0_Jfh)&1]!X%3C^-;a]DVT6j@h`
%7fL%_XfB6j0T\7Ul:K.<16BSnkm,1_K7u#FHZ.kD+sjfnYUPTt7V*VcQ9)L%B[dn8q%5`+N-lTHlZb:@*.>[?WN:uJ7eH`tN_^Eh
%5J&LjIJW:@a#NDV[Lh?C$d3$)^3(3D;)`+\1qKQq2i,l@7?5bVT\F]jE>.!!;lV<)@hZj&N<",LL87>E*X\^C-l9XsW`WE06Ouk&
%dBZ`J$f+NNS#C_E>dF0``C#h2VIEk9\fXt"M/FdIFR'`^YOj6lS1^/"aN%(2F8J/(!3)oeT>(3?Bq\Ou2ob>IqjHQN'n6L8>YY`8
%L;j>a4CBV@m's0l#SZ8>PGlaM)AX*^K&7MuV:=52%,'`'o"(7@YI7'FkXd9APB;$Q?SQg[-4YUqs"!_a[uJD):g;i'FX"W:U54bW
%[2l7()HqlA_m0euPBj,!+etEnb)pRimQ==&o<ioK>DK:llG&gb)FX/EoW1X!gYI2.K7>^uh568g]K3'7Y1RJ'`["3J&<:i([]+.=
%l2dtAPjQRbgg@9n2V1+08mKSl/Cj"'%t:[+q^"O^@uZTk0hKf,l)&4]bP1l&#?B&4?gc*5E=9KHGkNX>p\E.D>RjJ>F>u`n@3*2Z
%Q8pBPa!mJZ"2aH-E[M%EbV&7E@RpaHpu1uDo^?SC+*J8YR<)5h'-^U\EU#kDG$,.3G=AGkobE4,IGIMR3p$26WS`A3^TgDPO#P(C
%^rLcK)Cbk'XR:,i`fBNUU)o^U=p*a[C@QtTep./GIme@bI@Ycu`?N3*3Hd.3,l=9-Z"g*d/6R!Kf0APD;0gn9NiU!"R0.k)a<VX>
%/#^5(41KQ/Mdo+5Fh,8uDPY("QX[OKX<VEq9OdDH^[sq9R04A0IHGP\k@NpZ;n,L7#%>=QH_R+bE(<fDc1gY%&WXL`;1d]8OLe`T
%%`-3\"j7b>(dV&'0='p&"u;()FoA&lGf%4>IpGjg)2n`X=Al'L;D_=`&2:8Y\3k0I//fAI%d3G$L;7@?:nF#=G;n6QP2bLkU=[8>
%U=$&tZ,$cWJu$`c;QkH<%oh\+=`_>TFif]FCt#=R?4bn.+:ss#E!`J?FT>UV>4h(>LiV'&?LT303tYMj!")Bb!XjTscdAE88iIt_
%-T,C;dK$re<MK\gVX(:,q&?7$:UD7p>KZjEe:<L:-Bt)@6Yd*'T66l5C\U:sM$E^K5`eE.HT!ZZ-cOX]80\A8Mu.t5YW":t2$J3R
%s!jYB)-DJ@]/M)]\es`7qK!!o4/X(CB_3cZSFcRbrl0]ml&,#/0@J6&D7@9!5Z:+g't?U!OKJl$g`^q;igo/qW.R@L((R.8/SJ01
%X)YOi(Bdu06WF#OQiQG5B*8(oXq[iB0npn97A_QaA4?tY)nLtc-$t`mUb<bOW`kW7R2qpOT2r]h-LN/\@H#0%6E04\MF30#b5t_^
%(?0i7jDbsR4mDeKP)Wg'0g#FH=lY6fRq#o*pSI'\c<JajZ^N5'8Y$6!NP,fOo(&_Q]bZKsl4N_gSTHC9),([8.5[[BE+*$TmA9[!
%_#d>rBf#I#&.nd,C]42jNn0gsW-$OPLMCnO:eh\G1[^!oC*`@S(lA=h9D!?3H2>K$dE"?TU7M^EBl="@X['e=qJneQ(\UFnE^MV3
%.l=dgU^jeaGP"gV8k#55;9jTm%6tE1:fYk2PMj;Cnu!f\_Rb&N$R[4;*U0Dn1df`k'Uc*-1]'&\10V+j[7;mjq3./?0.gIN3H^NF
%k#\#:RopU7@\BIl+4APDFo!Q&:%hI.-CdFjI"H4?W:BB.g*'HHlI;jL"S,u"c68E'\Eu>k?!^RBJpHkNnV4F:>]HWUi.A=='/<=/
%/Y\&s0cO#5aiZrC#Z?q%Lb`&;Kn1f;M'Z<O8kF92*c5%pB\UMkdblTFL==+AXA@BL(]p;%j"R<k(I\]kqe=@ql^L&^>2=N(fq*XS
%.Xh/9b@(HeaJ;[G_mU-,f"u?TYd"O!.$b@U9+?DdlCf6k+S\W5Kh#%RAV6[+>3.rr[_:PU?XB)bN6lGm0)oPn?E-bcil#+$>pRc3
%4bIs_qT;mCrQPFe;CUu1.@9^eeIVXQ)"r(cHk,2Y?#7q'[WHT>JLpJBbmB4B'hB1R:`EE4MJH<=BdJEjd;7eaYC#I2TBVnr<(Hl)
%gefY.2:/Hl2l@=F,*^(",O1ZdH)H?l5^i95G6<r';]V:^6h=oWG6+R'-<IJ/KV8;#]'tW5@`o>KZ#j\($n%cS`SPN!F%eh"].1:T
%Qi_3UHk$:*.5co2AeaD!5/9tZi"Hk?KsDjjQd<%a96A\l^g>?\S3]s\DVWNfrT94sB)iB&N*2d#2U4nA\3YfCQe-*L#7;1Fp@7`!
%o/?i_7m-pedq9Vbo!jZ]<+eS3(aZmO88MJB4jK@7e1<X[;+^qP!fNf5n$KLaArFT>WSP+.S9*`a%qZP8o(WnuKc+itH=rY_Z.'B"
%m54!ab(<gg9<I,.'R3q"J\NY7WNjZT'S0#En6OR;))SNHc5,p`75=<+8]o#3:7B%%fDTsEP[Ug]aF24cWNpF!pK8";j5,6t'5NX\
%r4F923b.=9^bG1s//Ms@.,*<`ll,jZAgF>n=cAPqhpmFXRVKtH<e6$J<>2Vu/dj1\0'QPX$:,aW7Po%)pOm@Z`DWh[CedXFP-Ccq
%eT7D_k:M*&&M-77aTI<h^MVG0ej5XYj>RtEdZ\"0CO/fq>3\t#PNj$#ELG8.\Q]oSQ.B;MNT/"0H/=?qhbBiXoWTCih!eV!Vg1EC
%Yp9WuBOp-)@WBC#f>u#L)0:\'7?+]+*fSbp-iKe1RQ/26)JB<;>nr62+$[r&:a/+u?C+Yh/Fl^LUp>fJY6IVaUXsomnF.3DUZBJ;
%3u,BnE5sPa$*^coc=h4"38^9shpD6=R?V!c-&Z?6*h)8;.t4gsrkBQBX)rf%gnf*P,H<3+N=)3`V1`TLs7@31aM^UMN7Z2/oY"/"
%O<rXXJZ%-sr8=5jQVI8pCrsGW[!eDJ3.=$0PLBl"$">#WYgm?3V%5IV*C@c?I2>qo&XNOa`u.Fb'k->a*&f$*/5)6>d$&$ah^C.t
%Q5/7H2g]JXPmT!`7GH-!g>D>X=l,k+8Wh/KmgE#tCf6t".nnN;\,*/NH)Q(a;.eW?g<I3[gi9ffj754$V%<<TFdc\*/UZ;45@\g2
%.KZ=Y`F3cR\Ob?ErNOi'fMS<'HiLM*q!]YU2ZNDOFj7ZJVMb]pE)Hc-)!+@op+=*E3c-UZ,8BCFoMS@Te%CL6Yan.E.t(R-gQ!EV
%#UPJiW;j6Se97NjN8`,8,aHgVPP_R1B-^)\g"!AKKlW4J1&^nA44R643"2\R$:ORH@8OTdP)&;2F<ZHJH=e$0rfV9uBP?Lk]4G;+
%i0uCuUiZ__!6`PnrbS@KL5up>CU$5SNj#aQj]@Wab'W"_jV[K`3S,lnMrp-(LZPaFk7raRo>;U`lporWq/9]Cb:+sBIFdHl>?O?o
%-rNMNqHu-D-JK2mQe::Ek&hEei[Rf'$H:e;Oh-?"!HZaDXL4fTilfC/03[Oa,JO*dSUs[9!ibQn4.8Koa/FPK66K9,b!Rs-olJ1#
%@nMst2%N+Q"@pSJW6(r*Cat2efBHOJ/0P=G\\)3L)=XW3ch)jMEn;-[k1X5I!7e7e$C5a9@k5rjL0pV)P6d!PBa_summ[eD94b3t
%=G!;q"4i['=<V]8O4P%\[VF!='Lhc<\P]]_HU\pHlcKaI?9d.dG7-Y(Lps"=-`AXmcPi4aAhE]1.#Yh[$*`F,A'P,S(9R0u+2C7S
%(]4nQT^6E$jMrUB,$pPK:<CmI;>cOC]8XGJa<?T]>bhcbZ\=E;GOKr,9W3(_%IK#'in-A\Qq@@:A51$?CHe<M:/MNJe?\:o6lA6k
%Z3"=/!3T]#s1U3<Q4B?h%QTa/^AY@9]&#_6n5rHV8(4p>G^f@e[Ljf7C$U`-c2>d3odR^#SN=GQM<oOo7kREE^@nT4*-DO8T%g8M
%=ja]jpL2>.H)EjpqmTp'?3VcP34hTJ_\8mOJ6D'%m@4`jRS,c/M3+s+?(uX#H`Qga!$#+d/1s(85!%a*l5a`KW59(SE=1rqen]UN
%IZKVQf9Y;&Fbk7ak3hW@esn5F$LmE*af/;s7aC(egu9AUPfGo-]RDXjM%*uIKq5gQ5RqnjJgObCCrmbAik-n@`K2Pu&EWp-$/hqK
%$:9]1B;^ErI'$fTOjOOna3UlCD,h6'#4Rt/o._ZVcqWCj-f(+0q$5j?2D.5WNA+<rTBeolWB"HpX`<#_,IO.["NVEo'^WU#Cu:L?
%.<1HB9$a3!5i-iT:I)UAJTC4%DXk3V?Wc-@g;%56To_gS0F9q^T[afB+O>q1B8BO]qV;1Cee]t^8\E^jHu"\T9^)N=ouU/G@Us9b
%2-ns5PYMc!MAW:6D3[>Y,k\Pk#-!uZ@8--R=_I1:%M%R9,GN=h+9fAEWX;BCm*n]1//C*#$10cJ=^Q.25'][oeUVd_)q/<fZ+L!C
%W4cW6p(d'u+/TcuB'TPINl+[oGDB$C30r-`9mNPB8t'4>&nef%FCiC%SH5hh</O"K<d4_<4oK_M=^>"OVHoJ(iaREj0T[hoZ(ZD=
%'/7@/Rd,rT=G.t;b61!NIA;0l5uEIAMWJ5koMH;RKZP9acqYpB;G3sS:*6%\3DX_a[&nY62S%.Ddl_QbDf.=KQV)*^.Q?2!cON>C
%OPGr':3j'QOrCGri]q2r`e#*7U)K.W\FKgbL*:n4&dGAo+po)rXI*qm1n+2=QY>OsK5QS2d9Ifo`'@sJJk9OsgY3?dQK:0gFN9h0
%p2T+``bW%9;Db4l@9Rm>"P.?k/:M.c6s.$FYPG=(JI?=XpPr#a:%h)d<(h[JLp^Y0f&V-lVH<0\c$KAuR$`@D[e@LM+UOj#@S=d6
%&f[#.<_%%i'R%;$qUpq5!U6X_=/Jb;%5LVC]\a^FZe/HZ;QbB6Vf%>WeJfp[ktmS:R%63>oCbMnQ5BYkQ8l?qWQg0,6J<qf4Q+AL
%s)=YSJYJE4n@Ra@bX!n>*daQNW:XP=Ic6hIR/4M?Dc?Uj)(`WdnfC%n:_`^O&rpr1]c/HBAuSn`aOO0#dU01^pR=tulLM-"q&:J2
%IKGWZDN1on\Hst+%/c\DSkAJu&i$f88t)'`",K']<"q*YQr4UqNhqle6/;Uj,\;3#6`,YYZdc9=&s"CFJ4o&1;9p#18O@XrKjD:A
%eNe"%T/A#B!at'3:\Yk`:-Zq^&4i('Ul'u.!`Wp+ZeO3_=\UW-'18WJ=:lsJG)g;dAAbXOL.rJ%eHehO(PO]h-:"hMNHN*fV>+BL
%XO90"5:]1Eg9sd#D$m=#K-RIehL+#+k8kuZiq*i6krUJZMIDc^G[)u42C=<khFG`tYInV&LdboG%Nen%7u>uAe+6W=SjV@1GGa>1
%eaTkN/UJqIa=_?\VCZU0<P^)c%UaDtECTJjFc9j2nje3f4A)$McV#"oIl4<%/j-!E_ZVIR(ek3Y>te:TeYdMjEtV@=g/V<]#YJC"
%f"r[a66S@Mp.o"Wb*U5bS0M:[%iEm-SFq=!n$%D,g7\48W`O)-[_JT'dft"h]kGhYntb+NCOpfa\j?"ah!r0cK!;^65,K$T`'Y2R
%m&C;S5?%ppnsf7]J8aP^[dl:SKaJLG(mh<HhGBo_R_]Cbae5iMaZ&2Ln#3NZZJ[qMo)dD.NZ&1<[3NL2koNu#$C&?s"@<]Zkf4J]
%%%@U:<TQM[8/3@*pL*a76+kpaUIlQG&mi/&jO6DY>)SCGnG6Gi=*6pJ@olUGdB`Z&Wm$!Y(%JGAUf7MU<>C@BfGoZfNJmMq-T5)u
%M?aX30fcj[>N.T?P]U#)4ZssD/*BrQIB-\O;$<l@*UA&KVZSHNMgbe+V['P2+P![EN9L=/lZOl"1fHD3M<u/3Mm*(+cLRM5_/&kG
%de:-N$N9TTVBk^>Y)QES3W=47^`B0[p;/=I4J=5OSG3`fK)79&+I,<QAN@Ih;`;P21+X\6kn9"ZmSnbAdNX9^.bG`&%CrAW^UJiC
%TT+bBJi;D>kX)Tkc.!W"6PZE$?kB<K2SZ>4S1pBB"4(J#UDZZ860-aJ=LCIY2l>7=$mKHQZ\.L+*;T-,.Mnh8P3E!nX7q%f:1A<k
%I>#,^@j=5,Mnd;pR?;saL.6S$RmJc:lVa!!EKO_\=SfS(\hL_)Ak$-4p'Cje3+jRBmn-.(WGa!iklsLfjWQ@qrZNi"da29VdM8)!
%i\V4K.\kj+&V9b9+#W%[.KhoLfVK"6,sk#h4Y(b),JPY'N:#dE@+]k#kQ^h!R`uhM;i`,4(`2V(c9[CB;.u+!D:;29=HlO<)kFC1
%]h5Zr<&Ep7Oe;<bpYoJ-H3f=+^:;QKE3ISGN\UBo&PL/oIA\P:`ipjhU2B'%5R9hVp@do`Ip]YM_^J?3a)U<\=?Ah3,.;7_P0?;B
%C;6l^8N=:+HnrbW&;\DiAYai[a-3[5gX]q?H/-S@QMf8&<!0!29\a;bH/=b]&732RNl'gRj'bo\)Ss?I2U2Q&/T!^jX634RLg4XT
%`-010cp[m"\PqQm*i">Trc&XNn9[tm;oNM?2h-Mk(sS[M<cTuBk_Q`e%>F7:BK&/TPhj[[2t?K_GkIqPCq]_c%$;/<CGU/)Su8L=
%8uI":j@^:R&Sp=RX2"SLpHKld9AB7?f.cMk1ftg!fGfopF;=%"N(cQ)H#SS.7C@]j"P]"6D[$gGb#VfqARlFX8;%&&;ikZ[#Ob"r
%ZVRic5bUf*`!29VUTZ5ccgpE88Rla28]?;39W,B9B;DAEYU,2.]1Z=)q5gJdj"E^cI?bO77$I$D%@qrV8^DC"_l-R:7-W6g"fH](
%i9M`gNm6^/a/E*8B3)ir,L-R&:Df/I.aot1"Q9t/$PR(R$_n]F=3E=0WNAu;.RZZOW*e4rQ!BUj$FP[*59e5qJ]r<u#9I3KW/?<r
%!?\$A794h%)!Ts(HQ\Y6HeX)oM7B85=QT&En68j%SqeoGK\Fl[qf#-(!)5P>g%B`NScWRVL=IY%P5p6*T#N)Gd_&fH/GR%N$Y3a!
%*%<Uf#F1qfAP>#40HFFA>>&);8>X?Q"_:/J_H`r4As"T<qDA?:1qOkp1jatJKs')1C/>\VJEM*<^X`s:>:nY'H>$JsYi>Ji>:`NG
%BqRjp1(o7_\'t;VhkL=[:ml?R3L!j/\aT'PI[Kq`'^>:[Zm5C$Hsh.b2b.;W,[VeD3<VsOOA.:^MI_1DGkCZMs%[<`+)[+<RB3L(
%2H.!f)4>%OPCbm[0=4(["hYd`k"k_\Y%s_bM;5qJa8VX[X+(?D;/.LbiU\<f+3Q'H\RT`H><4rbNOlLiCBV!H8-OKCg_RpMc7_35
%gf#aPj)K.6\'ouJU"rL%LTB\]/90^qUH`#'MhWT[Y4Ie4WjIRIb6W\fPh@;<K&TC,MP&C1*/604m*iQS#^DL8R."X3eQQmPmim^0
%3'0O_q)PONgVbRDQ4Eo9<#e;gYAO&A->P$lZZ;Gg&HZV=V;d^`BM_<YeTjlmYd3+YnSE:166c]B`B`amh_jj5VR7W/%10k,mAX>p
%RmZ&Q"-]!!MCJ6ep+`j711bNB'p8;3gfDl1=e@5JgB`J^h)&JQXhOo=CSjj9/ooDC")GF@D3`6(=u$7hbg_;$-)Y-Fe<3-@Y)R<C
%.71$Ha_O(dbEPrhT.-)]p6-EqN4hVaBZ0hRjP4R3.A\7_[q@H:9WI[idm\F`-p:g=a!7&kX9<@gBhm6%(h'F9@dm3p&Umc7_pmFt
%Di(8-PBQ10#5Gj1T"!t=G?`MLKYMRc]_`-)WmmZ"Z7'Et?Raa(-C6$9$#hj<m?%(<Mg>_K8q**X/KW_[N<E.>i\OQ$$tUZ[.3U)R
%%W&)dG[\C;NM!6qXPRJ!L,3MoaPQ7t&`[XsN*Ze_o:A:)X5l@_#>05[MttWdDKI(`W_YPlm#5q":*(<81o4*.7,7JP?3B5:;g!p8
%_I1bn:S,&c6UuO1U[q]q=uXeD75afI;4?=bEJ@/>L@GQ?KMP\bQjLbkiE.h&U.&l8PTF6O=kUm>o,6t.*gigCmGL(0[2Ht@8!ZT?
%H$qTJ?07j)fFAX%ZOLoZ84%/!6[5"ZJ[h_K*rbeInmO"pSfA\p;!qW>fsG?`bBRKe^6eNVRUcu]e^f>C5s.B8>NXZPi]#n"Hg'<.
%:rdEY9^]aJQ]Z[k**,L4D_%^;o;;)Dc).X^-Ki.6h.rS=(FdN--onpUP8`6=.3n\W\Gao\B\3;7`FNL6VF<f.8)J+T:[hOU`j!rR
%K(jd/)4"l8N=f0-n,49WU`WPn\i^sBClU2]PcYJ,p=-=f9uCMD4\Rq>ojqtt)F;b<rIcZIT/G/W2Z<S'qVT'.lhL(&H^G?IRKd%T
%lL":9_hW'R12_CkbGrA5T7TF(3iZSDESR;.qXX'CY:G^"r:\[upngtbl.'npqR7+GdR.IOG^$P8J5EFZ/5!([e.)H_C`B#H%KUbs
%[_J2@;71$).Q,I<(BSTM2Wn9*G;0T8Fg.s]Ni`9-l/jM2rTX4;J3WS;9JBI1,q5<to57CG=M/?@chn^S.'*'<dOj`QVnX$32^(Z5
%"pn%@k'BddP\-1be!n24A5ZCk#%!2mn\K1?1`(R<cp02n0FC'9?.d96Wa2=J;ct4`5TA)s7;2od5T[g]?i-ANDo'2m<P.ILH!PB"
%\O:&*UN8e:dSSV:*-@TFC4eFh_63r)obJnJAl;cJjn3,u3N'fiHVM8i!+blS8CobZCP:lT:KW-^*`hb6)]`fo`!"f%JBOkShJ_a?
%%+0MqK+Q+qVH\$Ho/l2FC0r!Gb,B3]9dfHJ(XU%:>C<gaNc3(7l:K0rD%U,0<[9Q-]T<D\eeU)'=B4nmG$TmVME"=l<]h6+i?H;@
%aT40E:HTP&IEKlp]cSSj^#p(CFeSISqTEVJiQGEk.$O<V6BDlaOr<LM=P3k2.#Vh%EA`V:?=a_58*26!&YA/h#Ui$@G?M)l-(s_W
%#o!]NmR"<rR5`+CL06R55^B8HnoEOrZAi>PC.DKDB13juKB1Xh0("bD<mJ]X#-%XX*j0!iQn,uPWWI0;GZ[0n?^Xkh?>LXU,g8TL
%!lV9!m$AgXh_t[A5Q[A/gdF2%:c^^BGEh5r`lkb?Ve>k9X]>gtMF-cASJGh3Dj?U3`+X0r\<%s5ik4pF>SLD-1f->q:jXT=,k=\;
%&oe=X.G*VtEL;pA;,f.V)]NlN+27SKhrO2#X+8]<"fM1Dd]f(/q"aYGZ12LMQZu(A5>4^]?&2;#DA[Q_R`"_gBO8(l0!aPS)0"t?
%_BM[lZVCS8nNL84HhudP=GcRK,O[jjkC.$#,5Ed<:-="3E_lVjCTOnQ[d3AIFAWpG!%f;"qoCAoDD%od\&Akn&[uID%jC;e#+2sV
%R$#cIejX&$/>6_8MHSU#3ijU>J]("@B`bPk>O,9%*pXVTamua/i\1TlGj=;I"#(d/MoT\V?6]KVAu+Q#QticuXH]9VGT_i=YG_N&
%7Kl`tYs?SC)d6WL#*<leM`DLRWqf8frW+t,2$^:VrLZ$sIboK[n-3T&'3N&S`s4+DQ$Fd\WYPAZcUrqB6M4,]II9lj1HuG!i3eG)
%^r8lm7cK@f%8ie"MB"=h8;In8DIl+YJ47Ng%*`_i0g&&Mf.QB3@)8I/_[7C!B!94!Fj3EX6u;s&YVj&q>unp)0QBFVdPJ09UP!^R
%aJ92VQmSues,.7bfn;3`@`1+I5;cRSdakD&CL1$C"l&!B:,c?%Wn-KOW]-8;<-u6H"9C0^5Za=/"nXMm'tgPo%Nc=6_qSC$<&-3=
%Z98Y9JEjsd(L1h"AC:HOW>_.SFZ'U:OZq2;L?FZYhBIX9lsfcX%2^h,-mpptAQ>[;)u!KX*ToP?L9#qhQO3[C<],,?Vo;jg1fF9!
%^j$@rHD(+IT+@JWMRUjR74iGl4M5OTk!+&RTHW+.#RtfQQo'S49EVJ>3Y0EOFLcYa"%E<NOhJ\bTYddAe#IP?D'Zgp7usGf=\OT9
%@#?ZQ2JA]s-sg-;=HP3W><4B):U)koJe=BG5Z]uDXZ5RiiW-PnAn_`J,&Kd?'bPQ#^+/Okh5lgjkN%YFE/[Z0Q!VG@LhkP/[VfB<
%P4b>qnQjH.s8+H"?,3#jBcridhuOld$\TE(5]ds/YKH#*<il]S'K_&iih52.2k14!iF;mWk&$2V'r;//"t$P4Rn[-D;P"5\"l^3E
%d=t8jB;dk&RqD+E&L`cU$AsM9X=/FL_01ZqLK0e@M"MelOoc_;f0[JM9N&dMGMPiclc@h:a-,m(W):_m_E/q_UmP.B@L\!%JRkeS
%,UFl);H`oWoYd+DEe.R87,OLD.\kX+r6J\Ms79kmdP7Cm<i>e\6-*(V@fn]9=4*lO)JTdP9FV=Pd$Gu=#m>(2aJm;=(h;U,"7#hL
%H9hEcSOR*CQufVJNCroc#NoiM4qo9X'Z^ugFRE>Df[Hi@1=Fg47R>kV*BKp_=Yh<%[`2bBO(BJ5eRt.SiK?:mpfaM4Q3D)!@[J?=
%.?:D]!Rb1n\EtNbf7RQJ.!%!3<e>&NU[p@8^A<ihN_nn;WhF57=DsYg,hu:OU2$2H4*YGLcI@9X#l38E3:o\)rRGEXoZ+W_2p5,T
%`?ZX'9[78?g=nIJGgN<f-p*!+>c4SR221U'GpME;keY(u0VbE"(%0<\A&CopWiFHMKW3IH1RSNLY4/%0aAhCWo7t0CZHE,2o3Z?$
%q)s>l@$m/lg_t:p:n4WGQm%6VF_\<W\K?`0&Vt.Y[G`\%QU&(cWS0U_aH4shVPk/H9iTRPd9d&=lrdq@?>VhI!I(mMjbYtmRR)NF
%,P6Kg<Ct#rCa>sonf]`]ZPY<t'nU;[d/#="APGJ+qO=ffZ^SoG7P5rP^mM1R="8sV@UgPhe^7d#g:A+_-=4p>`.=RL?b^pWJ'2;?
%2p4?H"=L*h9PI/"bn66-Wo[uXiM[p*U@Jj"Al\B'8oBmf^U""!(dkKUq*u6[58th"Ne.k*X4BOYhRu)i2+((>2cS1>:/t;q@[SIR
%&'/mJYG6upG?PZlaIOsGB=4b<6?sRE5=Wd\,+2Pkr$?sF-=S#oTbgSHGn60.#BsuI9[?g"E%=V^nA3U#XM_`Ga2Kl]OM>3]<T+3l
%Dgg:SiLiN<HB0C>:qh(:W2RQo;ma[5blkFDLT-\0qEt^<\YClP^H]/K&[JBm713Bp'(i9Q?ZaS_KC7)R<TP/<f+Nr9Co^^JDl]7N
%U.pr;1,;GrU`c,3Jl\54#Z7L*7Ysm`@W'a?mC;.[CYUpRd!V,t$Fa'&+2RqT?,n.iC3rS::<T;&2D9%4c7">o2<^a1,V0jPR?U&_
%k:6a'!N/FmFY-,\n.<iEcDSoL%hXq^7,8&TjeO8.l\h'TdA1^<CPYW?K24bA.%$c8SEe&8@6q_K.@t%\7[H:<,!k</<^o3W[ACjE
%#nL:<Fp;X;-O0$s-OoMg4?%`hN%l6A>CsN2o4"oP]5+2u^?=p^GP?9Q&%P8`E6fQ^Q4^?f.1G=fLObgn8r7WdLn6HrqV<Q,BrCDO
%C&E%1BFE[1Or\#,r9T,K$&s16]=_tI)W8cNee"8B>;#u6o3TdCs,&[9iTahR"_k2FR%,WJf%W0n[N,k]rMs9?3"\fO3D?KoCq_qo
%+%CU0KAFuC(8IiYQ'!pWF5!+G74'>Ao0J5V[+?n,0iC$F,e!FZjZZJRUl45@]oFIWJ9B_&:q,;!P\:_]_1W_rSrgmYc\gRb!/0lG
%e>Epc%c9Ek`N)1L/<Eig76cWgiNp-VpX94Cb\N2gpU'%&XSb\)7$l,eC:jf*:X@37C:?Ypb?V!1C"6n46f[n:7K,VoDo#hYdqK+F
%;<[LO=^G,_7/@fn.'d@N'',<0elkpmm8MYL3`[)gqI/5Fgr`a,,e5M>"d`0bh?.aN'/"&/MUYNd0oM_[6dk/F.2hep;g8D`A>#jC
%Xr`@+&T0Q05<A#m>@r**.,+1?%UWq=2db!QSEafR+N_HP:r97NH^X0F>kdf(<4&4fU!Qdsdjg,GYhe]5nk&H9i:nWX\eKYRCf7rq
%99RgNo0*<fe\9k`MTa1BL,MVi/`T##k:;cGmXMip*9_9@__G2>=m$V8D\@HBHs:G<ps?[B72*=OPdbRS.P+bN^.>5U5Bf'4f<@le
%A+VJ2<KsQ60W?TQ`b7/00k%3?]d=`>L;Rg$LhcfF!T9#]U.Wf?Ws]JZPXP=6Pm1_jDJ"o[:N`:TPoG*Tj'F1Y@k,XYo*[W%e#C97
%R*h]4[Qi'%idIGaD$HGcMtT+MgIGP%7S#&KKsBp\g/0F4@`j-NlR4s@+Js00LBpCJL&XNX^ZqN%*s@9aaSF3&E<pRkq*W>l&-n@I
%<Vtu;J.CgPpVM!td8hk=QKUbq$VNW]W;AhHZel"dR(/m9cbX^dcVMdC0F7n&9XMC.)GuuL`l^9p'/OO6_^hBq3k#=nOK#*lr+qR!
%1Da5O@>L"'f\+_:GhRT32''ttV<hd9"n%>@d7^FBM'W/NXA@Ojif^V_!XEk&l<6@AgiB`k_$M#EmL2F/hC]:Adg/<)9ICMaRcA:_
%rH.?2B/d@rNSb-ia[9.E(__D<g$8fj7DnNt9*l/>,h@p*=P,#hM3*6[N]E@U2'`I-g3B<E(.=Q)jtF2VBuTihdMT^$emP[jJ9H3M
%PTe\#A=(YFknLYgI<[KU<6k-SC94ZGR>eAd(C3p`C1;M:3LohUHZbZVj)3pdq@Efr1&-A$ncZpY(Ti#26(j]m*bH'Pgjpq)Vaqr,
%kl\i2%n.F\jFZEC1BqTj9"KBZ6M1.ob_KO(=Ue8\4ds)bo.CO/4UOJle9CP`^;hL$[nR+4?LIE"(NI,<"u>Om+2TF`h("0Qjfi),
%%gf+%j@/Mm97ARCoY!b_")IR`k5N`fF9%Fp=aU,8]O,:C2:!eUFl$_4[uYGNP^k2n8YR)/2p?J?\tA@"D8sT5EBlRVmi<9*<\4YB
%F[BUF$t$V7kn+liD;AYj`<-Zep*/Y),qL6-p>T^j$V'`4=qYHSQu"FN4[t])JD"FtoWC.ql5-_n&hbK\&?cCpkCWTYOZa`@JdLi/
%4C$!Fb^`tpSXPG)FG-VOdk&fV7q<NnJf9<U+UGnll+Yc^G7*omR1FDDfp"f$g_dqR@jP=>;7p`><upoRj5Mq!83;Djf7A[=(Q.]*
%qdul8Pd^L-$k;Er%*QF6U9jG<]eoU3+Jd7K)5NT\.p"XI8hkt.;Q'Wo3_k^bS7uK!AK:A`#W8DDMA6_BR<C]/-c04mXAGjLh`OUW
%i:O(c;prs\323D`&])g(H'PuF^="Doe@(ouV?GF/M?DB-Cobne[a't]hp+WA%.0R=\]Otp*2?0JdibVq%Ko*af+2<';/$g?lK.6R
%@1qtQAQkDnWcqjHf=M\Gjk<X:hRV_BM;Er1W4.4W[BCY?d^K%&3Rer8@Y-"V*BZHOWZa[+)8=NS5LR>t.I@;e:SU?qllsM#nZu_j
%8T?,IY,+E2eb[Hg9i68><T0)IGlj#eK<6q-qp\G=^PJk(HQhiBKENi'qi9p>Bjt@K`>m.&#5XH"[jH'Ai!M']`\e$m]m%:aas4VF
%Y<;_8b7[O@G-!qa=^$u>*[MQs9[+VY]%@]!OqHZ>kJ(uFe;G[PZ(>['1facI.o58Fb46OI/BRIkb9p_le;P$WP[%8HJA@09?4H8J
%#?t9#m<n_PpH7MEDOtXpq]_)7WbZdB)"/T`!-Y`k+1@GdF$h:'"-_bL1(g4.DfhlY>.gOin:Q^0i51kF9)Ep2;..i(,0sKQCMTU1
%0_T!m;#NS)r_kmADpRm2g:gmYT&9l6H9nS^rWKXKZ't>d.j_'T9S21.ZV374;F.?#o"Y_?D$-=O,ZPS6I`N3b!9toK=;Y21^7D"'
%&mX,/OKL':PS(n/fp9@4pa_L74g$<h(K,Ea:_nnYPp<iZSZ1DE:Yj8'gX#]"CA$?d#=>XVK_?MkD^Te!JeQ/].]I"DT`i#<mpJhs
%<$&/`"N'Y=oiZ%STTlZIggcO4n!_;l.s/]s.ZuV^$$'fmeFTG8N"&D$a<V:!S1+O"8T:ulKF(#Bhc7hL2&I4LMl!ioTMFh`>-@)"
%[I/AFZU.^!L_ZYQ1$(1X8;8iQN+RW2E#sZ\NUDfO*%Zb:4kdE%3$tWdQ,ltr&Nf2`q2W/R)'%WXUsm<CoW/("[++uF@_,JXhc]=.
%XlArW.U7+t;O#XNKW3AWUmBF9aZWjh'\klC(f>4L'k%4jHJg@MkW=Q%RBQne`M,Oojh_.h9DkfYq)64*Nfr;O8QrXCgLZDms,(nd
%!*ksu:rTuPOm27&MU9s9++*<H@s,_=\)Wg9'AC*'j`U0CcO&`H&W!P^7;2r#,%C;KUI-8MZCjTg@$]_!;2#,49rmS;=/c%r0H0?e
%dA1G5-T9;LqCUjVdUJBYG;0TQ,o+Zs!YtB-AbQbGWtm"'S`Dak$Pd5.%Z-hUT"Shm.iMB96<>@-5S97^hUYTdXcqNB<V)K:s.2UU
%&$]91C,k6Bmm?';U'Z7Jpb%m9D\V]&.=m-K@Q;!j;1?oP"#+ZoXDbdH=n8&O.45L5e,0cFLmCG"8k_eU7d9Ibl!2l7$CEBBV*/)Y
%RlLXEYqC0bVC@g:"mdODNSn3oaBSJ;.Vlfg'L6ocb<W*Z`@EQ\n*-01Z5!1h4o:R+LZ[U$<R:.__JEh$q+YfRI[OlgD]UU]0oWbM
%Vm#BI]ZPlkMd>2-"X(K3U^DAaB#G$ZitVUVYHsU_(mqN(n=-Y`\"^>,SJb$;ZTPpQc\F4&'_,^pM1`S<j\3?%bmbTYpS[4QN2oQH
%NpIYf2*,3u/8a496ddUM]RN$Ba`TEK!*?5Sb[K<T"IRc]at&K1SW%hqiIti1ef+#5Po<#smXs/cRE/hLO5+]@'G"-1Y.:i,dBa#G
%W7&kHg(N&>UG<+p"#tV<!7egiQF_i?H5b!3,%IE1/##.Uj*KY:/!.N'`WN)2kt-4Ub#68s.UgJ?)_n0(<&CV#AT0tL\FJe;Z4NbU
%9:ECnWZ2X7`)P5g/WtGu#C'3RkD+&?j3ZT8%\da,I,DXYpSK&6Q5ZZT-CHhEXjhY<DO+@,ql*hf"@_N\VjA5*P<Fm9h*o5BQrGtt
%0+1j%AK%i9h6k$9[nnC8_TrQUVNE#bQb;ckGE7*m-0ZeC#3<*+J)3!=ZOd'Enkr!EmCi&$@bsV7h-t#f22K9m1-P7\?_RlVm:2[;
%lc@N5cpWmO;LEG('XO$CJp`)VU\Al?O#Yg1L9]I2,SO[ZD13uD:u[_W@[cjIF+q0]2Bnf_B4p]0kT@oE4MY.+BF6c+SB[RUDdI`\
%0al-`)IO<rQ7A7/'3@1J#pq-#jZR0Wf"2X2Z9ec_,aW+#\I6fZ'&";N>PbffcHPK6,(_t;m/(U7mit&!0cB_9kus7]9g00ZHE/'t
%^UiG\&7N<C\5EC5l1)SY"+nP2KBjN?nMT#"5M19VJE+Rn2c(B*N=3.sDY2A(gac&fFG9q/A\D9a(T*a`>=TB$^CY_rGd+Rd%H8r;
%1]STOTg;?nIT+'W2;cP0)sTkM^3)Jr&Sfm>NR2+UO;Q6'edo2Yq"7`D\Q67seiQ+*Lr//HmgN^6kjRQ<!rMQ`UJGir`to0MLEKU%
%,lH-YQ"/3dp*3A1a-V(Y`_/NZmf'Ln%J.iQIqnuK"BDi:Q><05e':]L8oO'OlB7m8@)o&*gYM+gOX2fjMIdg\hHG**M9r6#eq!M9
%+lIH,m3jK4X3HSZ3cT!ps'C,26t:V4!K6VIMiuBV\bhJ>RjOd0'\LqKYYD&<m@$(ee#5ZZ?$[mgm;*TkdG\nW-[DJ=<O"PN%[3AN
%Ok=0,&C=FR%ubm$6k0VR6Z;,sWuPL*^_[EZ4L+XEkh:BDo0(Y)f:pT7cIjV8S1$m1[i.fb2B*>!-T:!1Ke)]F;!Y7.I\h;T2V,QW
%?]4>ocYQ5H^X?9BPSt1nk-`jT%F*T;S\lr"!G_E6PVp`p^]UsNR9pGJ1C'I$")]hZ^4b)YoNmE/P$^,%Fc.3^S#o(*[*M">8JcgG
%@BYZ3.0UofI'AMTcjIYGFisTW<CP_g:4Ps8.u0"0V*mP3$S3(XVu$!pMafk+?Is2nI*LO)Jd>m02[UpRo1$k\&lXi5DR!t63'eB9
%UWNZB[7(BMVJ0C"Mq@3PXBd#Q4ZMAJV4[bXJb@pH#nR%[DEA3dZU7h&T&3nf]Ek(>"_@>cf>=kO&-3r-%i@W'UH,aq_>TdY`+*).
%%+8/l2p%(npgb%1&S,/@3g<9uH-XogG\7t;ZEK&rkHA2,?hWW2e2SH/>(OK+`VISgf\7nH$:u!f:D4:\9UBNn_Na=LPQP49XN<PV
%@DHSlc-mGhS#m`1KVbq+LL1`Pc.RaRaX^^&A/$!fY"r&R4\f'f2Q3kt`!MHoJLBkJB:Vbj:d/Z1$GqdNg)5qZ^5XC#4850!)hY2A
%fjCbiHEfpP90K/F%E2%MW<cns-_1751".]:-[RXMK;F(o_NJi$>Q%Rrr/kLY<fAgTT4rQGkTkPpo?0)[.'K_Allf#J:#W4?J3L6>
%,TlH)&;"PWk]F<*%-p\;1"Xi_#u*EBEJZZE8on*"iUtBA>A0'[-L9fDK[?;mEjL0:l4;=U.@3cL!PS_#CH35Q"K,jC%>_.9HLm@b
%(@P0M?n8fV],*&<qr!ip'5A-G+E=GANN3#A$$oskc2Y)`-jF=H+>i&T]K#N?,jHZjN^<MO"urZkAH$?0,ZSjP46]0m.R0U1"<AO7
%eYT8pA:0lF-G2'Pg)P<=BK=-]C>+fX9s&H5cD2)nm)7ZIQKjlIPAVJIEnBgOHWL2=WhS$LrVU.ir]s<rjG!SMr*)Cq"3LY8&ah[S
%EkZu!LiKM`]U;Tb_r<#$2\QqqjI<5s$4j:END:jgC`tXj]POaMNX$nX7-tSIg>S!5aHhI\H?`V#<aOY=gg^gP?:q)^dNnG.6'$/X
%,tM1RmNJlOr5=2L-O*:-D3qj30(<;@`C-?q+W>.Bo>OqS^.d%S4DUot:&="G"P1/'e$"`FmGZBOYjOXqXYLctLe3^Liim$46&qD9
%pI&XmXGKpddirF]V4;0Y,]m10'LaL,=)4<C`/FW2f%,/K!3.bQ'$]A[JJk=Z_t5XYhbsiEnI[f[<OmI]OcpTP@;;Z3+-mi:nYI,"
%_cjFnQJ+iNRoUs7F7<>qLbh+7nC1F@g@XjMG"P4b)_tY88l8\HbuMQQASnJb#%X:OjkPV.TGBnc7Ba-A.d'gmdSE_a;'DbD*3-'K
%^[g-/,CTC6PD+!=;&cd5[ifqA;AKfn>88m0CL2oe+T![(W*bJiXfL%m[6IY-3f6R518OUJP7pYc5nH7dejp!d7dZ&r,ek1(^0F0f
%$V+sBCS%?#*g#U\DdRq]^V&+sqtF4dJ(to,JV77b;%:Tc]Ga!B#K1S72iX!cS-e"FM10:%NN\YjU0?cH/&!"gndETTPPEJ99iBT-
%$X&amXJ6EE\@OnGQ7(PhDFfIX;]n_QHs%c&J.R2&B&>^/4qe2n/U7K-CBYMC_e]W-QC<F\kip98UcB?NO0hC5MNX["Yf1pak+K6&
%;@m:7KMeNQ&'!B>OiK_?nJ[6[QF4tjqN2_8,PtX`^H=VnJPa_"m[lV=O3c\N=F$*9K":C8p8p1:j)7%_*a[qdhJ`>aXRfGq>3+_Q
%Qd_Q?nf[-GU`)6sAER\,/3Lg-X9<>f>4`YRm.0TjVgA.uYdCVnOBjd's/Tf2_>LD-3_@(`[.20aABk7<:'jtHC!fo@$.C$46P>Ec
%FLLOG[QkE'<_UV96C_Zia2]AEA'6I0G?e(nR(@J\hqQ+BR?2iZ?k40(K?6fT-X3p?8j+MB#E%BTGRYluL*biF%BY>:5[!3ejE2;&
%6^PLaWc&uh,eCZ^qT7Uh#%fZ,q(L1J"AYJn`u=81HSB%HQOo=re,d-gb%PM2Pc\5Eb51aQ3HSFhKU'\-=Y'B99MIi9=j$6O-K(1J
%<Q!(cW\.=Q8S-%$,R'rpjQjXL>];5mOV=<dpF;T#/;79(d'-][;cYlDE]-T]Q4E)H/561QPU"cq&$2kr7u\3^km(F^coG2i9><)!
%`7)"G1=s%PAG@UuQ(%MG[4`e^@,fZi7[`I5C&MjcLEY.&+$)U*f+gT*e4[o"m'7D+K46,JXI\MAW9DN.h>RB[AJ]@f7Q/Z0e"A+<
%<PXd#1m3"Cpq6_O%F_JC[=]'D\@c-VS[YWL>-**P[j2qfP3h0(A#1QrmnCuqip=@JF5%="Tkq1Z.G+dX_)>=Ngeo8$>snRC9_3YO
%j]hH-R(Z)p.LWWNO*f[oIu4irB@aiX*UMcZr+?P+b7A5?!XR(&,'Kl[)JO[,q6fY7?WH#;"i@/,]l=+TF/EViXCA^Pb2(1td8+-H
%h/@0In*&><0E:e8(Sj#Z2hWHA%SNFd=Xdoceet;;japc=>&'B?f(4Pj?[_A:!8)bu6QfuDej3M@:&k-)7'@m31Z0:\L`.76`TYSp
%j15-;f:Me$hsf)oG\D!!k$LhIG4GoNR2uL*Zu`M`Zf:7P_<*9?M72mn'mJ7_R061k7p6Pb!X!5H6ch<&14ueNV?6tLSE&JF8rlfA
%+LemQ`lF+%lA;<8%+41uh_.lBQCh2]6>>E_?]*n^aUl[3aT4IPM+K,/nHH+OWS5;UBi$`nHd7]WDS5DUdhk^,/`/O>5F2(]Y0f2!
%<>/u?(/@U/IsuV!K$).,<TrUdhLj448Dq\"roPZgAJ"NIO8X#l2so?mZ%%)ragQn0keEe--[J*aBU'dDar)QX]sr(bg-^^9ib0"5
%!omr3D]hjVVG2\ACrpJuDTJt1)/^^L-dmMc8!=,?m]!=4Lp-r,ihTfFrGP.?6=6&PjH'@j8rKTB%?"/JFi7-,pM"2!bD`9%=cfX4
%=:"W(ej.2>Ghr*g].OIEoboRfh5,1_RAe$h$nln>2=0r3qjKJg:aoYKkd"@2d4H?iW^)E8*8diDW260hdtl(0O@J$(8;q;4AZ7.3
%k[>m\)fdqSV3"n5,75?k0@XfEirS)33-M^h!.0I*9aL?LP"BX#:2F:fJpA"P(/1_r\uj%tm4,k)-&2H^Pc><ilD)B.Rd_=ld3dDJ
%jK&6VWnLY#ZL/9n1a9Uc:u][.U,YX%l2^=1">-KY#u/2u>l[Jsh:+J?K`tWj"*1Yg?N]B*P$QLVp#1N8=/F+1H8&A,/gg=1+'qrD
%4.$&V9<T*R?oP@HP/cl,&B'Uer>-\>Q:7XoAJl8CAL)E])_c/R5EXuAJU!Q;-r5n2?;8Z$5IJ4"[/O^U?s\E%+l'k75Kc$IVn0'#
%#[KNk;.5k,k@.RC]ZY)!d^YW`SJ)Br='Lsh3cYp%ZSl_OT3N4);d/FmAlW:Oc',3:=*t-V3EJGSN,d`6_m\2#G;c2EK$dsn5d/jp
%Q@uVd^cH7K8\bZso0F_jdqk3eg+M[I6m:]N(5CA&20O$qIM5pVd&I;9^L9LG5ZolRae?nYOiEIF^f4JK>Etl6\tt_!$]M<#SKJ(/
%\OJ]S4&lZejdPFYBRuuh<4p7C%2ImBF95Th/E:j&ZEuMJL!J5h=,63cjJ1$\GWdgr-_UD?Z'QoigL&f768n1ZboBY]AS$MmV^Y@M
%06VQ,79#ZH270/YF%W-dL1Ss-`V:(7(do(+fY=Y]Ljs&WMOfX;?6,UcnPmm*3X5PgTf&WIW<"/ZJEngQ$9a=,/lGRe#Z0i3f2t/u
%H'5!eJ@o6%d?e56VgO.>pLkr4$t1DC[1mN+@J,D"Wc`,u80RR0Leb"ZIPipqXLQGaBI3SXVEI5RN\AtkYZ"h1*G]5smH-!eSAqJ1
%]YgA:Hi8d(oq0?Z4hg"ZoM%tqW(X0U&BA49V0+3+Vn1tCqVn>oT"#jG:20ii=<c<f@&$e!s4c8ca2\Z2Y;k/ll*VDei2Vrm!6hhg
%:p$T_*+UBf,9I5*kNd*&Xp'm7mB6)jB&$cDjD+K3R-j61^fmk90IN$!N55.i*/KK$S&X$t;)PqVJQqYTRQ22ZL\2o>DR-3cW!VGG
%i80Y7h]T;TEG];Cfpqa#rVLl.P)p<\_=-!<i[tM6pjEK\"bgaSX88X<SbDoQpUk,9McT_Pd[&N*/l1Xp!n4u#0V%_i:@#7[QD>?2
%jautfi!!*'AHJc+hIVUU8N:T[#I9)L!Mq9PbH\34J,6WA,A<J+C\%M30GNkI_iPV:_Ok\/K&*[`-2k]2il$]]"W<3n,8WjKj4uuD
%1bS'rI*d<n_bb`n-3liobA5:5_k,EnrF"@o@30kkdQtR4\>]*P6`VD1U[#r,`$JBSn)D+[D3!*2B8`9LV:t`l<l6hgXVf6"</F%k
%YcSb&mYWL"8ZgNUc1/HkhARRm3R'"fmrdu</-H/"fVSc'MMoQa;\NckOC[alpHE+:LK"Pe-NuLj,E60ectWlHZ'^=_/_Dba>&7ls
%ok5n0q95RV9gjiD:]Gk11:*?]8,$Q3/#JsP/R!?+>bP0DW%"Mp2QL.U`g,S_/IXWNVe1GP>&!+c^9)F4TUh.'nZ9R`]L.P_R9B3(
%2uSctAn#D9N>D&^AWa=2g=J9[i<g`sE<og;]UNDu`c=$YWMd7h_Io/.l?oq=Pj=jDbs+&DJD"AS[%#36r&:JBkg$TG5l=M%Fd'0W
%YUR2C6'+>]A;Pn2Xj/%nbDLW\mFgOc/bb.%\h)Y_1@rHD+'R]MPJ)+20V;(["fG^5i@WRWAFXK]5tYP>>*0+?gS=_pd'<[uO#Biq
%5<_R:Gkr`bq>U3eaQAb(QH/;,:^ZN?`.K-?pTHg6r/)#GnOL7ip,=)_KWV,L]4RmFe"O.sZ-@]1+:(MCc5?i83\E3+^"6P4R]-+(
%:+Rrt!)j>N#U]=l@VLPm\tK@3i-:XJntTP@S,E).O/.\72&/!"AGnUkM/],f=*XY$l?B>_,\#EI<-it&Wc6UL,uHeOr0CePqUBom
%IY^nkq=ZSgO8[QLcPu8rLHG](c+g44ib-qLRWN?Q"Vr%VG(i4U/;7oI$e0tH%F`Su@m8N\WX/q5l:FWg[EDCgC%A'6Y"Wo&Ie5^i
%<uC/1U?0ZjEXaW9#&+G8;o(E"DPCC0*(>4m)((20I+^U>U7C"5TMp=PlU<k,RdQf?q/2AhM_u7H6[QI^Zo@FgJ>(d<JM-rg=JJtn
%Wq)LIA":^$0MH6L\ACpFq'gtsYJ/4eAJu7u"NN+VA!]W6>6W)!!=ilp%Z[$r6'5sJp,*<PYSI)o18KAnmVQ\Gi).nSWq4;Od5?)%
%Ql("XgEM6<i[thW,(`iP:U^3Ukf9!o\#*:$=.Q'f6)RbC,0sr*=7,_u9Ufoo$Vjf>`j?>]E*2naFM-G(?"24.W)^i[70HX:J_3rV
%[>:49cN65!5J@!2Qsi,\K#5WGYh/e$I/KN)b9#/4%TU8K$;)f4_s&EP=]\I&HFeh@Xol.A&H4STH>D<D?0KeV2(gW2mAG&NqQ=`T
%)C^aPU`IoS8-7J1VpB,$YCeo'o#nf'4nO,c^&K:!SuN#+_\Sl5o3%!dq>R`4ht:0<OMLg2>DWeU[M^W01/K3VTgXt/Aa]67<lNos
%\k0bLkjG]I!/8&/@c,F?kI^F_^.=L]@XLg3)Ns,NMOGk0m/8LaSDB)BID#e/AMhjnYAD9)7RqKh!8Ddk8j+e&M8jEi&&5JG%d[KN
%2^O_jb,-13.'pP5ku4t024>_]O.&@_NiMm6U=!H=4tZWDg#'GL<SY=Jd$CG2=#Hg4d<Tl]9Y(GE)70A4@T0Uhlkb]LMN[q$/^E^%
%XQ``YOh?DN$W5An7YtGP>aNfRQ]jctd>-:.Q$/Ro9PK6;'Drl$V\U9\S#(.d?nAl/L`ltKM&Z(,!BG?V_A9XGW(p+,`poZjO'#;[
%3`cnjh`;n@*)#]VP(WXRcsXp]7.IS5^)6sO/9#\.<3=1ODj78S,>)*nl\Z#FRLh8kRK=tRTlr_OQ`1?@A#_OYG;a^]'VfGbOm2Zb
%YF2Hg/lP/@.4Q[-Mg6K)S=3!^SA3`o8VrqDM5B/.e0q=..-?jA[4!sFr]=t0`CaFD525TqQkW6Hj9hr5!bj@e4]Po#$Z\=UIh`s"
%3`5>?DR9<H%ht$8_i1F](GaA^j^cUg`[hWpq6I^6JrNcFQctGs,'t\h@AWEu47-]Qeqd(kkJ-e^VChgO#qI(Ydm^d8)Wa*&b8R7R
%!cdekg74u!X@0$!]GO6q*(l77H%Bcjo%?Zb:Ef/P-8n`^\PmLu4s;Ta#t>mR&knN<b<U=Is)7A]H7ZUe/,a?Ns.Nd&$k1M*IG^Oc
%,SrSIJ:bhmfU23XTVpJ)M!67G-:NReIe$\np8LtjI:IJXP3h-8d8?;Z1\WbM`/:rVLlms]?LcHqA5q^lUVpLS)T%.Oj9g\2b/t8H
%iflUa+pQa%Tbq*)\l\uiS?_Zo&C)7_NV,L@]cci'(*1]i.Z^"@EY]Yl48h')r9&c7UP$,\g!I%QZ:;n)di]^-XrBUSRW1$mC\V%Q
%-A:Qu!s>.Nh)a8:BT(uc)O#[T1`1Q`bm^i=\k2A"qhJp(T*Q'n83L3S.lg5LY`:%%#KW2#m-J#DpDG(g:9RnI2NoD:Os0,GQ]7Pe
%Z1Qg.&m;kYPQ8<O^sU#*<<IiW6>Ri[TkXU:W%=XZ;(!Sen2S3^8e,_r,NX5l?5=C/+`1Ep+(F[B_X'TrJN;"co!<*o*Eq,@)3)a#
%3s$@Q]G=)t.Q8-uh5CA/"`J:B^qG?t.WdQHfT*Qp*8Y*X#l?4+:=r+Fm;Z-A*jYomNtgNd7RV&AZsn\aTpUWu\8pb!+q8UdkseN]
%dl.LE?E)jkV<GkC.fYf`I;^DXqpG5&:S%]6&#*:4h]D`Ee3H>%Pn:Rj`Ms&gatX5=CPn>J1JG,m<.$TlXjKEW#`Q*g@;:<goRpZB
%dGaEO?AjBV=rRuTVABoMkTIEmWCa^chEBJcl$E^YD6&gZalgh/5p_:D8Og)uS&E:CHY:8oYu:E!^L%cOK=mY-4@bmJ7i<rONCs6k
%O_#_m03)]$AX!j=D21>V?F!7IbfdIj[5%2$k+<QgGQKH)FfXapr2a,WC3ONb05)k4mP<Ig#g-/B&(maa!,Pb2M\hsbo32PE0rldZ
%%6h4sZE[WY`:GM_]sMH77H8&/iA<BZ$a-\&:<kAHbd)S=KTDDZP,]E&N?R8"=M9dWV.Rt1[jag?p!Cps=F"ON?+[F'//j5Ad7@@2
%H"e_l@2RJ*@O,`nb#C@'-HhIWI9#.5p40L^qpBoq)mnTB#N`=4PoFY$'Y!L99b?*_lT"m_a!qJ9pE)tOX-'hGVH[tG-[p'CEN4Rn
%D%K6Hl3>=^M48eJ\tjUdfNJ^D[Rt_(l,]\JY(A?j.LBcOASM.FMG+J'P4H0=#o<\Ba*$a9eAX00U'u[.)j_ug0a5KT))r?deJ.VS
%G39O%;L<6kDH:pa/udu9bKL5?YJi]4(kmp4XDM7/W9@:@VlnXQ#E.>,pooh1aJ!@>B>X,^#QT^d7;]_tlu0.%Au?FK?dqKZ_CfLT
%WVcT`?k#tm+VERFMjj=%$GrNFB"1pmY<b=*IXMN`aM1T4_^S2(m46EY,O['fr]n=p'7(@2qi0O76r2sb0clpjbb:fMl7lG\Y_WNR
%Mc3[gi"/Vm=#K/<Kos]d&?1[0JW^VgU"EL)HAkRPR-^3&><7O5oXi\no?GlDOI#b?0#OCELQ/-U)*NskiPR(s+Y6ruI6nTr@Yq&e
%9=5fKSU0pQcUM]FQTdOkLLY&r^O!t]*4JN0Ci;H]lh%jD&b@Hh2ErB;i>GZ9r>X`%g^=lH0=9qXCcUZMV5\)[;f4U]V^/5"We:]W
%0kKe'WtL5PT3YrN3=kVGiA,$3/d"=m;'ft*=[9qS/"<8'[IO%3106;k()\["a7$'rb=pI6nS-n3Kgat/`.0i4AO!>`V$;8cLgXo-
%F0nSu5m50kTa%'!`\Q"^"`a7k&bVm=1,p\jh4.L$f@#JH.HG!?d1^B+.7u=Ln'K>:8$i(Bp_/PU_rl:p)G4H4)ni.`pbf4BLgi@:
%D%b6.1YL$R!di6;lW&6uDi0+:*dl[OnXQau/igo74AQT8J"HB_XX8\04D3fh?>pr<9-84=s6MKM*8a(>i![N=/4p@?We?\6I$rTm
%ec&%m'9pAaTHXC4ibkc*ne!5@S8UbKX%lO%b9rI/k-s`C:A\XlY+dM?`pY[!+h8%c_K?]!rC$f=eVlfU"X$$)7^S<B-DUuZs"Fl^
%A"`^=3h3k2N6C@1JeVX,*BH>`)esR'4e@Yd>F$;\7g;KM>bVWG'j>EOh.FlQ;LJo)2,KT,/r%:e.chUP<85W7$H.GD_):I@M?g`L
%&d5,"`;+AZh&c=6`t0bN7cdK7pOKJ6j()jtK;)Wc%p)gJ5dX?.#$45S,s8X3R&tcDXZ$H.2-sEL%kXPcX$?ncTWF1qq#S@Do*fT0
%+9,kFLlLeZ*<o#oL$#dZ@]a/LSmS.*OY"M0.LH@('_mf5ZpaBc,h&M#BP:fjMm3,2jE>tH`/cA&qV50fbIr(1LcE5$39WO?U"hQW
%87#!<[OM3HD&D$b0F9><I)ucXOM_Lc!BGDU;Mj+:&/\]AoN;CoijZ3rp;+1(0pe^[T`'X,)8hEF9!N:\)nUDlG"u&(4ag2&5auE:
%&e>LI:VJs17nC/Q2JbmppZ4%#\nANjYP0[(pF."Y'/;j'R=GG:TbX.;:"FBgAp*-rW:RM%R^?`=NMKr^W7+FL=IZlND6t6>N7?_n
%#FPQ<Su3%`>Am7@>QIO=-rJ>JbD_TfjGAfRkR"E1>pCia35r![K8[p4m/m$jF][6s5q&\$)>R1'CQU>N%f3=f-"j;U,a,U8X-gWi
%eYFN(Dif>t#/QqtQ-UldC<E5M@GF`]UlJ6+h9NhdF1r[6E^G]SBrEu*V=i[]`VJ&ZV<Ia,?[hh*QS6(&rlsn<]t@O0Yhsp._or)M
%qre"Qo#i]drqSK[]mBM:+.g5r),&H=TDF=]hn4F;lG7CDIf%;ADn^Ykc-&'Gr$/t#`39*7S'n4iPiJVDihJX5eSeeYJ+\g@If'&D
%YQ++JQX?&,bHkRSmC1uejm#q)^A,JCrq1KI.F)<!br=NE]'MB5I/X#qcX6Y"+.duTk4psnn!F(Is7u*;=+C#E@:N[#ptK`enBG%t
%+$QI!b"r'&h7DbNe@"JRl`QT3I/ic^s,*j[Dbl/Qm?dh+KBgq"4'd?Q7t&5AC(LNGA,#\$ro_m?IK03CWC\5+F$Y*/VuH"[I_fUZ
%.2^aqogXH2o'>33rqi>c[E#2ZefGe1p!G>ja6.B4^]*XAJ)66-O13FB"TREep'm/l5%Inqqll:\Hur*MZcL6o).D`3=cplhDP)jO
%*kBUfotp-<q6^SnceVOgZ27d4n/f1PI$aN[Rc*rUc-d??c^j<hhreI^,P\hIgkF\L@Cs2I=G!0c&U;B(>Dr+@K`1YQXiY.4gPY6_
%I@l/.A'7gr@aLI(Ue/_TMO:m"e@N'<<;9&WEJ2BB0VpIk3eW5(GSH>A^b:)=.IF?O9!L'-.=LDHZ;'=cCAV<\^Mj#n[BBi?$;beZ
%CCk/un<oA:E8`k;@t_qAjN;<j*7S<i<i`g4AYAj"'<[7-2qEU^rKPYNA"Y>pY/5%;GB=>&$,*Jll`I9H_G"CW,i0?(iq@H3gc$7(
%hd?08D&me@YCCFX'_Ub%@Cj#LNa]W/FgU3*>"mDX7[Jm8RBGE/T%1#molL#j*k0D76m+[G[0$\q`2O"qO<"Xn-YF9Ym80*FnC$9c
%pAqL#2m16fp/N>BY/5F'To?.M7gZ^iOgC080]u*7V$:!YoI,!a(SnpHr4ru5A293<1]D&gW[2Lq;O!a)(1\p?WA'TP@B)P@0UYIm
%U>!SsMT`"V5'3kZ53q4[%e3HfPYT2hR&%;+Z%ig,(FlBfY++mN)"e$*qqs407)I+ZP9>B0;l%5BjAs0tp-O4b%iaN(A]5nSqdUm@
%PR8[h6WooL_+,"WQt,olaO/AP(`,.H?07`X?tK79\[cee[)"`od"hSt?:9sHo@9IHYP]gL(:qV8j=]H[:7bX>Y?Y4EIcW>$lJf_H
%a@WNg[8$/?UNfBWhlLN`RK,>hdUDFk<Uos!"%N\'bYg3ofJsHFMUo::REoTs@2Fi:5-\Wj0!I<nX)$]?Vg_\`'GZ8DT_29^mMPP$
%>!s?rq9t><4Z=B&<O/4p)JSP#O#>:I7X/sZr2u/'[H:C4Npb6BQ6!Z'<=n>O2&bn'iSgbtboD:k%ZZ99U1Y5'+Du=9%2K\Majg%e
%db^lX7(U:SF%!oaD(ASLINa![j]/9TdDA?%9^@pRY]W\*46%`LI#P'tOCcF-.Ch$gYk0X**NnU-2]e^jiH;--Lk4$0.Ib-<Y]MU?
%Am,^Ll$d]&<0)G[=shEO&lG,tZqWLa>g?8\>B'h/<(T]^nG]L=paO\&4)/su%A8pcKN)Zg`B8PS!NYLGq00#DB[G6R,5A''D<@b:
%n+:Z(hrKNkF?B0:6O!9tpfuQ'a)3AVJI.2X45%cMG?19onPI"ULoQ"u$E,:hD*=C[cLMX'+@Sk(;e;#&ZRMA`-*%=$;ab3H`Pt4/
%&W<<GZEQ(,1:=$C`D/_*B)3I]@%/bL<;2Xj<YZ>43l+)S-#!%o)-$]h^,MIT7TL`NHAFgk3O77Roq5/HAlsO@Rn8L[b*lVHkb9Ld
%AJa)$XZ)J4.8[mC)H5T`"USCVMX(8=,o^#Ek"dB\#]@p&P!2>b\m5rXdc)"`!m;pO&oAp!YSKS0+N&CDa*q%m0-OP?&X1@.C\G'n
%e@-kD"F,%mJ,nS$"VFJ,,XB`H&rb-R1hOnA-jcr??oeX4^hqh+KTWqNg=C#!/#'lc(<Dmg0ls;K4dRiRf!?e_5CJ*-VI"'U\%aCi
%:8s*q7Uf*^K%V\+<>Cq6OG:/p%qiockprjlm^bpeqoAAq$"]#l$o]3AppDjbVd!m7;mAlaj4f1;Uf?h.q_$-ZNh'+NE0Gt$.V8,S
%7FRq3C:r1#iHq1?*fR/SZ8Y:42/JI*#c[1;>SCOlepUi*jn?7>MYij9%Ys=@#++_j=&eIC(L:<+-=g8V&+:MqP$#C/,31-H5dS'g
%49HZE$+?Zu4;'<bI/.F[Gt[)ifc"4SUh+*4eo6t]^`a]J6kYaR&*0)jQ^B*M4f:*6VQT,W4M_rNNJOs2@_'D`SWpkG'VGUY0<(^"
%^BM=bK$%PD&XV02XW$"/T(f$?qLpoG%]uT@]:5N1Rn>Cg0uD4KO+tLV5_qpB_>=!+C%jscpC@7*YFT?sFqdf^30X[?6@bn"S^00R
%K@"Q?mr/,>HUL2.Ebgk,2R/h@7+,b1j<l0Tkc%>46X'\ZC",E2B3Pdh2Cpb^DBBkV9%SKnRD+MalTO)J)s,/N6;td?U&$CV5:&V/
%#>>*Y_]LhV]2so?H$Y5:Urk2f!D5<!*Yr>E/iXbY;IClMUsLuI!%[/&Q23EHTOh"XS3G6C0#Y0(a@<2Wa#1KuFSM(O=/#!g+XkFQ
%H1E:^;"Ja*1$@;PDgT50Z"oj^r-YM#io^l\EdCXN%Cj=t>hoBT2BVsnFMidJ.MqN)fW7eI%C`RU>1I4-kb_g;R2tN?e#c!?CIR8)
%XFDEA9h=NfmGK`;b_P];\Mm1@rEqa1(EYt]Ud8(-p@u$[`'jQgc2H>YKgSfS]RC"nf@)qV\ON(rf^Rms[:Ro"M49/5(,H]^&O's,
%P^`+[+,./uA;Ydp(p3<:HmqQ*ScbBkPS^/93j0f/SJDj1":s]kiSh]e0rq:D"?j+c0;W;aO\-IJ`4lBFAeYK.MbqsM^6_q?IZ;VX
%KjrA=g/Fi*Kp=5h]TqF(T1/3=XUu.hhIak_f38J=PCWAhA-0IL7Wf::Ok(j`(Wd$gIP\WL]F9[9I)i!oq3^03:X=d:I?Ne5<A_TS
%n[qm=,:?ht.4nMT)K/[O`b(\$EM8t%I2:!MNGi5R.^YuhiVN:WdjPD$MX#9J&^\E]Y/7l-e\(EHMj5R<PXV)kg]Dh56EJlBU:B3\
%;oIGO"'<B,k`j+@V)5aeiQ2e,rM:\GTiDHcdKo2"kMMumFM@YqQM%arSm&:YW"Z5r(R_ep%&P3':fX3HbK=tkeTIi_gUP6CUIgPV
%mN%$g$MKR&YRUN/R\uq?An:+;LpmEL;RKU-mr,3YJIb_)"t$<l=/1+ZTY@dk+f&]>+J?#:*Gf%A(OCdeU/hmQa<:`NS0];VYtH@e
%UanKQT8phLn,D@a\qhD!jbWsK/plq\(@BX7_u"ltd<O's1CdAU)u,@:D2hGMS\9?mYC;Q@leKs$qGZk6iond#bc3$'KF?eKY3JVe
%=kR!^ko81H(SLMI7^#4=RG/(ZB,,I#HJ<@eW%A?eI8Ap`56:\Gae2OGcEf*a7)8[oeodR+b)ck7%&l?`KP>1G0Hb,LRR\3/:m\S>
%YfN_#]'ZZbP02;9hbiuW:5PrR$4$>I^X1:n<t:\KQ/4mi#qK\tC/]sQ^+-'jd+X@,B$O_=`!:TFaHmU*d)!5<2<Q@ij2[ER]$L7=
%]o<Aq-%NESCM2k*B/.ZAKYkYlUg6.@?%sZAH>LaM@R#q7%],Y5C!7[d34^.f$Q3;/j<$=ra0b_>MUq+/Vo!OrFZC(`.!H\XS#!DJ
%YJ"';AK%GU$?`.%`1_]P",jdSDB_#*9*,/M;M7D;rJ4a=\HukL=)2e#j-k@_p@q=3IK`_g(>Aji;:F&q'F9T!p)G``;b?4]1M91N
%(i+gH$rnk4+X"7G;WfW=qVIIg(Hd*-qF'8mcZQIk!\dou&C71%;V2N!Y>ggu5UM2,qJ6<Je&H7r"LV@(.%_&K&gWp*G7^p'Mn?[M
%L3r7R'Mc;hpca/=pC>]Nj-N^f^m$;gM<gZI25&lV>N`O&>!&Ms.Bh;?l'U4/_J`Nd]nNjC!JHBYW-NGfd0B.@>0?)WPN$r8"lihk
%"R.=`7V?!+X&ad#q+o"D7S`YXpIagDj#2QahXW\9J+Q&'-fim-91Q[EG=P5!2$S8Znn(HKEdAQMmXUe[UD#BiKiVo#OgC9]`4R!P
%7;kjDqm'm2fk\[RIQ(%8.U2)4K-$#R^T7qASCtn[XqQ6GdPrKo.SX]%W?mD$8?`HYe`m]CrSYr_-mH:!#6ed%<0(,:KfZIlD)BYW
%bB+atC15p_2]J7/r@-iC&@/OhlQKf*6QkupoG0rWk'@S^O=nfuOl4'+?8fQq@1`m0^TJP<Rmj7hYebO;dtisRgR&fdoJuEG;&Ed@
%PB4Y&`MiSqm"c$CZHRcM//mH.a)1VQ>2XNa<2KV+Ok5b%BGRogHY@Kk'WZKc[oK<dooPb+2aTf[`pUIc=ATJp#C<J:loc,>9M9mE
%SENL`;(`I933?f7UuTd,Wp.AGr4@uFY\2(R)U,k[K]?Chp<"j*>+$Yf9D:*,i?eK$BSfDnJG1SW4hN-.]`,8NpPSr>%8cb>7@s?b
%\)5.3Bpd?snosm<cidT2<f-OOTj]ORPi'u@kicF>I6;9>q`XT$OH;nCR@Y.IC!dM'gYpO%7OF-s<\,f=<[:;G./SFf3Sk:#Y9bZ3
%AjW1Q[-L>hp7-tAmeVhK+&2"1>B6.a@U3(O0iH*(U?p_PfV>[<8W99V-I#eY$XA->^!LW_oC9O>;5;`1rE3Jm"CfI\%EfN?=b.a(
%Oha/H,1=K3k.0B*:Yn`%:eNnoiRPT,dJ/EREE*DEb+]Mj=\>cn.Qqgik&Q-;8LJ1G%7@<i==BmYj&l-4)_\MM&"KeGFh8\AX+NfL
%A[RT?f)>21(h*lA&^uq\0D(u[j+mL!29dJ>=%`*&<W4r)&pknhUMn%Pqu)hbrm-#9]dA,F-iN_9Y,N]Y$Z]=CVq>I;@CoWq/+QRE
%VZLjG[TfXgi)LjZLfTZdND<-!eQ(<JA]:[r($1Z/8,05/V<rV(#-Hu32:K@:<oZO</&2SR<0T_!IG\f3K8`s2MmTBE-:B18)//'l
%4h'gK'ik4tQ!'s$4*0BSeVCrK0]PJm/KWG"XYQk\re9f@:/])3j1;mOMut@74eU'h0N%lX0q/+Q,IBE#?j.:WlAS6HG&o8).-tmD
%j3Je8>OZltrUM79e*a#Aljlm77Q6*6N=dgtdX]$_CnX[rFB4Bf8gt7%`ldT'DXQ&a]Zfb=&R#$GKD?/T!6\!*=F>@a?9Z4UPI<Ff
%a]?atPnflk5lt[0W`Xp)!@NrA[\&ZH^9`(=LCs1Hetj9A+qRdr4A,*/!isSph.U[2R;)`aBj.LLa@bq'drkj?#LRBD04HPXA3Sda
%p/gGjV65(HP?tno^&gNF`N*["`k@/;EF]dqRfRPdUSu=3rH\4LE^[=lO[A_I<j@Ni3m*(UJ'^>S%N'=T0KLH)co/jXMYh80UbfGR
%!5W3gqi*O?$:ZJ,g6h7`9q`uk)9$STle'AnPplsJJKCpE4p)g/Ar\2RT7n9,]Xq4H*q%T14W\qM5`rZiQ_U#;6Jg9ud@NWc,&^:t
%>lA!/^9^T'<9K1$fXIWaa&l.pkb2^FYtV:-'_njcAYm'3XmO7Dc'1UD+_u-$>Q-p\g8>I%H]Ss=b]2t4-1/NNp5*_6cVtYD*$P$V
%I`V,$Da/CQj?A!#'<(8(?U#AA:I"8nYeA,AN'%O-/[I!`;=8V]Sn*E(aenG;jrW`*)L8peRWFY$gKGd7-92,hnCl9q\4;HOc&Q70
%f\T",bn;DL"3J>_>P$KG;JW^E/$HT[g([#<Ie_cmSo`r44)0tfag7ghEU^[8A"#VB^2I0Q#"Dcu;<%K(F=.U&ZPVr[%f%03F6:#;
%2MU<)`,@SX9YoA/Y'OL*p!@[6F$C<i#OIGIP:*u(0%#_/!*L(2X]S/A<fQ9s.d.5`a)Dd&17P8mE?17G\5CAI!"$6Y'B+>j]U*`P
%aom$QDY_*bek>f4I,;/Y+u)^oC_<3L=Kn9_)BsjK?'ZWX<SfG&i`jIOJd<W^12a!MHE\fQ)WWCr2'U$He7ba%PL"<(1N%YbQUrZ!
%"^BrN"HBp48bgj[%Zq!^++oSAX0@73/Zt!Uh6E)"@tR>oFii*F89/AXC4Ls:%<#Ip;Kl1;ense!-`)_Vot=0AXiEbZ2=L>OYjM.X
%[=tZJf8.OPm23VQhd\N@p?T^#+kIcn-&8TCf63l><u:crW-uU,@bm/\XDeV$om_q0[PofnprHFs?An+>W8%sm_C03eY;<=`$Qc*8
%\(eK\$+7\rCBAIR86JJp>rCu$*dI7^n"WFFqNqn`'T7"#bHFg@r=+q:[I&gLXNhW8nl40?p<a#i#uMoLGaP!bTk,[Ue-Po\!>%eG
%;G*ETFF;+.o_)J%Ud."9=Q2h(.6n&[(RkimJ4*'pTr[Coat=7i]9M;ce=@dX@^+)rR?mc)Wj1iHZ8X-kW%gU]EiEfi#/uTH6p!n$
%?rEjfMKIPa:!u&oHBKfkJia!"qpjG)s$QVYVp*A5L:Gp3C`?J[8<pSq=46OCdRg1_Mcllk`TcXG!$qntj=qpu?-FN'Y>23H1Ph=2
%ZTa<dFA9ki416,>5Isi#KPjaCk(aLqQ4)AXkY+*biLa,8>4o!eal1BG:@ZK*!^:H-Q6cUp6QP%c87m+s]WgU_/s\,Wl6qi1Kf`5p
%MmC,f0'R4I-$m(u"7UD]^SK7o4R*VaI9;r#Hn#@YMNX,N`G*6-k;7-<-7>F*-A-38#/[Q!6bipt2oC4bL.K30-%HfI.CO#bpW!QH
%fRXBPT;F\7/IA.-l]<dKC'inNTp$IOeRSjL_ikq-CrMGF-"-:("DMJ==UV<HBo&%W<^Fb;E/&uY":^;jVhLd7hDB^>n7m_oDTAp/
%0<.K$.`om`LG'SV;/<K6Rc$(<KVQFsrpV5eMIO<tG1DKbZlj(*AHC=_brBfX7-3/@d&RaD7-T(I5^_+6d"nf,s4.mUoM<%3dqpmp
%Z,#a^_r4CXWcKeu(^NKI(DkmY"]q#1lI!k"FuO^TlK+)Io=HFYSga:&\M2io>,rRI,Hb1EQ;*%h`kccap-')V:Wq9VT1NefqYn3E
%1XQXR]2_bY1J\CC!I3]o7+$'O)D`kr$#BViI"Q2Hho-[4jA1GU*)S-ffPMTchRM,u:>dba6U4C>4:N9&7_kT@;np`83K2D^4K%H>
%#apA54c^cLQqja5%1FB#bb?LtA(fEoe--]_%lT5<[-k_Y`NF?d^CmQ_cpaJ*\eDh6:2+6K`5pN1TsXt]%$Pc5okcAo^SQG:4f"YL
%DYp&I70`.O@XJZAe_,pTTXPa65Z;K@!Pgl0+M4GP.V\,RJ@Z;'5qCf,6CIN0]a-b)5l8l="]=[PUPX0kk;q!C(r@!bY-2DYf(NS6
%\35i<76d&re[7j*%8N)>(f3SJpH@OK^G]%@S4*k?ME!tm,q-)%NAlu05$[$O4Q13qm7,u)l$YSo3P&3C%u]9prcfiB$<jX#JCuf6
%JlFPtGP#na4bUdaX[koC/1Cb\fcm\i>`/_7,PuG-0j\&BU!\igH8"/ocNh_o;$EYcg<5]n+0MB=edF30@h%\>0LG'[>aJI,8t+nQ
%k.":O@+Y@[,ksF?CAR")<Ydf<Y?7YRb`jmWNS/W("\O4U+s&df=U(j^BR772Mpl;l/@8DHP^s8h)pYu@D0MR13-\B3U(F[CJ#4('
%-F@q3;?",=,PklC5V-l>9NA1>IEf$8ln.U39+m.[eO(+9n'l1eQ^"=Bo.Wj,Q<JYFiDVQhg:2%pa$&r)*WMLqLt'fV!U=`5la.Rf
%^"^UnXNmjU;f?(6g]>4!X:q?[[NNIQ"/0V^AUtR1Ic3-E=p+PsLl_!\l`?&@/(Z(t>kBcQ)RrgG5BV`2\=fr.acQ`KNV\ibo/.Q>
%.9TLq$G'HP`.)N#Z<K@;e[_aCKEP<3:4o2k;W?P5G2fdn=Ue35a$Z;]%;NT.Eo+'e,><<\!K`BMEmV26FT*^9_/AY\San483u*]-
%G!;$(Z/X[iH#9%KV2KDL.[k>lR9W(!aTa9qf]YUC\B=BDb]-u^F43jQWjo!$WH^HS>?s]$eG6'r)(Lna3=WcKDqY8#d`_ooWnpC,
%+*nC##"aBG`0lXQ.#-9I?p^@d0-k"l6.s?sl@qp-aWQ$`mV@ufio#&@;%6O,A2Eji,R\OC/g([S;HmbP,+p)-#0'EZ*R4X6?!nNR
%q5jA3,b8T"8j'42/lH,!QR)&!H.68p1nar8,kVS+5[M9F21r.2@`@Dq@sAF2-D._,M/Y(riHni>L@L?r67?0]7+`6,9?TBQUp3!Q
%9%`]"RT)f$!J9KupGmn3!]&8*jag7M=_J(uM&"Qg,tC!,TY$*LAJHbt-pA3'0Z+AI($hn5YklQqAsL9QJCR;H?=n"B<0;[[[B9$;
%nI%]AY%<9hV+aMGQ0C"Ue"#A5LuLf[/7!fc?e;_Ti%"\oQk(lBJb-nK4G5If6^'^FNW/PeVjkJqaCGbWlcsn)lgGiVGFh(c.`EOg
%Gd-=gX;<o^>_1$`>8=$)Bk1P@[#"mrjK`Rigl-m=oqZ#Lj>UU_4&#QOAeH0u_@"bsIGJD<(-)tjqMt)]<`Z,<)Is?c,8pX4Lj1H-
%G`d\t;Q=iM3_=!7nj3\KMal>F/<*YtW+:LQ;45Bm/[%V/@I%4P'*`$^Cla]tPgg=c]IRb<VB_/si67Q.KIA\W4(idg7q:(>\RC0/
%KIj'^l_]!\U,O0oE79;d"JM`?N7"7R7`ql%j\2,<<*^ItEau)mXl^Iei(fkh#9M/nLV#GhOHCZ&YWU3eH!"*\edUY2RtDh8$G@_#
%iAF"e$[5rk>T*i_%WMbnZlZ)%7^,8.cR%/KeKaJ.afN'S&Vl'GT)$!mVNIAY#1:c-Pj7K0k>WERj('0ZAZIR_1_"C>C4P'$+rI;H
%j]gI-`W%<FIQM7c4-#q&)L_NR+H8S"qH]W:mim`<H;Hh`17B1sIFk;k6lGsNh0/$s3=50Nk^0,Q78]3F/ir/C,)lfTFtVes72c'O
%h=[]*N)l:3-W&t(!*QS'44m";[b7g9Bd0ucr5HPm,,u?4fmFIfX@sFR33kL":_ZT!^/!*TQmA,q#@r0*`@SjZkuDaG>DcAtDJdXa
%fYu"4"&gdsS+MW+f%uE>Ool[=HF\9c\u\2Y+G1g,](;kAqh`VnMnM(u.fq%61rhJO#koo-B@VV*-kG%s6)/nWq-fDh=(#,5#K'Y4
%1>PO(^9*bR-*:)WCro?@no7NBL<5AJ3l`s-K0k7R_j$GQRYkFnjKjm]?35dM^b&"Y0"KViO-$9Ye0W,U^%juG5Y4B!>BZ.8)1;h-
%.BF\Vo][.:c$kkBf&a/]4BFbg7s+?0i#"Ab2e%g`Kr-MU^J3:e>K%eOR*r7o%L,ihZBQQhS2p%bA),/Zh8l^UN9.Y,+*>k"@7<@9
%YNDX1EK7e.:Y@1WE9H:0_7E]?A=bARY>A*"Y4!\S6HT&`hg7"&`F$A-cEVO5#&[q/\m].0"R=c3AMSr8^]M[a`>q8t_+Tq"2^[4A
%KPJ>cUT^=UEE!a&+jeU*B4kY3[$,Y@HOn$PA3:4^q[pu@&0O]/m=6+npPrfQ88-;.WIuXUBGT5S6`QRh?q'Z!#Xj,VK\VNn@uHs=
%.6g=P`RPO:80GrIh.#5(<1O2b>%Cfa35h&WZQp!Em<Ql!3AWU$g@q!Dh8Z0Ic*aAEXo+hJY"A]he6ttJWlWD"gWHp@mSJKDPVllh
%oaR3uc!=8*gQpe:KF4O_2b't^=;"';hY4B6=/sYlme!BN0\og:@YeliFdR_'*Qu[ChB\h"=8K;'kZLW,pJqVASA/U?:qr2scnT:I
%P*&G/15pY;qr7LtEq<4%&O*,Dob$aAnA4?c"Pb@K=2[V^5_I4d"X]1o;t?cY.S+(o;.%pb9M-cnW!]D!dVW*qmaWsKSTFM4Fbu5!
%\Ob%(_M+,6:;d=#!T;J)&eSenPkEN[X!K0nRpsGMac([?^%IfqB=X=]:g*$>FPt)fHR>.k7V`)cPsEJ>nNosfPtF-l2)P@`AadGg
%]oQiSSpdi_T7CVQ$FDmgl4"0[gh>bc'iRG#X0q3AV+^sa2+IC:Jk_S1b,Y;<?!$`AP'j9Yhs8cKU@cH8+qea03;%>3,A"=IC<?=H
%hfNB>WF7tjRGtKhZ!MQS:o@cER$-c]$^5U@4CH\P6W)V0NP?]1jJ;(m`XY/2^suI&kLG0Z5%pr$D>KsAgQRaM8n9ldQX]c>mE)(9
%Q1COVDccPnfP/WG`XHHUF&C]&_%f?NJX6dTih\jD>(r'6'/QS[VP&(0bfo9AdFFOqDg@]D;Yu:]mT`Qf@o*A[cu28>"5/8r0uVDg
%r21:LMemD#,HlOS1_LRi`F>-%8`Mk!4,VI"_SqXjV@lX-QpQA5,<>mH]G=1,;`pD-hW6t!7hhq7%"EZ&Id"10Ws(t[&VDJd)2G.[
%Q:,)h`r"3@]i;:Y&Tj*#4^7igAG3Rq<1DGWQGO\9/gES=>MMg\8]q_:(@W_$oARP71m=2D.>?Z-VAsKEGP%`T0R<3`Ym?5PhXaQX
%NrJAs+8`dni-tdmE$!-d?Pp<T+sH[?;-0cA;bO$dD=hAnp^VT#R%hN%9!A1;jBdT<!64_o]J$%uKpBQAme(HFb,3[4IO<k9RJi5<
%T5bb=jB[f]WopCK_'HN$A`MLL\2?\bR[WWSBigQ6ZY@F5Vg"b\n(L$]K,WnlJ&k=2/q!l;4p(B=mnbf:",Q24l$cjmDpg!d44>D'
%4>KQ:6'OF#Bt^h[]%FHfAM7D'$gq4tm-ID,Q$Io..nY#br$3VUWX^m@7j)Ze;h*gB_:^fa4%:nG;&_VUF@))t9#Y(GLkXhF9Ml_Q
%XZ8]MPaVDV"<L;M$!!S+pbg>&]!WJVd[ZW;nQ5@Oj4c=5Oghd-e`'M\9p$m6q4OSP\*2.XjBpmS($MFVQ8hujT5(hI9<V3"Z[`_f
%i6,@D9T947TO:,lQOcTT\-+FS7#A4uEN-B"$HHR<=qi6;LRkH58V0b+n@Z_gLW+[]E&0EZo`^i"Wk%aTP6;fmTX6^$j`:g+S`e(C
%G%Hf6A=g&a;$4h.'lP8[H.6dtLPgl$<6$9Z0q4k>(gW<>NCtYWI2V>gE1a]72:[Tuc"%G*N%j@q&J7kk!!:_WAb'8+cb;&].l#,D
%UoEcn<WFFbPEXiWj5$srBZEbbPF,(\<9^\:j@PncPK0,\o]kG]DONNF>3k[#(4=A9`'.EHhHXoQBfZYhdEdp;%c&5J.gg[Jf"`)"
%]WREi[6M4h.\O4AN@L4@aFX#K*jkJ9Y5"cDnk=D'2C:m^E[3Wa@Un.n=3S&mbVJ(.oU=o#*@9X1WEu;7:t6M6H+4SDNaS$,F&Q%+
%0@fAX']qs,VP%'5@"b^+4]%9j%!$='mYDn(.C?Ulpa/g@2+<<elf;Z\)]C?2ku?q_^)g^Ro4[>[^`@Z6GOQ$BLYJV]K&7;q4uZfW
%df&<UGPD'Z'lEs;hk%R2YCG%#pYUDjea;rM?bZ?qMpq1=Ish7-QiI!Gq:DfV^A5`TrU.;\5J2C;r0qWo\mGBjq57l?Hh6g?n%X;B
%o%A6%s7Y?TE7<p'?iKWbrqh3B`F&R.ZteWA~>
%AI9_PrivateDataEnd
